
GETTING-STARTED_SAMD10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  000034f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000220  200000dc  000035cc  000100dc  2**2
                  ALLOC
  3 .stack        00000404  200002fc  000037ec  000100dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002034f  00000000  00000000  0001015f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000388d  00000000  00000000  000304ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005af8  00000000  00000000  00033d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000680  00000000  00000000  00039833  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000740  00000000  00000000  00039eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016336  00000000  00000000  0003a5f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d8d0  00000000  00000000  00050929  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e522  00000000  00000000  0005e1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016bc  00000000  00000000  000cc71c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000700 	.word	0x20000700
       4:	00001b95 	.word	0x00001b95
       8:	00001b91 	.word	0x00001b91
       c:	00001b91 	.word	0x00001b91
	...
      2c:	00001b91 	.word	0x00001b91
	...
      38:	00001b91 	.word	0x00001b91
      3c:	00001b91 	.word	0x00001b91
      40:	00001b91 	.word	0x00001b91
      44:	00001b91 	.word	0x00001b91
      48:	00001b91 	.word	0x00001b91
      4c:	00001b91 	.word	0x00001b91
      50:	0000084d 	.word	0x0000084d
      54:	00001b91 	.word	0x00001b91
      58:	00001b91 	.word	0x00001b91
      5c:	00000000 	.word	0x00000000
      60:	00001b91 	.word	0x00001b91
      64:	00000d01 	.word	0x00000d01
      68:	00000d11 	.word	0x00000d11
      6c:	00000d21 	.word	0x00000d21
      70:	00001b91 	.word	0x00001b91
      74:	000018c9 	.word	0x000018c9
      78:	000018d9 	.word	0x000018d9
      7c:	00001b91 	.word	0x00001b91
      80:	00001b91 	.word	0x00001b91
      84:	00001b91 	.word	0x00001b91
      88:	00001b91 	.word	0x00001b91

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	200000dc 	.word	0x200000dc
      ac:	00000000 	.word	0x00000000
      b0:	000034f0 	.word	0x000034f0

000000b4 <frame_dummy>:
      b4:	b508      	push	{r3, lr}
      b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd08      	pop	{r3, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	000034f0 	.word	0x000034f0
      e0:	200000e0 	.word	0x200000e0
      e4:	000034f0 	.word	0x000034f0
      e8:	00000000 	.word	0x00000000

000000ec <terminal_clear>:
	terminal_clear();
}


void terminal_clear(void)
{
      ec:	b510      	push	{r4, lr}
	/*Clear screen*/
	uart_putc(27, NULL);
      ee:	201b      	movs	r0, #27
      f0:	2100      	movs	r1, #0
      f2:	4c06      	ldr	r4, [pc, #24]	; (10c <terminal_clear+0x20>)
      f4:	47a0      	blx	r4
	uart_putc('[', NULL);
      f6:	205b      	movs	r0, #91	; 0x5b
      f8:	2100      	movs	r1, #0
      fa:	47a0      	blx	r4
	uart_putc('2', NULL);
      fc:	2032      	movs	r0, #50	; 0x32
      fe:	2100      	movs	r1, #0
     100:	47a0      	blx	r4
	uart_putc('J', NULL);
     102:	204a      	movs	r0, #74	; 0x4a
     104:	2100      	movs	r1, #0
     106:	47a0      	blx	r4
}
     108:	bd10      	pop	{r4, pc}
     10a:	46c0      	nop			; (mov r8, r8)
     10c:	000006e1 	.word	0x000006e1

00000110 <terminal_cursor_off>:


void terminal_cursor_off(void)
{
     110:	b510      	push	{r4, lr}
	uart_putc(27, NULL);
     112:	201b      	movs	r0, #27
     114:	2100      	movs	r1, #0
     116:	4c09      	ldr	r4, [pc, #36]	; (13c <terminal_cursor_off+0x2c>)
     118:	47a0      	blx	r4
	uart_putc('[', NULL);
     11a:	205b      	movs	r0, #91	; 0x5b
     11c:	2100      	movs	r1, #0
     11e:	47a0      	blx	r4
	uart_putc('?', NULL);
     120:	203f      	movs	r0, #63	; 0x3f
     122:	2100      	movs	r1, #0
     124:	47a0      	blx	r4
	uart_putc('2', NULL);
     126:	2032      	movs	r0, #50	; 0x32
     128:	2100      	movs	r1, #0
     12a:	47a0      	blx	r4
	uart_putc('5', NULL);
     12c:	2035      	movs	r0, #53	; 0x35
     12e:	2100      	movs	r1, #0
     130:	47a0      	blx	r4
	uart_putc('l', NULL);
     132:	206c      	movs	r0, #108	; 0x6c
     134:	2100      	movs	r1, #0
     136:	47a0      	blx	r4
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	000006e1 	.word	0x000006e1

00000140 <terminal_cursor_home>:

void terminal_cursor_home(void)
{
     140:	b510      	push	{r4, lr}
	uart_putc(27, NULL);
     142:	201b      	movs	r0, #27
     144:	2100      	movs	r1, #0
     146:	4c04      	ldr	r4, [pc, #16]	; (158 <terminal_cursor_home+0x18>)
     148:	47a0      	blx	r4
	uart_putc('[', NULL);
     14a:	205b      	movs	r0, #91	; 0x5b
     14c:	2100      	movs	r1, #0
     14e:	47a0      	blx	r4
	uart_putc('H', NULL);
     150:	2048      	movs	r0, #72	; 0x48
     152:	2100      	movs	r1, #0
     154:	47a0      	blx	r4
}
     156:	bd10      	pop	{r4, pc}
     158:	000006e1 	.word	0x000006e1

0000015c <terminal_putc>:


void terminal_putc(unsigned char c)
{
     15c:	b508      	push	{r3, lr}
	uart_putc(c, NULL);
     15e:	2100      	movs	r1, #0
     160:	4b01      	ldr	r3, [pc, #4]	; (168 <terminal_putc+0xc>)
     162:	4798      	blx	r3
}
     164:	bd08      	pop	{r3, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	000006e1 	.word	0x000006e1

0000016c <tetris_init>:
static struct tetris t;

void tetris_init(void) 
{
	uint8_t x, y;
	t.score = 0;
     16c:	480a      	ldr	r0, [pc, #40]	; (198 <tetris_init+0x2c>)
     16e:	2200      	movs	r2, #0
     170:	23f2      	movs	r3, #242	; 0xf2
     172:	52c2      	strh	r2, [r0, r3]
	t.gameover = false;
     174:	3b02      	subs	r3, #2
     176:	54c2      	strb	r2, [r0, r3]
     178:	1c03      	adds	r3, r0, #0
     17a:	30f0      	adds	r0, #240	; 0xf0

	//Clear game table
	for (x = 0; x < TETRIS_W; x++) 
	{
		for ( y = 0; y < TETRIS_H; y++)
			t.game[x][y] = ' ';
     17c:	2120      	movs	r1, #32
     17e:	e006      	b.n	18e <tetris_init+0x22>
     180:	7019      	strb	r1, [r3, #0]
     182:	3301      	adds	r3, #1
	t.gameover = false;

	//Clear game table
	for (x = 0; x < TETRIS_W; x++) 
	{
		for ( y = 0; y < TETRIS_H; y++)
     184:	429a      	cmp	r2, r3
     186:	d1fb      	bne.n	180 <tetris_init+0x14>
     188:	1e13      	subs	r3, r2, #0
	uint8_t x, y;
	t.score = 0;
	t.gameover = false;

	//Clear game table
	for (x = 0; x < TETRIS_W; x++) 
     18a:	4283      	cmp	r3, r0
     18c:	d002      	beq.n	194 <tetris_init+0x28>
     18e:	1c1a      	adds	r2, r3, #0
     190:	3214      	adds	r2, #20
     192:	e7f5      	b.n	180 <tetris_init+0x14>
	{
		for ( y = 0; y < TETRIS_H; y++)
			t.game[x][y] = ' ';
	}
}
     194:	4770      	bx	lr
     196:	46c0      	nop			; (mov r8, r8)
     198:	200000f8 	.word	0x200000f8

0000019c <tetris_print>:


void tetris_print(void) 
{
     19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     19e:	465f      	mov	r7, fp
     1a0:	4656      	mov	r6, sl
     1a2:	464d      	mov	r5, r9
     1a4:	4644      	mov	r4, r8
     1a6:	b4f0      	push	{r4, r5, r6, r7}
	int x,y;
	
	printf(" [SAMD10 TETRIS FOR GEEKTIMES]\n");
     1a8:	484d      	ldr	r0, [pc, #308]	; (2e0 <tetris_print+0x144>)
     1aa:	4b4e      	ldr	r3, [pc, #312]	; (2e4 <tetris_print+0x148>)
     1ac:	4798      	blx	r3
	printf(" [========SCORE: %d========]\n", t.score);
     1ae:	23f2      	movs	r3, #242	; 0xf2
     1b0:	4a4d      	ldr	r2, [pc, #308]	; (2e8 <tetris_print+0x14c>)
     1b2:	5ad1      	ldrh	r1, [r2, r3]
     1b4:	484d      	ldr	r0, [pc, #308]	; (2ec <tetris_print+0x150>)
     1b6:	4b4e      	ldr	r3, [pc, #312]	; (2f0 <tetris_print+0x154>)
     1b8:	4798      	blx	r3
	for (y = 0; y < TETRIS_H; y++) 
     1ba:	2600      	movs	r6, #0
	{
		terminal_putc('<');
     1bc:	4b4d      	ldr	r3, [pc, #308]	; (2f4 <tetris_print+0x158>)
     1be:	469a      	mov	sl, r3
     1c0:	4b49      	ldr	r3, [pc, #292]	; (2e8 <tetris_print+0x14c>)
     1c2:	469b      	mov	fp, r3
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
     1c4:	4698      	mov	r8, r3
	
	printf(" [SAMD10 TETRIS FOR GEEKTIMES]\n");
	printf(" [========SCORE: %d========]\n", t.score);
	for (y = 0; y < TETRIS_H; y++) 
	{
		terminal_putc('<');
     1c6:	203c      	movs	r0, #60	; 0x3c
     1c8:	47d0      	blx	sl
		terminal_putc('!');
     1ca:	2021      	movs	r0, #33	; 0x21
     1cc:	47d0      	blx	sl
     1ce:	465b      	mov	r3, fp
     1d0:	199d      	adds	r5, r3, r6
		for (x = 0; x < TETRIS_W; x++) 
     1d2:	2400      	movs	r4, #0
			{
				terminal_putc(t.termino.data[y-t.y][x-t.x]);	
			} 
			else 
			{
				terminal_putc(t.game[x][y]);
     1d4:	4f47      	ldr	r7, [pc, #284]	; (2f4 <tetris_print+0x158>)
		terminal_putc('<');
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
				(y >= t.y) &&
     1d6:	4b44      	ldr	r3, [pc, #272]	; (2e8 <tetris_print+0x14c>)
     1d8:	4699      	mov	r9, r3
	{
		terminal_putc('<');
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
     1da:	2383      	movs	r3, #131	; 0x83
     1dc:	005b      	lsls	r3, r3, #1
     1de:	4642      	mov	r2, r8
     1e0:	56d3      	ldrsb	r3, [r2, r3]
     1e2:	42a3      	cmp	r3, r4
     1e4:	dc1e      	bgt.n	224 <tetris_print+0x88>
				(y >= t.y) &&
     1e6:	2208      	movs	r2, #8
     1e8:	32ff      	adds	r2, #255	; 0xff
     1ea:	4649      	mov	r1, r9
     1ec:	568a      	ldrsb	r2, [r1, r2]
	{
		terminal_putc('<');
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
     1ee:	42b2      	cmp	r2, r6
     1f0:	dc18      	bgt.n	224 <tetris_print+0x88>
				(y >= t.y) &&
				(x < (t.x+t.termino.w)) &&
     1f2:	2182      	movs	r1, #130	; 0x82
     1f4:	0049      	lsls	r1, r1, #1
     1f6:	483c      	ldr	r0, [pc, #240]	; (2e8 <tetris_print+0x14c>)
     1f8:	5c41      	ldrb	r1, [r0, r1]
     1fa:	1859      	adds	r1, r3, r1
		terminal_putc('<');
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
				(y >= t.y) &&
     1fc:	42a1      	cmp	r1, r4
     1fe:	dd11      	ble.n	224 <tetris_print+0x88>
				(x < (t.x+t.termino.w)) &&
				(y < (t.y+t.termino.h)) &&
     200:	2106      	movs	r1, #6
     202:	31ff      	adds	r1, #255	; 0xff
     204:	5c41      	ldrb	r1, [r0, r1]
     206:	1851      	adds	r1, r2, r1
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
				(y >= t.y) &&
				(x < (t.x+t.termino.w)) &&
     208:	42b1      	cmp	r1, r6
     20a:	dd0b      	ble.n	224 <tetris_print+0x88>
				(y < (t.y+t.termino.h)) &&
				(t.termino.data[y-t.y][x-t.x] != ' ')) 
     20c:	1ab1      	subs	r1, r6, r2
     20e:	1ae2      	subs	r2, r4, r3
     210:	008b      	lsls	r3, r1, #2
     212:	18c3      	adds	r3, r0, r3
     214:	189b      	adds	r3, r3, r2
     216:	33f0      	adds	r3, #240	; 0xf0
     218:	7918      	ldrb	r0, [r3, #4]
		for (x = 0; x < TETRIS_W; x++) 
		{
			if ((x >= t.x) &&
				(y >= t.y) &&
				(x < (t.x+t.termino.w)) &&
				(y < (t.y+t.termino.h)) &&
     21a:	2820      	cmp	r0, #32
     21c:	d002      	beq.n	224 <tetris_print+0x88>
				(t.termino.data[y-t.y][x-t.x] != ' ')) 
			{
				terminal_putc(t.termino.data[y-t.y][x-t.x]);	
     21e:	4b35      	ldr	r3, [pc, #212]	; (2f4 <tetris_print+0x158>)
     220:	4798      	blx	r3
     222:	e001      	b.n	228 <tetris_print+0x8c>
			} 
			else 
			{
				terminal_putc(t.game[x][y]);
     224:	7828      	ldrb	r0, [r5, #0]
     226:	47b8      	blx	r7
			}
			
			if (x != (TETRIS_W - 1)) 
     228:	2c0b      	cmp	r4, #11
     22a:	d006      	beq.n	23a <tetris_print+0x9e>
			{
				terminal_putc(' ');	
     22c:	2020      	movs	r0, #32
     22e:	4b31      	ldr	r3, [pc, #196]	; (2f4 <tetris_print+0x158>)
     230:	4798      	blx	r3
	printf(" [========SCORE: %d========]\n", t.score);
	for (y = 0; y < TETRIS_H; y++) 
	{
		terminal_putc('<');
		terminal_putc('!');
		for (x = 0; x < TETRIS_W; x++) 
     232:	3401      	adds	r4, #1
     234:	3514      	adds	r5, #20
     236:	2c0c      	cmp	r4, #12
     238:	d1cf      	bne.n	1da <tetris_print+0x3e>
			if (x != (TETRIS_W - 1)) 
			{
				terminal_putc(' ');	
			}
		}
		terminal_putc('!');
     23a:	2021      	movs	r0, #33	; 0x21
     23c:	4c2d      	ldr	r4, [pc, #180]	; (2f4 <tetris_print+0x158>)
     23e:	47a0      	blx	r4
		terminal_putc('>');
     240:	203e      	movs	r0, #62	; 0x3e
     242:	47a0      	blx	r4
		terminal_putc('\n');
     244:	200a      	movs	r0, #10
     246:	47a0      	blx	r4
{
	int x,y;
	
	printf(" [SAMD10 TETRIS FOR GEEKTIMES]\n");
	printf(" [========SCORE: %d========]\n", t.score);
	for (y = 0; y < TETRIS_H; y++) 
     248:	3601      	adds	r6, #1
     24a:	2e14      	cmp	r6, #20
     24c:	d1bb      	bne.n	1c6 <tetris_print+0x2a>
		terminal_putc('!');
		terminal_putc('>');
		terminal_putc('\n');
	}
	
	terminal_putc('<');
     24e:	203c      	movs	r0, #60	; 0x3c
     250:	4c28      	ldr	r4, [pc, #160]	; (2f4 <tetris_print+0x158>)
     252:	47a0      	blx	r4
	terminal_putc('!');
     254:	2021      	movs	r0, #33	; 0x21
     256:	47a0      	blx	r4
     258:	2417      	movs	r4, #23
	for (x=0; x < 2*TETRIS_W - 1; x++)
		terminal_putc('=');
     25a:	4d26      	ldr	r5, [pc, #152]	; (2f4 <tetris_print+0x158>)
     25c:	203d      	movs	r0, #61	; 0x3d
     25e:	47a8      	blx	r5
     260:	3c01      	subs	r4, #1
		terminal_putc('\n');
	}
	
	terminal_putc('<');
	terminal_putc('!');
	for (x=0; x < 2*TETRIS_W - 1; x++)
     262:	2c00      	cmp	r4, #0
     264:	d1fa      	bne.n	25c <tetris_print+0xc0>
		terminal_putc('=');
	terminal_putc('!');
     266:	2021      	movs	r0, #33	; 0x21
     268:	4c22      	ldr	r4, [pc, #136]	; (2f4 <tetris_print+0x158>)
     26a:	47a0      	blx	r4
	terminal_putc('>');
     26c:	203e      	movs	r0, #62	; 0x3e
     26e:	47a0      	blx	r4
	
	if (t.gameover) 
     270:	23f0      	movs	r3, #240	; 0xf0
     272:	4a1d      	ldr	r2, [pc, #116]	; (2e8 <tetris_print+0x14c>)
     274:	5cd3      	ldrb	r3, [r2, r3]
     276:	2b00      	cmp	r3, #0
     278:	d02c      	beq.n	2d4 <tetris_print+0x138>
	{
		terminal_putc('\n');
     27a:	200a      	movs	r0, #10
     27c:	4c1d      	ldr	r4, [pc, #116]	; (2f4 <tetris_print+0x158>)
     27e:	47a0      	blx	r4
		terminal_putc('*');
     280:	202a      	movs	r0, #42	; 0x2a
     282:	47a0      	blx	r4
		terminal_putc('*');
     284:	202a      	movs	r0, #42	; 0x2a
     286:	47a0      	blx	r4
		terminal_putc('*');
     288:	202a      	movs	r0, #42	; 0x2a
     28a:	47a0      	blx	r4
	    terminal_putc('*');
     28c:	202a      	movs	r0, #42	; 0x2a
     28e:	47a0      	blx	r4
		terminal_putc('*');
     290:	202a      	movs	r0, #42	; 0x2a
     292:	47a0      	blx	r4
		terminal_putc(' ');
     294:	2020      	movs	r0, #32
     296:	47a0      	blx	r4
		terminal_putc('G');
     298:	2047      	movs	r0, #71	; 0x47
     29a:	47a0      	blx	r4
		terminal_putc('A');
     29c:	2041      	movs	r0, #65	; 0x41
     29e:	47a0      	blx	r4
		terminal_putc('M');
     2a0:	204d      	movs	r0, #77	; 0x4d
     2a2:	47a0      	blx	r4
		terminal_putc('E');
     2a4:	2045      	movs	r0, #69	; 0x45
     2a6:	47a0      	blx	r4
		terminal_putc(' ');
     2a8:	2020      	movs	r0, #32
     2aa:	47a0      	blx	r4
		terminal_putc('O');
     2ac:	204f      	movs	r0, #79	; 0x4f
     2ae:	47a0      	blx	r4
		terminal_putc('V');
     2b0:	2056      	movs	r0, #86	; 0x56
     2b2:	47a0      	blx	r4
		terminal_putc('E');
     2b4:	2045      	movs	r0, #69	; 0x45
     2b6:	47a0      	blx	r4
		terminal_putc('R');
     2b8:	2052      	movs	r0, #82	; 0x52
     2ba:	47a0      	blx	r4
		terminal_putc(' ');
     2bc:	2020      	movs	r0, #32
     2be:	47a0      	blx	r4
		terminal_putc('*');
     2c0:	202a      	movs	r0, #42	; 0x2a
     2c2:	47a0      	blx	r4
		terminal_putc('*');
     2c4:	202a      	movs	r0, #42	; 0x2a
     2c6:	47a0      	blx	r4
		terminal_putc('*');
     2c8:	202a      	movs	r0, #42	; 0x2a
     2ca:	47a0      	blx	r4
		terminal_putc('*');
     2cc:	202a      	movs	r0, #42	; 0x2a
     2ce:	47a0      	blx	r4
		terminal_putc('*');
     2d0:	202a      	movs	r0, #42	; 0x2a
     2d2:	47a0      	blx	r4
	}
}
     2d4:	bc3c      	pop	{r2, r3, r4, r5}
     2d6:	4690      	mov	r8, r2
     2d8:	4699      	mov	r9, r3
     2da:	46a2      	mov	sl, r4
     2dc:	46ab      	mov	fp, r5
     2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2e0:	0000338c 	.word	0x0000338c
     2e4:	000023a5 	.word	0x000023a5
     2e8:	200000f8 	.word	0x200000f8
     2ec:	000033ac 	.word	0x000033ac
     2f0:	000022ad 	.word	0x000022ad
     2f4:	0000015d 	.word	0x0000015d

000002f8 <tetris_hittest>:
	}
}


bool tetris_hittest(void) 
{
     2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2fa:	465f      	mov	r7, fp
     2fc:	4656      	mov	r6, sl
     2fe:	464d      	mov	r5, r9
     300:	4644      	mov	r4, r8
     302:	b4f0      	push	{r4, r5, r6, r7}
	if (t.x < 0) 
     304:	2383      	movs	r3, #131	; 0x83
     306:	005b      	lsls	r3, r3, #1
     308:	4a2a      	ldr	r2, [pc, #168]	; (3b4 <tetris_hittest+0xbc>)
     30a:	5cd5      	ldrb	r5, [r2, r3]
     30c:	b26b      	sxtb	r3, r5
     30e:	2b00      	cmp	r3, #0
     310:	db41      	blt.n	396 <tetris_hittest+0x9e>
	{
		return true;	
	} 
	else if ((t.x + t.termino.w) > TETRIS_W) 
     312:	2382      	movs	r3, #130	; 0x82
     314:	005b      	lsls	r3, r3, #1
     316:	5cd7      	ldrb	r7, [r2, r3]
     318:	b26b      	sxtb	r3, r5
     31a:	19db      	adds	r3, r3, r7
	{
		return true;
     31c:	2001      	movs	r0, #1
{
	if (t.x < 0) 
	{
		return true;	
	} 
	else if ((t.x + t.termino.w) > TETRIS_W) 
     31e:	2b0c      	cmp	r3, #12
     320:	dc42      	bgt.n	3a8 <tetris_hittest+0xb0>
	{
		return true;
	}
	
	for (uint8_t x = 0; x < t.termino.w; x++) 
     322:	2f00      	cmp	r7, #0
     324:	d039      	beq.n	39a <tetris_hittest+0xa2>
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
     326:	1c13      	adds	r3, r2, #0
     328:	2206      	movs	r2, #6
     32a:	32ff      	adds	r2, #255	; 0xff
     32c:	5c9a      	ldrb	r2, [r3, r2]
     32e:	4690      	mov	r8, r2
		{			
			if (t.termino.data[y][x] != ' ') 
			{
				int8_t abs_x = t.x + x;
				int8_t abs_y = t.y + y;
     330:	2208      	movs	r2, #8
     332:	32ff      	adds	r2, #255	; 0xff
     334:	5c9a      	ldrb	r2, [r3, r2]
     336:	4691      	mov	r9, r2
     338:	22f4      	movs	r2, #244	; 0xf4
     33a:	4694      	mov	ip, r2
     33c:	449c      	add	ip, r3
     33e:	b2ed      	uxtb	r5, r5
     340:	197f      	adds	r7, r7, r5
     342:	b2fb      	uxtb	r3, r7
     344:	469a      	mov	sl, r3
     346:	4648      	mov	r0, r9
     348:	4440      	add	r0, r8
     34a:	b2c0      	uxtb	r0, r0
				if ((abs_y >= TETRIS_H) ||	(abs_y >= 0 && t.game[abs_x][abs_y] != ' ')) 
     34c:	4e19      	ldr	r6, [pc, #100]	; (3b4 <tetris_hittest+0xbc>)
     34e:	e018      	b.n	382 <tetris_hittest+0x8a>
	
	for (uint8_t x = 0; x < t.termino.w; x++) 
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
		{			
			if (t.termino.data[y][x] != ' ') 
     350:	780a      	ldrb	r2, [r1, #0]
     352:	2a20      	cmp	r2, #32
     354:	d009      	beq.n	36a <tetris_hittest+0x72>
			{
				int8_t abs_x = t.x + x;
				int8_t abs_y = t.y + y;
     356:	b2da      	uxtb	r2, r3
				if ((abs_y >= TETRIS_H) ||	(abs_y >= 0 && t.game[abs_x][abs_y] != ' ')) 
     358:	b257      	sxtb	r7, r2
     35a:	2f13      	cmp	r7, #19
     35c:	dc1f      	bgt.n	39e <tetris_hittest+0xa6>
     35e:	2f00      	cmp	r7, #0
     360:	db03      	blt.n	36a <tetris_hittest+0x72>
     362:	19e2      	adds	r2, r4, r7
     364:	5d92      	ldrb	r2, [r2, r6]
     366:	2a20      	cmp	r2, #32
     368:	d11b      	bne.n	3a2 <tetris_hittest+0xaa>
     36a:	3104      	adds	r1, #4
     36c:	3301      	adds	r3, #1
     36e:	b2db      	uxtb	r3, r3
		return true;
	}
	
	for (uint8_t x = 0; x < t.termino.w; x++) 
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
     370:	4283      	cmp	r3, r0
     372:	d1ed      	bne.n	350 <tetris_hittest+0x58>
     374:	2301      	movs	r3, #1
     376:	469b      	mov	fp, r3
     378:	44dc      	add	ip, fp
     37a:	3501      	adds	r5, #1
     37c:	b2ed      	uxtb	r5, r5
	else if ((t.x + t.termino.w) > TETRIS_W) 
	{
		return true;
	}
	
	for (uint8_t x = 0; x < t.termino.w; x++) 
     37e:	4555      	cmp	r5, sl
     380:	d011      	beq.n	3a6 <tetris_hittest+0xae>
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
     382:	4643      	mov	r3, r8
     384:	2b00      	cmp	r3, #0
     386:	d0f5      	beq.n	374 <tetris_hittest+0x7c>
     388:	464b      	mov	r3, r9
     38a:	4661      	mov	r1, ip
		{			
			if (t.termino.data[y][x] != ' ') 
			{
				int8_t abs_x = t.x + x;
				int8_t abs_y = t.y + y;
				if ((abs_y >= TETRIS_H) ||	(abs_y >= 0 && t.game[abs_x][abs_y] != ' ')) 
     38c:	b26a      	sxtb	r2, r5
     38e:	0094      	lsls	r4, r2, #2
     390:	18a4      	adds	r4, r4, r2
     392:	00a4      	lsls	r4, r4, #2
     394:	e7dc      	b.n	350 <tetris_hittest+0x58>

bool tetris_hittest(void) 
{
	if (t.x < 0) 
	{
		return true;	
     396:	2001      	movs	r0, #1
     398:	e006      	b.n	3a8 <tetris_hittest+0xb0>
				}
			}
		}
	}
	
	return false;
     39a:	2000      	movs	r0, #0
     39c:	e004      	b.n	3a8 <tetris_hittest+0xb0>
			{
				int8_t abs_x = t.x + x;
				int8_t abs_y = t.y + y;
				if ((abs_y >= TETRIS_H) ||	(abs_y >= 0 && t.game[abs_x][abs_y] != ' ')) 
				{
					return true;
     39e:	2001      	movs	r0, #1
     3a0:	e002      	b.n	3a8 <tetris_hittest+0xb0>
     3a2:	2001      	movs	r0, #1
     3a4:	e000      	b.n	3a8 <tetris_hittest+0xb0>
				}
			}
		}
	}
	
	return false;
     3a6:	2000      	movs	r0, #0
}
     3a8:	bc3c      	pop	{r2, r3, r4, r5}
     3aa:	4690      	mov	r8, r2
     3ac:	4699      	mov	r9, r3
     3ae:	46a2      	mov	sl, r4
     3b0:	46ab      	mov	fp, r5
     3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3b4:	200000f8 	.word	0x200000f8

000003b8 <tetris_new_block>:
	}
}


void tetris_new_block(void) 
{
     3b8:	b510      	push	{r4, lr}
	t.termino = blocks[rand() % TETRIS_PIECES];
     3ba:	4b13      	ldr	r3, [pc, #76]	; (408 <STACK_SIZE+0x8>)
     3bc:	4798      	blx	r3
     3be:	4c13      	ldr	r4, [pc, #76]	; (40c <STACK_SIZE+0xc>)
     3c0:	2106      	movs	r1, #6
     3c2:	4b13      	ldr	r3, [pc, #76]	; (410 <STACK_SIZE+0x10>)
     3c4:	4798      	blx	r3
     3c6:	00cb      	lsls	r3, r1, #3
     3c8:	1859      	adds	r1, r3, r1
     3ca:	0049      	lsls	r1, r1, #1
     3cc:	1c20      	adds	r0, r4, #0
     3ce:	30f4      	adds	r0, #244	; 0xf4
     3d0:	4b10      	ldr	r3, [pc, #64]	; (414 <STACK_SIZE+0x14>)
     3d2:	1859      	adds	r1, r3, r1
     3d4:	2212      	movs	r2, #18
     3d6:	4b10      	ldr	r3, [pc, #64]	; (418 <STACK_SIZE+0x18>)
     3d8:	4798      	blx	r3
	t.x= (TETRIS_W / 2) - (t.termino.w / 2);
     3da:	2382      	movs	r3, #130	; 0x82
     3dc:	005b      	lsls	r3, r3, #1
     3de:	5ce3      	ldrb	r3, [r4, r3]
     3e0:	085b      	lsrs	r3, r3, #1
     3e2:	2206      	movs	r2, #6
     3e4:	1ad3      	subs	r3, r2, r3
     3e6:	2283      	movs	r2, #131	; 0x83
     3e8:	0052      	lsls	r2, r2, #1
     3ea:	54a3      	strb	r3, [r4, r2]
	t.y = 0;
     3ec:	2200      	movs	r2, #0
     3ee:	2308      	movs	r3, #8
     3f0:	33ff      	adds	r3, #255	; 0xff
     3f2:	54e2      	strb	r2, [r4, r3]
	
	if (tetris_hittest()) 
     3f4:	4b09      	ldr	r3, [pc, #36]	; (41c <STACK_SIZE+0x1c>)
     3f6:	4798      	blx	r3
     3f8:	2800      	cmp	r0, #0
     3fa:	d003      	beq.n	404 <STACK_SIZE+0x4>
	{
		t.gameover = true;
     3fc:	2101      	movs	r1, #1
     3fe:	23f0      	movs	r3, #240	; 0xf0
     400:	4a02      	ldr	r2, [pc, #8]	; (40c <STACK_SIZE+0xc>)
     402:	54d1      	strb	r1, [r2, r3]
	}
}
     404:	bd10      	pop	{r4, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	00002415 	.word	0x00002415
     40c:	200000f8 	.word	0x200000f8
     410:	000021d1 	.word	0x000021d1
     414:	20000000 	.word	0x20000000
     418:	00002289 	.word	0x00002289
     41c:	000002f9 	.word	0x000002f9

00000420 <tetris_print_block>:
	return false;
}


void tetris_print_block(void) 
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint8_t x = 0; x < t.termino.w; x++) 
     422:	2382      	movs	r3, #130	; 0x82
     424:	005b      	lsls	r3, r3, #1
     426:	4a15      	ldr	r2, [pc, #84]	; (47c <tetris_print_block+0x5c>)
     428:	5cd7      	ldrb	r7, [r2, r3]
     42a:	2f00      	cmp	r7, #0
     42c:	d025      	beq.n	47a <tetris_print_block+0x5a>
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
     42e:	1c14      	adds	r4, r2, #0
     430:	2306      	movs	r3, #6
     432:	33ff      	adds	r3, #255	; 0xff
     434:	5cd0      	ldrb	r0, [r2, r3]
		{
			if (t.termino.data[y][x] != ' ')
			{
				t.game[t.x + x][t.y + y]=t.termino.data[y][x];
     436:	3301      	adds	r3, #1
     438:	56d3      	ldrsb	r3, [r2, r3]
     43a:	009a      	lsls	r2, r3, #2
     43c:	18d3      	adds	r3, r2, r3
     43e:	009b      	lsls	r3, r3, #2
     440:	2208      	movs	r2, #8
     442:	32ff      	adds	r2, #255	; 0xff
     444:	56a2      	ldrsb	r2, [r4, r2]
     446:	189b      	adds	r3, r3, r2
     448:	18e4      	adds	r4, r4, r3
     44a:	2600      	movs	r6, #0
     44c:	4d0b      	ldr	r5, [pc, #44]	; (47c <tetris_print_block+0x5c>)
     44e:	e00d      	b.n	46c <tetris_print_block+0x4c>
{
	for (uint8_t x = 0; x < t.termino.w; x++) 
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
		{
			if (t.termino.data[y][x] != ' ')
     450:	7811      	ldrb	r1, [r2, #0]
     452:	2920      	cmp	r1, #32
     454:	d000      	beq.n	458 <tetris_print_block+0x38>
			{
				t.game[t.x + x][t.y + y]=t.termino.data[y][x];
     456:	54e1      	strb	r1, [r4, r3]
     458:	3301      	adds	r3, #1
     45a:	3204      	adds	r2, #4

void tetris_print_block(void) 
{
	for (uint8_t x = 0; x < t.termino.w; x++) 
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
     45c:	b2d9      	uxtb	r1, r3
     45e:	4288      	cmp	r0, r1
     460:	d8f6      	bhi.n	450 <tetris_print_block+0x30>
     462:	3601      	adds	r6, #1
     464:	3414      	adds	r4, #20
}


void tetris_print_block(void) 
{
	for (uint8_t x = 0; x < t.termino.w; x++) 
     466:	b2f3      	uxtb	r3, r6
     468:	429f      	cmp	r7, r3
     46a:	d906      	bls.n	47a <tetris_print_block+0x5a>
	{
		for (uint8_t y = 0; y < t.termino.h; y++) 
     46c:	2800      	cmp	r0, #0
     46e:	d0f8      	beq.n	462 <tetris_print_block+0x42>
     470:	1c32      	adds	r2, r6, #0
     472:	32f4      	adds	r2, #244	; 0xf4
     474:	18aa      	adds	r2, r5, r2
     476:	2300      	movs	r3, #0
     478:	e7ea      	b.n	450 <tetris_print_block+0x30>
			{
				t.game[t.x + x][t.y + y]=t.termino.data[y][x];
			}
		}	
	}
}
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     47c:	200000f8 	.word	0x200000f8

00000480 <tetris_rotate>:


void tetris_rotate(void) 
{
     480:	b5f0      	push	{r4, r5, r6, r7, lr}
     482:	4657      	mov	r7, sl
     484:	464e      	mov	r6, r9
     486:	4645      	mov	r5, r8
     488:	b4e0      	push	{r5, r6, r7}
     48a:	b08a      	sub	sp, #40	; 0x28
	struct tetris_block b = t.termino;
     48c:	ab05      	add	r3, sp, #20
     48e:	493f      	ldr	r1, [pc, #252]	; (58c <tetris_rotate+0x10c>)
     490:	1c0a      	adds	r2, r1, #0
     492:	32f4      	adds	r2, #244	; 0xf4
     494:	1c18      	adds	r0, r3, #0
     496:	ca70      	ldmia	r2!, {r4, r5, r6}
     498:	c070      	stmia	r0!, {r4, r5, r6}
     49a:	6816      	ldr	r6, [r2, #0]
     49c:	6006      	str	r6, [r0, #0]
     49e:	2282      	movs	r2, #130	; 0x82
     4a0:	0052      	lsls	r2, r2, #1
     4a2:	5c8a      	ldrb	r2, [r1, r2]
     4a4:	4690      	mov	r8, r2
     4a6:	2206      	movs	r2, #6
     4a8:	32ff      	adds	r2, #255	; 0xff
     4aa:	5c8a      	ldrb	r2, [r1, r2]
     4ac:	4692      	mov	sl, r2
	struct tetris_block s = b;
     4ae:	4642      	mov	r2, r8
     4b0:	741a      	strb	r2, [r3, #16]
     4b2:	4652      	mov	r2, sl
     4b4:	745a      	strb	r2, [r3, #17]
     4b6:	466a      	mov	r2, sp
     4b8:	cb32      	ldmia	r3!, {r1, r4, r5}
     4ba:	c232      	stmia	r2!, {r1, r4, r5}
     4bc:	6016      	str	r6, [r2, #0]
     4be:	8883      	ldrh	r3, [r0, #4]
     4c0:	8093      	strh	r3, [r2, #4]
	
	int8_t x, y;
	b.w = s.h;
	b.h = s.w;
	
	for (x = 0; x < s.w; x++) 
     4c2:	46c1      	mov	r9, r8
     4c4:	2700      	movs	r7, #0
     4c6:	2000      	movs	r0, #0
	{
		for (y = 0; y < s.h; y++) 
     4c8:	4651      	mov	r1, sl
	
	int8_t x, y;
	b.w = s.h;
	b.h = s.w;
	
	for (x = 0; x < s.w; x++) 
     4ca:	4643      	mov	r3, r8
     4cc:	2b00      	cmp	r3, #0
     4ce:	dc13      	bgt.n	4f8 <tetris_rotate+0x78>
     4d0:	e019      	b.n	506 <tetris_rotate+0x86>
	{
		for (y = 0; y < s.h; y++) 
		{
			b.data[x][y] = s.data[s.h - y - 1][x];
     4d2:	18ee      	adds	r6, r5, r3
     4d4:	1acb      	subs	r3, r1, r3
     4d6:	3b01      	subs	r3, #1
     4d8:	009b      	lsls	r3, r3, #2
     4da:	19db      	adds	r3, r3, r7
     4dc:	466c      	mov	r4, sp
     4de:	5d1c      	ldrb	r4, [r3, r4]
     4e0:	ab05      	add	r3, sp, #20
     4e2:	54f4      	strb	r4, [r6, r3]
     4e4:	3201      	adds	r2, #1
     4e6:	b2d2      	uxtb	r2, r2
	b.w = s.h;
	b.h = s.w;
	
	for (x = 0; x < s.w; x++) 
	{
		for (y = 0; y < s.h; y++) 
     4e8:	b253      	sxtb	r3, r2
     4ea:	428b      	cmp	r3, r1
     4ec:	dbf1      	blt.n	4d2 <tetris_rotate+0x52>
     4ee:	1c43      	adds	r3, r0, #1
     4f0:	b2d8      	uxtb	r0, r3
	
	int8_t x, y;
	b.w = s.h;
	b.h = s.w;
	
	for (x = 0; x < s.w; x++) 
     4f2:	b247      	sxtb	r7, r0
     4f4:	454f      	cmp	r7, r9
     4f6:	da06      	bge.n	506 <tetris_rotate+0x86>
	{
		for (y = 0; y < s.h; y++) 
     4f8:	2300      	movs	r3, #0
     4fa:	2200      	movs	r2, #0
		{
			b.data[x][y] = s.data[s.h - y - 1][x];
     4fc:	00bd      	lsls	r5, r7, #2
	b.w = s.h;
	b.h = s.w;
	
	for (x = 0; x < s.w; x++) 
	{
		for (y = 0; y < s.h; y++) 
     4fe:	4654      	mov	r4, sl
     500:	2c00      	cmp	r4, #0
     502:	dce6      	bgt.n	4d2 <tetris_rotate+0x52>
     504:	e7f3      	b.n	4ee <tetris_rotate+0x6e>
		{
			b.data[x][y] = s.data[s.h - y - 1][x];
		}
	}
	
	x = t.x;
     506:	4b21      	ldr	r3, [pc, #132]	; (58c <tetris_rotate+0x10c>)
     508:	2083      	movs	r0, #131	; 0x83
     50a:	0040      	lsls	r0, r0, #1
     50c:	5c1f      	ldrb	r7, [r3, r0]
	y = t.y;
     50e:	2108      	movs	r1, #8
     510:	31ff      	adds	r1, #255	; 0xff
     512:	5c5e      	ldrb	r6, [r3, r1]
	t.x -= (b.w - s.w) / 2;
     514:	4652      	mov	r2, sl
     516:	4644      	mov	r4, r8
     518:	1b12      	subs	r2, r2, r4
     51a:	0fd4      	lsrs	r4, r2, #31
     51c:	46a4      	mov	ip, r4
     51e:	4462      	add	r2, ip
     520:	1052      	asrs	r2, r2, #1
     522:	1aba      	subs	r2, r7, r2
     524:	541a      	strb	r2, [r3, r0]
	t.y -= (b.h - s.h) / 2;
     526:	4642      	mov	r2, r8
     528:	4650      	mov	r0, sl
     52a:	1a12      	subs	r2, r2, r0
     52c:	0fd0      	lsrs	r0, r2, #31
     52e:	1882      	adds	r2, r0, r2
     530:	1052      	asrs	r2, r2, #1
     532:	1ab2      	subs	r2, r6, r2
     534:	545a      	strb	r2, [r3, r1]
	t.termino = b;
     536:	aa05      	add	r2, sp, #20
     538:	4651      	mov	r1, sl
     53a:	7411      	strb	r1, [r2, #16]
     53c:	4641      	mov	r1, r8
     53e:	7451      	strb	r1, [r2, #17]
     540:	33f4      	adds	r3, #244	; 0xf4
     542:	ca13      	ldmia	r2!, {r0, r1, r4}
     544:	c313      	stmia	r3!, {r0, r1, r4}
     546:	6811      	ldr	r1, [r2, #0]
     548:	6019      	str	r1, [r3, #0]
     54a:	8892      	ldrh	r2, [r2, #4]
     54c:	809a      	strh	r2, [r3, #4]
	if (tetris_hittest()) 
     54e:	4b10      	ldr	r3, [pc, #64]	; (590 <tetris_rotate+0x110>)
     550:	4798      	blx	r3
     552:	2800      	cmp	r0, #0
     554:	d013      	beq.n	57e <tetris_rotate+0xfe>
	{
		t.termino=s;
     556:	466b      	mov	r3, sp
     558:	4642      	mov	r2, r8
     55a:	741a      	strb	r2, [r3, #16]
     55c:	4652      	mov	r2, sl
     55e:	745a      	strb	r2, [r3, #17]
     560:	490a      	ldr	r1, [pc, #40]	; (58c <tetris_rotate+0x10c>)
     562:	1c0a      	adds	r2, r1, #0
     564:	32f4      	adds	r2, #244	; 0xf4
     566:	cb31      	ldmia	r3!, {r0, r4, r5}
     568:	c231      	stmia	r2!, {r0, r4, r5}
     56a:	6818      	ldr	r0, [r3, #0]
     56c:	6010      	str	r0, [r2, #0]
     56e:	889b      	ldrh	r3, [r3, #4]
     570:	8093      	strh	r3, [r2, #4]
		t.x = x;
     572:	2383      	movs	r3, #131	; 0x83
     574:	005b      	lsls	r3, r3, #1
     576:	54cf      	strb	r7, [r1, r3]
		t.y = y;
     578:	2308      	movs	r3, #8
     57a:	33ff      	adds	r3, #255	; 0xff
     57c:	54ce      	strb	r6, [r1, r3]
	}
}
     57e:	b00a      	add	sp, #40	; 0x28
     580:	bc1c      	pop	{r2, r3, r4}
     582:	4690      	mov	r8, r2
     584:	4699      	mov	r9, r3
     586:	46a2      	mov	sl, r4
     588:	bdf0      	pop	{r4, r5, r6, r7, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	200000f8 	.word	0x200000f8
     590:	000002f9 	.word	0x000002f9

00000594 <tetris_gravity>:


void tetris_gravity(void) 
{
     594:	b510      	push	{r4, lr}
	t.y++;
     596:	4a09      	ldr	r2, [pc, #36]	; (5bc <tetris_gravity+0x28>)
     598:	2308      	movs	r3, #8
     59a:	33ff      	adds	r3, #255	; 0xff
     59c:	5cd4      	ldrb	r4, [r2, r3]
     59e:	1c61      	adds	r1, r4, #1
     5a0:	54d1      	strb	r1, [r2, r3]
	if (tetris_hittest()) 
     5a2:	4b07      	ldr	r3, [pc, #28]	; (5c0 <tetris_gravity+0x2c>)
     5a4:	4798      	blx	r3
     5a6:	2800      	cmp	r0, #0
     5a8:	d007      	beq.n	5ba <tetris_gravity+0x26>
	{
		t.y--;
     5aa:	2308      	movs	r3, #8
     5ac:	33ff      	adds	r3, #255	; 0xff
     5ae:	4a03      	ldr	r2, [pc, #12]	; (5bc <tetris_gravity+0x28>)
     5b0:	54d4      	strb	r4, [r2, r3]
		tetris_print_block();
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <tetris_gravity+0x30>)
     5b4:	4798      	blx	r3
		tetris_new_block();
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <tetris_gravity+0x34>)
     5b8:	4798      	blx	r3
	}
}
     5ba:	bd10      	pop	{r4, pc}
     5bc:	200000f8 	.word	0x200000f8
     5c0:	000002f9 	.word	0x000002f9
     5c4:	00000421 	.word	0x00000421
     5c8:	000003b9 	.word	0x000003b9

000005cc <tetris_fall>:


void tetris_fall(int l) 
{
     5cc:	b510      	push	{r4, lr}
	for (int8_t y = l; y > 0; y--) 
     5ce:	b2c0      	uxtb	r0, r0
     5d0:	b243      	sxtb	r3, r0
     5d2:	2b00      	cmp	r3, #0
     5d4:	dc0a      	bgt.n	5ec <tetris_fall+0x20>
     5d6:	e015      	b.n	604 <tetris_fall+0x38>
	{
		for (uint8_t x = 0; x < TETRIS_W; x++)
			t.game[x][y] = t.game[x][y - 1];
     5d8:	781a      	ldrb	r2, [r3, #0]
     5da:	705a      	strb	r2, [r3, #1]
     5dc:	3314      	adds	r3, #20

void tetris_fall(int l) 
{
	for (int8_t y = l; y > 0; y--) 
	{
		for (uint8_t x = 0; x < TETRIS_W; x++)
     5de:	428b      	cmp	r3, r1
     5e0:	d1fa      	bne.n	5d8 <tetris_fall+0xc>
     5e2:	3801      	subs	r0, #1
     5e4:	b2c0      	uxtb	r0, r0
}


void tetris_fall(int l) 
{
	for (int8_t y = l; y > 0; y--) 
     5e6:	2800      	cmp	r0, #0
     5e8:	d101      	bne.n	5ee <tetris_fall+0x22>
     5ea:	e00b      	b.n	604 <tetris_fall+0x38>
     5ec:	4c08      	ldr	r4, [pc, #32]	; (610 <tetris_fall+0x44>)
     5ee:	b241      	sxtb	r1, r0
     5f0:	1e4b      	subs	r3, r1, #1
     5f2:	18e3      	adds	r3, r4, r3
     5f4:	31ef      	adds	r1, #239	; 0xef
     5f6:	1861      	adds	r1, r4, r1
     5f8:	e7ee      	b.n	5d8 <tetris_fall+0xc>
		for (uint8_t x = 0; x < TETRIS_W; x++)
			t.game[x][y] = t.game[x][y - 1];
	}
	
	for (uint8_t x = 0; x < TETRIS_W; x++)
		t.game[x][0] = ' ';
     5fa:	701a      	strb	r2, [r3, #0]
     5fc:	3314      	adds	r3, #20
	{
		for (uint8_t x = 0; x < TETRIS_W; x++)
			t.game[x][y] = t.game[x][y - 1];
	}
	
	for (uint8_t x = 0; x < TETRIS_W; x++)
     5fe:	428b      	cmp	r3, r1
     600:	d1fb      	bne.n	5fa <tetris_fall+0x2e>
     602:	e004      	b.n	60e <tetris_fall+0x42>
     604:	4b02      	ldr	r3, [pc, #8]	; (610 <tetris_fall+0x44>)
     606:	1c19      	adds	r1, r3, #0
     608:	31f0      	adds	r1, #240	; 0xf0
		t.game[x][0] = ' ';
     60a:	2220      	movs	r2, #32
     60c:	e7f5      	b.n	5fa <tetris_fall+0x2e>
}
     60e:	bd10      	pop	{r4, pc}
     610:	200000f8 	.word	0x200000f8

00000614 <tetris_check_lines>:


void tetris_check_lines(void) 
{
     614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     616:	464f      	mov	r7, r9
     618:	4646      	mov	r6, r8
     61a:	b4c0      	push	{r6, r7}
	bool l;
	uint16_t p = 100;
	for (int8_t y = (TETRIS_H - 1); y >= 0; y--) 
     61c:	2513      	movs	r5, #19


void tetris_check_lines(void) 
{
	bool l;
	uint16_t p = 100;
     61e:	2364      	movs	r3, #100	; 0x64
     620:	4699      	mov	r9, r3
     622:	4e16      	ldr	r6, [pc, #88]	; (67c <tetris_check_lines+0x68>)
			}
		}
		
		if (l) 
		{
			t.score += p;
     624:	46b0      	mov	r8, r6
     626:	e01f      	b.n	668 <tetris_check_lines+0x54>
	for (int8_t y = (TETRIS_H - 1); y >= 0; y--) 
	{
		l = true;
		for (uint8_t x = 0; x < TETRIS_W && l; x++) 
		{
			if (t.game[x][y] == ' ') 
     628:	1c10      	adds	r0, r2, #0
     62a:	780b      	ldrb	r3, [r1, #0]
     62c:	3b20      	subs	r3, #32
     62e:	1e5f      	subs	r7, r3, #1
     630:	41bb      	sbcs	r3, r7
     632:	b2db      	uxtb	r3, r3
	bool l;
	uint16_t p = 100;
	for (int8_t y = (TETRIS_H - 1); y >= 0; y--) 
	{
		l = true;
		for (uint8_t x = 0; x < TETRIS_W && l; x++) 
     634:	42a1      	cmp	r1, r4
     636:	d003      	beq.n	640 <tetris_check_lines+0x2c>
     638:	3114      	adds	r1, #20
     63a:	2b00      	cmp	r3, #0
     63c:	d1f4      	bne.n	628 <tetris_check_lines+0x14>
     63e:	e00f      	b.n	660 <tetris_check_lines+0x4c>
			{
				l = false;
			}
		}
		
		if (l) 
     640:	2b00      	cmp	r3, #0
     642:	d00d      	beq.n	660 <tetris_check_lines+0x4c>
		{
			t.score += p;
     644:	22f2      	movs	r2, #242	; 0xf2
     646:	4643      	mov	r3, r8
     648:	5a9b      	ldrh	r3, [r3, r2]
     64a:	444b      	add	r3, r9
     64c:	4641      	mov	r1, r8
     64e:	528b      	strh	r3, [r1, r2]
			p *= 2;
     650:	464b      	mov	r3, r9
     652:	005f      	lsls	r7, r3, #1
     654:	b2bb      	uxth	r3, r7
     656:	4699      	mov	r9, r3
			tetris_fall(y);
     658:	4b09      	ldr	r3, [pc, #36]	; (680 <tetris_check_lines+0x6c>)
     65a:	4798      	blx	r3
			y++;
     65c:	3501      	adds	r5, #1
     65e:	b2ed      	uxtb	r5, r5

void tetris_check_lines(void) 
{
	bool l;
	uint16_t p = 100;
	for (int8_t y = (TETRIS_H - 1); y >= 0; y--) 
     660:	1e6b      	subs	r3, r5, #1
     662:	b2dd      	uxtb	r5, r3
     664:	061b      	lsls	r3, r3, #24
     666:	d405      	bmi.n	674 <tetris_check_lines+0x60>
     668:	b26b      	sxtb	r3, r5
     66a:	18f1      	adds	r1, r6, r3
     66c:	33dc      	adds	r3, #220	; 0xdc
     66e:	18f4      	adds	r4, r6, r3
	{
		l = true;
		for (uint8_t x = 0; x < TETRIS_W && l; x++) 
		{
			if (t.game[x][y] == ' ') 
     670:	b26a      	sxtb	r2, r5
     672:	e7d9      	b.n	628 <tetris_check_lines+0x14>
			p *= 2;
			tetris_fall(y);
			y++;
		}
	}
}
     674:	bc0c      	pop	{r2, r3}
     676:	4690      	mov	r8, r2
     678:	4699      	mov	r9, r3
     67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     67c:	200000f8 	.word	0x200000f8
     680:	000005cd 	.word	0x000005cd

00000684 <tetris_is_game_over>:


bool tetris_is_game_over(void)
{
	return t.gameover;
     684:	23f0      	movs	r3, #240	; 0xf0
     686:	4a01      	ldr	r2, [pc, #4]	; (68c <tetris_is_game_over+0x8>)
     688:	5cd0      	ldrb	r0, [r2, r3]
}
     68a:	4770      	bx	lr
     68c:	200000f8 	.word	0x200000f8

00000690 <tetris_move_right>:


void tetris_move_right(void)
{
     690:	b510      	push	{r4, lr}
	t.x++;
     692:	4a07      	ldr	r2, [pc, #28]	; (6b0 <tetris_move_right+0x20>)
     694:	2383      	movs	r3, #131	; 0x83
     696:	005b      	lsls	r3, r3, #1
     698:	5cd4      	ldrb	r4, [r2, r3]
     69a:	1c61      	adds	r1, r4, #1
     69c:	54d1      	strb	r1, [r2, r3]
	if (tetris_hittest()) 
     69e:	4b05      	ldr	r3, [pc, #20]	; (6b4 <tetris_move_right+0x24>)
     6a0:	4798      	blx	r3
     6a2:	2800      	cmp	r0, #0
     6a4:	d003      	beq.n	6ae <tetris_move_right+0x1e>
	{
		t.x--;
     6a6:	2383      	movs	r3, #131	; 0x83
     6a8:	005b      	lsls	r3, r3, #1
     6aa:	4a01      	ldr	r2, [pc, #4]	; (6b0 <tetris_move_right+0x20>)
     6ac:	54d4      	strb	r4, [r2, r3]
	}
}
     6ae:	bd10      	pop	{r4, pc}
     6b0:	200000f8 	.word	0x200000f8
     6b4:	000002f9 	.word	0x000002f9

000006b8 <tetris_move_left>:

void tetris_move_left(void)
{
     6b8:	b510      	push	{r4, lr}
	t.x--;
     6ba:	4a07      	ldr	r2, [pc, #28]	; (6d8 <tetris_move_left+0x20>)
     6bc:	2383      	movs	r3, #131	; 0x83
     6be:	005b      	lsls	r3, r3, #1
     6c0:	5cd4      	ldrb	r4, [r2, r3]
     6c2:	1e61      	subs	r1, r4, #1
     6c4:	54d1      	strb	r1, [r2, r3]
	if (tetris_hittest()) 
     6c6:	4b05      	ldr	r3, [pc, #20]	; (6dc <tetris_move_left+0x24>)
     6c8:	4798      	blx	r3
     6ca:	2800      	cmp	r0, #0
     6cc:	d003      	beq.n	6d6 <tetris_move_left+0x1e>
	{
		t.x++;
     6ce:	2383      	movs	r3, #131	; 0x83
     6d0:	005b      	lsls	r3, r3, #1
     6d2:	4a01      	ldr	r2, [pc, #4]	; (6d8 <tetris_move_left+0x20>)
     6d4:	54d4      	strb	r4, [r2, r3]
	}
}
     6d6:	bd10      	pop	{r4, pc}
     6d8:	200000f8 	.word	0x200000f8
     6dc:	000002f9 	.word	0x000002f9

000006e0 <uart_putc>:
	return ret;
}


void uart_putc(unsigned char c, FILE *f)
{
     6e0:	b570      	push	{r4, r5, r6, lr}
     6e2:	1c05      	adds	r5, r0, #0
	while (!putchar(c)) { ; }
     6e4:	4c1e      	ldr	r4, [pc, #120]	; (760 <uart_putc+0x80>)
     6e6:	1c26      	adds	r6, r4, #0
     6e8:	6820      	ldr	r0, [r4, #0]
     6ea:	6882      	ldr	r2, [r0, #8]
     6ec:	6893      	ldr	r3, [r2, #8]
     6ee:	3b01      	subs	r3, #1
     6f0:	6093      	str	r3, [r2, #8]
     6f2:	2b00      	cmp	r3, #0
     6f4:	da24      	bge.n	740 <uart_putc+0x60>
     6f6:	6882      	ldr	r2, [r0, #8]
     6f8:	6893      	ldr	r3, [r2, #8]
     6fa:	6991      	ldr	r1, [r2, #24]
     6fc:	428b      	cmp	r3, r1
     6fe:	db17      	blt.n	730 <uart_putc+0x50>
     700:	6813      	ldr	r3, [r2, #0]
     702:	701d      	strb	r5, [r3, #0]
     704:	4b16      	ldr	r3, [pc, #88]	; (760 <uart_putc+0x80>)
     706:	6818      	ldr	r0, [r3, #0]
     708:	6882      	ldr	r2, [r0, #8]
     70a:	6813      	ldr	r3, [r2, #0]
     70c:	7819      	ldrb	r1, [r3, #0]
     70e:	290a      	cmp	r1, #10
     710:	d006      	beq.n	720 <uart_putc+0x40>
     712:	1c59      	adds	r1, r3, #1
     714:	6011      	str	r1, [r2, #0]
     716:	781b      	ldrb	r3, [r3, #0]
     718:	4258      	negs	r0, r3
     71a:	4158      	adcs	r0, r3
     71c:	b2c0      	uxtb	r0, r0
     71e:	e01b      	b.n	758 <uart_putc+0x78>
     720:	210a      	movs	r1, #10
     722:	4b10      	ldr	r3, [pc, #64]	; (764 <uart_putc+0x84>)
     724:	4798      	blx	r3
     726:	1c03      	adds	r3, r0, #0
     728:	4258      	negs	r0, r3
     72a:	4158      	adcs	r0, r3
     72c:	b2c0      	uxtb	r0, r0
     72e:	e013      	b.n	758 <uart_putc+0x78>
     730:	1c29      	adds	r1, r5, #0
     732:	4b0c      	ldr	r3, [pc, #48]	; (764 <uart_putc+0x84>)
     734:	4798      	blx	r3
     736:	1c03      	adds	r3, r0, #0
     738:	4258      	negs	r0, r3
     73a:	4158      	adcs	r0, r3
     73c:	b2c0      	uxtb	r0, r0
     73e:	e00b      	b.n	758 <uart_putc+0x78>
     740:	6883      	ldr	r3, [r0, #8]
     742:	681b      	ldr	r3, [r3, #0]
     744:	701d      	strb	r5, [r3, #0]
     746:	6833      	ldr	r3, [r6, #0]
     748:	689a      	ldr	r2, [r3, #8]
     74a:	6813      	ldr	r3, [r2, #0]
     74c:	1c59      	adds	r1, r3, #1
     74e:	6011      	str	r1, [r2, #0]
     750:	781b      	ldrb	r3, [r3, #0]
     752:	4258      	negs	r0, r3
     754:	4158      	adcs	r0, r3
     756:	b2c0      	uxtb	r0, r0
     758:	2800      	cmp	r0, #0
     75a:	d1c5      	bne.n	6e8 <uart_putc+0x8>
}
     75c:	bd70      	pop	{r4, r5, r6, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	200000d8 	.word	0x200000d8
     764:	000025ad 	.word	0x000025ad

00000768 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     768:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     76a:	2000      	movs	r0, #0
     76c:	4b08      	ldr	r3, [pc, #32]	; (790 <delay_init+0x28>)
     76e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     770:	4c08      	ldr	r4, [pc, #32]	; (794 <delay_init+0x2c>)
     772:	21fa      	movs	r1, #250	; 0xfa
     774:	0089      	lsls	r1, r1, #2
     776:	47a0      	blx	r4
     778:	4b07      	ldr	r3, [pc, #28]	; (798 <delay_init+0x30>)
     77a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     77c:	21fa      	movs	r1, #250	; 0xfa
     77e:	0089      	lsls	r1, r1, #2
     780:	47a0      	blx	r4
     782:	4b06      	ldr	r3, [pc, #24]	; (79c <delay_init+0x34>)
     784:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     786:	2205      	movs	r2, #5
     788:	4b05      	ldr	r3, [pc, #20]	; (7a0 <delay_init+0x38>)
     78a:	601a      	str	r2, [r3, #0]
}
     78c:	bd10      	pop	{r4, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	000015c9 	.word	0x000015c9
     794:	000020c5 	.word	0x000020c5
     798:	20000070 	.word	0x20000070
     79c:	2000006c 	.word	0x2000006c
     7a0:	e000e010 	.word	0xe000e010

000007a4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     7a4:	4b0c      	ldr	r3, [pc, #48]	; (7d8 <cpu_irq_enter_critical+0x34>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	2b00      	cmp	r3, #0
     7aa:	d110      	bne.n	7ce <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7ac:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     7b0:	2b00      	cmp	r3, #0
     7b2:	d109      	bne.n	7c8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     7b4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     7ba:	2200      	movs	r2, #0
     7bc:	4b07      	ldr	r3, [pc, #28]	; (7dc <cpu_irq_enter_critical+0x38>)
     7be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     7c0:	3201      	adds	r2, #1
     7c2:	4b07      	ldr	r3, [pc, #28]	; (7e0 <cpu_irq_enter_critical+0x3c>)
     7c4:	701a      	strb	r2, [r3, #0]
     7c6:	e002      	b.n	7ce <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     7c8:	2200      	movs	r2, #0
     7ca:	4b05      	ldr	r3, [pc, #20]	; (7e0 <cpu_irq_enter_critical+0x3c>)
     7cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     7ce:	4a02      	ldr	r2, [pc, #8]	; (7d8 <cpu_irq_enter_critical+0x34>)
     7d0:	6813      	ldr	r3, [r2, #0]
     7d2:	3301      	adds	r3, #1
     7d4:	6013      	str	r3, [r2, #0]
}
     7d6:	4770      	bx	lr
     7d8:	20000200 	.word	0x20000200
     7dc:	20000074 	.word	0x20000074
     7e0:	20000204 	.word	0x20000204

000007e4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7e4:	4b08      	ldr	r3, [pc, #32]	; (808 <cpu_irq_leave_critical+0x24>)
     7e6:	681a      	ldr	r2, [r3, #0]
     7e8:	3a01      	subs	r2, #1
     7ea:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d109      	bne.n	806 <cpu_irq_leave_critical+0x22>
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <cpu_irq_leave_critical+0x28>)
     7f4:	781b      	ldrb	r3, [r3, #0]
     7f6:	2b00      	cmp	r3, #0
     7f8:	d005      	beq.n	806 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     7fa:	2201      	movs	r2, #1
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <cpu_irq_leave_critical+0x2c>)
     7fe:	701a      	strb	r2, [r3, #0]
     800:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     804:	b662      	cpsie	i
	}
}
     806:	4770      	bx	lr
     808:	20000200 	.word	0x20000200
     80c:	20000204 	.word	0x20000204
     810:	20000074 	.word	0x20000074

00000814 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     814:	b5f0      	push	{r4, r5, r6, r7, lr}
     816:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     818:	ac01      	add	r4, sp, #4
     81a:	2501      	movs	r5, #1
     81c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     81e:	2700      	movs	r7, #0
     820:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     822:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     824:	2009      	movs	r0, #9
     826:	1c21      	adds	r1, r4, #0
     828:	4e06      	ldr	r6, [pc, #24]	; (844 <system_board_init+0x30>)
     82a:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	0092      	lsls	r2, r2, #2
     830:	4b05      	ldr	r3, [pc, #20]	; (848 <system_board_init+0x34>)
     832:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     834:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     836:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     838:	2019      	movs	r0, #25
     83a:	1c21      	adds	r1, r4, #0
     83c:	47b0      	blx	r6
}
     83e:	b003      	add	sp, #12
     840:	bdf0      	pop	{r4, r5, r6, r7, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	00000939 	.word	0x00000939
     848:	41004400 	.word	0x41004400

0000084c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     84c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     84e:	2200      	movs	r2, #0
     850:	4b15      	ldr	r3, [pc, #84]	; (8a8 <EIC_Handler+0x5c>)
     852:	701a      	strb	r2, [r3, #0]
     854:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     856:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     858:	4e14      	ldr	r6, [pc, #80]	; (8ac <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     85a:	4c13      	ldr	r4, [pc, #76]	; (8a8 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     85c:	2b1f      	cmp	r3, #31
     85e:	d919      	bls.n	894 <EIC_Handler+0x48>
     860:	e00f      	b.n	882 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     862:	2100      	movs	r1, #0
     864:	e000      	b.n	868 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     866:	4912      	ldr	r1, [pc, #72]	; (8b0 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     868:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     86a:	009b      	lsls	r3, r3, #2
     86c:	599b      	ldr	r3, [r3, r6]
     86e:	2b00      	cmp	r3, #0
     870:	d000      	beq.n	874 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     872:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     874:	7823      	ldrb	r3, [r4, #0]
     876:	3301      	adds	r3, #1
     878:	b2db      	uxtb	r3, r3
     87a:	7023      	strb	r3, [r4, #0]
     87c:	2b0f      	cmp	r3, #15
     87e:	d9ed      	bls.n	85c <EIC_Handler+0x10>
     880:	e011      	b.n	8a6 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     882:	1c29      	adds	r1, r5, #0
     884:	4019      	ands	r1, r3
     886:	2201      	movs	r2, #1
     888:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     88a:	2100      	movs	r1, #0
     88c:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     88e:	4211      	tst	r1, r2
     890:	d1e7      	bne.n	862 <EIC_Handler+0x16>
     892:	e7ef      	b.n	874 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     894:	1c29      	adds	r1, r5, #0
     896:	4019      	ands	r1, r3
     898:	2201      	movs	r2, #1
     89a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     89c:	4904      	ldr	r1, [pc, #16]	; (8b0 <EIC_Handler+0x64>)
     89e:	6909      	ldr	r1, [r1, #16]
     8a0:	4211      	tst	r1, r2
     8a2:	d1e0      	bne.n	866 <EIC_Handler+0x1a>
     8a4:	e7e6      	b.n	874 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     8a6:	bd70      	pop	{r4, r5, r6, pc}
     8a8:	20000294 	.word	0x20000294
     8ac:	20000298 	.word	0x20000298
     8b0:	40001800 	.word	0x40001800

000008b4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     8b4:	4a04      	ldr	r2, [pc, #16]	; (8c8 <_extint_enable+0x14>)
     8b6:	7811      	ldrb	r1, [r2, #0]
     8b8:	2302      	movs	r3, #2
     8ba:	430b      	orrs	r3, r1
     8bc:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     8be:	7853      	ldrb	r3, [r2, #1]
     8c0:	b25b      	sxtb	r3, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	dbfb      	blt.n	8be <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     8c6:	4770      	bx	lr
     8c8:	40001800 	.word	0x40001800

000008cc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     8cc:	b500      	push	{lr}
     8ce:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     8d0:	4a12      	ldr	r2, [pc, #72]	; (91c <_system_extint_init+0x50>)
     8d2:	6991      	ldr	r1, [r2, #24]
     8d4:	2340      	movs	r3, #64	; 0x40
     8d6:	430b      	orrs	r3, r1
     8d8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     8da:	a901      	add	r1, sp, #4
     8dc:	2300      	movs	r3, #0
     8de:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     8e0:	2005      	movs	r0, #5
     8e2:	4b0f      	ldr	r3, [pc, #60]	; (920 <_system_extint_init+0x54>)
     8e4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     8e6:	2005      	movs	r0, #5
     8e8:	4b0e      	ldr	r3, [pc, #56]	; (924 <_system_extint_init+0x58>)
     8ea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     8ec:	4a0e      	ldr	r2, [pc, #56]	; (928 <_system_extint_init+0x5c>)
     8ee:	7811      	ldrb	r1, [r2, #0]
     8f0:	2301      	movs	r3, #1
     8f2:	430b      	orrs	r3, r1
     8f4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     8f6:	7853      	ldrb	r3, [r2, #1]
     8f8:	b25b      	sxtb	r3, r3
     8fa:	2b00      	cmp	r3, #0
     8fc:	dbfb      	blt.n	8f6 <_system_extint_init+0x2a>
     8fe:	4b0b      	ldr	r3, [pc, #44]	; (92c <_system_extint_init+0x60>)
     900:	1c19      	adds	r1, r3, #0
     902:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     904:	2200      	movs	r2, #0
     906:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     908:	428b      	cmp	r3, r1
     90a:	d1fc      	bne.n	906 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     90c:	2210      	movs	r2, #16
     90e:	4b08      	ldr	r3, [pc, #32]	; (930 <_system_extint_init+0x64>)
     910:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     912:	4b08      	ldr	r3, [pc, #32]	; (934 <_system_extint_init+0x68>)
     914:	4798      	blx	r3
}
     916:	b003      	add	sp, #12
     918:	bd00      	pop	{pc}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	40000400 	.word	0x40000400
     920:	000016e1 	.word	0x000016e1
     924:	00001655 	.word	0x00001655
     928:	40001800 	.word	0x40001800
     92c:	20000298 	.word	0x20000298
     930:	e000e100 	.word	0xe000e100
     934:	000008b5 	.word	0x000008b5

00000938 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     938:	b500      	push	{lr}
     93a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     93c:	ab01      	add	r3, sp, #4
     93e:	2280      	movs	r2, #128	; 0x80
     940:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     942:	780a      	ldrb	r2, [r1, #0]
     944:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     946:	784a      	ldrb	r2, [r1, #1]
     948:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     94a:	788a      	ldrb	r2, [r1, #2]
     94c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     94e:	1c19      	adds	r1, r3, #0
     950:	4b01      	ldr	r3, [pc, #4]	; (958 <port_pin_set_config+0x20>)
     952:	4798      	blx	r3
}
     954:	b003      	add	sp, #12
     956:	bd00      	pop	{pc}
     958:	000017d9 	.word	0x000017d9

0000095c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     95c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     95e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     960:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     962:	4281      	cmp	r1, r0
     964:	d30c      	bcc.n	980 <_sercom_get_sync_baud_val+0x24>
     966:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     968:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     96a:	3301      	adds	r3, #1
     96c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     96e:	4288      	cmp	r0, r1
     970:	d9fa      	bls.n	968 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     972:	3b01      	subs	r3, #1
     974:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     976:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     978:	2bff      	cmp	r3, #255	; 0xff
     97a:	d801      	bhi.n	980 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     97c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     97e:	2400      	movs	r4, #0
	}
}
     980:	1c20      	adds	r0, r4, #0
     982:	bd10      	pop	{r4, pc}

00000984 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     984:	b5f0      	push	{r4, r5, r6, r7, lr}
     986:	465f      	mov	r7, fp
     988:	4656      	mov	r6, sl
     98a:	464d      	mov	r5, r9
     98c:	4644      	mov	r4, r8
     98e:	b4f0      	push	{r4, r5, r6, r7}
     990:	b089      	sub	sp, #36	; 0x24
     992:	1c1c      	adds	r4, r3, #0
     994:	ab12      	add	r3, sp, #72	; 0x48
     996:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     998:	1c06      	adds	r6, r0, #0
     99a:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     99c:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     99e:	428e      	cmp	r6, r1
     9a0:	d900      	bls.n	9a4 <_sercom_get_async_baud_val+0x20>
     9a2:	e0c7      	b.n	b34 <_sercom_get_async_baud_val+0x1b0>
     9a4:	1c25      	adds	r5, r4, #0
     9a6:	9207      	str	r2, [sp, #28]
     9a8:	1c0c      	adds	r4, r1, #0
     9aa:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     9ac:	2d00      	cmp	r5, #0
     9ae:	d151      	bne.n	a54 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     9b0:	1c18      	adds	r0, r3, #0
     9b2:	2100      	movs	r1, #0
     9b4:	2300      	movs	r3, #0
     9b6:	4d63      	ldr	r5, [pc, #396]	; (b44 <_sercom_get_async_baud_val+0x1c0>)
     9b8:	47a8      	blx	r5
     9ba:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     9bc:	1c26      	adds	r6, r4, #0
     9be:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     9c0:	2300      	movs	r3, #0
     9c2:	2400      	movs	r4, #0
     9c4:	9302      	str	r3, [sp, #8]
     9c6:	9403      	str	r4, [sp, #12]
     9c8:	2200      	movs	r2, #0
     9ca:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     9cc:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     9ce:	2120      	movs	r1, #32
     9d0:	468c      	mov	ip, r1
     9d2:	391f      	subs	r1, #31
     9d4:	9600      	str	r6, [sp, #0]
     9d6:	9701      	str	r7, [sp, #4]
     9d8:	2420      	movs	r4, #32
     9da:	4264      	negs	r4, r4
     9dc:	1904      	adds	r4, r0, r4
     9de:	d403      	bmi.n	9e8 <_sercom_get_async_baud_val+0x64>
     9e0:	1c0d      	adds	r5, r1, #0
     9e2:	40a5      	lsls	r5, r4
     9e4:	46a8      	mov	r8, r5
     9e6:	e004      	b.n	9f2 <_sercom_get_async_baud_val+0x6e>
     9e8:	4664      	mov	r4, ip
     9ea:	1a24      	subs	r4, r4, r0
     9ec:	1c0d      	adds	r5, r1, #0
     9ee:	40e5      	lsrs	r5, r4
     9f0:	46a8      	mov	r8, r5
     9f2:	1c0c      	adds	r4, r1, #0
     9f4:	4084      	lsls	r4, r0
     9f6:	46a1      	mov	r9, r4

		r = r << 1;
     9f8:	1c14      	adds	r4, r2, #0
     9fa:	1c1d      	adds	r5, r3, #0
     9fc:	18a4      	adds	r4, r4, r2
     9fe:	415d      	adcs	r5, r3
     a00:	1c22      	adds	r2, r4, #0
     a02:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     a04:	465e      	mov	r6, fp
     a06:	4647      	mov	r7, r8
     a08:	423e      	tst	r6, r7
     a0a:	d003      	beq.n	a14 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     a0c:	1c0e      	adds	r6, r1, #0
     a0e:	4326      	orrs	r6, r4
     a10:	1c32      	adds	r2, r6, #0
     a12:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     a14:	9c01      	ldr	r4, [sp, #4]
     a16:	429c      	cmp	r4, r3
     a18:	d810      	bhi.n	a3c <_sercom_get_async_baud_val+0xb8>
     a1a:	d102      	bne.n	a22 <_sercom_get_async_baud_val+0x9e>
     a1c:	9c00      	ldr	r4, [sp, #0]
     a1e:	4294      	cmp	r4, r2
     a20:	d80c      	bhi.n	a3c <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     a22:	9c00      	ldr	r4, [sp, #0]
     a24:	9d01      	ldr	r5, [sp, #4]
     a26:	1b12      	subs	r2, r2, r4
     a28:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a2a:	464d      	mov	r5, r9
     a2c:	9e02      	ldr	r6, [sp, #8]
     a2e:	9f03      	ldr	r7, [sp, #12]
     a30:	4335      	orrs	r5, r6
     a32:	1c3c      	adds	r4, r7, #0
     a34:	4646      	mov	r6, r8
     a36:	4334      	orrs	r4, r6
     a38:	9502      	str	r5, [sp, #8]
     a3a:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     a3c:	3801      	subs	r0, #1
     a3e:	d2cb      	bcs.n	9d8 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     a40:	2200      	movs	r2, #0
     a42:	2301      	movs	r3, #1
     a44:	9802      	ldr	r0, [sp, #8]
     a46:	9903      	ldr	r1, [sp, #12]
     a48:	1a12      	subs	r2, r2, r0
     a4a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     a4c:	0c11      	lsrs	r1, r2, #16
     a4e:	041b      	lsls	r3, r3, #16
     a50:	4319      	orrs	r1, r3
     a52:	e06c      	b.n	b2e <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     a54:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a56:	2d01      	cmp	r5, #1
     a58:	d169      	bne.n	b2e <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     a5a:	0f61      	lsrs	r1, r4, #29
     a5c:	1c0f      	adds	r7, r1, #0
     a5e:	00e1      	lsls	r1, r4, #3
     a60:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     a62:	1c18      	adds	r0, r3, #0
     a64:	2100      	movs	r1, #0
     a66:	2300      	movs	r3, #0
     a68:	4c36      	ldr	r4, [pc, #216]	; (b44 <_sercom_get_async_baud_val+0x1c0>)
     a6a:	47a0      	blx	r4
     a6c:	1c04      	adds	r4, r0, #0
     a6e:	1c0d      	adds	r5, r1, #0
     a70:	2300      	movs	r3, #0
     a72:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     a74:	3320      	adds	r3, #32
     a76:	469b      	mov	fp, r3
     a78:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     a7a:	4663      	mov	r3, ip
     a7c:	9305      	str	r3, [sp, #20]
     a7e:	46b9      	mov	r9, r7
     a80:	466b      	mov	r3, sp
     a82:	7d1b      	ldrb	r3, [r3, #20]
     a84:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a86:	2300      	movs	r3, #0
     a88:	469c      	mov	ip, r3
     a8a:	2000      	movs	r0, #0
     a8c:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     a8e:	223f      	movs	r2, #63	; 0x3f
     a90:	9400      	str	r4, [sp, #0]
     a92:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     a94:	2320      	movs	r3, #32
     a96:	425b      	negs	r3, r3
     a98:	18d3      	adds	r3, r2, r3
     a9a:	d403      	bmi.n	aa4 <_sercom_get_async_baud_val+0x120>
     a9c:	1c34      	adds	r4, r6, #0
     a9e:	409c      	lsls	r4, r3
     aa0:	1c23      	adds	r3, r4, #0
     aa2:	e004      	b.n	aae <_sercom_get_async_baud_val+0x12a>
     aa4:	465b      	mov	r3, fp
     aa6:	1a9b      	subs	r3, r3, r2
     aa8:	1c34      	adds	r4, r6, #0
     aaa:	40dc      	lsrs	r4, r3
     aac:	1c23      	adds	r3, r4, #0
     aae:	1c37      	adds	r7, r6, #0
     ab0:	4097      	lsls	r7, r2

		r = r << 1;
     ab2:	1c04      	adds	r4, r0, #0
     ab4:	1c0d      	adds	r5, r1, #0
     ab6:	1824      	adds	r4, r4, r0
     ab8:	414d      	adcs	r5, r1
     aba:	1c20      	adds	r0, r4, #0
     abc:	1c29      	adds	r1, r5, #0
     abe:	9002      	str	r0, [sp, #8]
     ac0:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     ac2:	4644      	mov	r4, r8
     ac4:	403c      	ands	r4, r7
     ac6:	46a2      	mov	sl, r4
     ac8:	464c      	mov	r4, r9
     aca:	4023      	ands	r3, r4
     acc:	4654      	mov	r4, sl
     ace:	4323      	orrs	r3, r4
     ad0:	d005      	beq.n	ade <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     ad2:	9b02      	ldr	r3, [sp, #8]
     ad4:	9c03      	ldr	r4, [sp, #12]
     ad6:	1c1d      	adds	r5, r3, #0
     ad8:	4335      	orrs	r5, r6
     ada:	1c28      	adds	r0, r5, #0
     adc:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     ade:	9b01      	ldr	r3, [sp, #4]
     ae0:	428b      	cmp	r3, r1
     ae2:	d80a      	bhi.n	afa <_sercom_get_async_baud_val+0x176>
     ae4:	d102      	bne.n	aec <_sercom_get_async_baud_val+0x168>
     ae6:	9b00      	ldr	r3, [sp, #0]
     ae8:	4283      	cmp	r3, r0
     aea:	d806      	bhi.n	afa <_sercom_get_async_baud_val+0x176>
			r = r - d;
     aec:	9b00      	ldr	r3, [sp, #0]
     aee:	9c01      	ldr	r4, [sp, #4]
     af0:	1ac0      	subs	r0, r0, r3
     af2:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     af4:	4663      	mov	r3, ip
     af6:	433b      	orrs	r3, r7
     af8:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     afa:	3a01      	subs	r2, #1
     afc:	d2ca      	bcs.n	a94 <_sercom_get_async_baud_val+0x110>
     afe:	9c00      	ldr	r4, [sp, #0]
     b00:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     b02:	4662      	mov	r2, ip
     b04:	9905      	ldr	r1, [sp, #20]
     b06:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     b08:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     b0a:	4a0f      	ldr	r2, [pc, #60]	; (b48 <_sercom_get_async_baud_val+0x1c4>)
     b0c:	4293      	cmp	r3, r2
     b0e:	d908      	bls.n	b22 <_sercom_get_async_baud_val+0x19e>
     b10:	9a06      	ldr	r2, [sp, #24]
     b12:	3201      	adds	r2, #1
     b14:	b2d2      	uxtb	r2, r2
     b16:	9206      	str	r2, [sp, #24]
     b18:	1c0a      	adds	r2, r1, #0
     b1a:	3201      	adds	r2, #1
     b1c:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     b1e:	2a08      	cmp	r2, #8
     b20:	d1ae      	bne.n	a80 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b22:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     b24:	9a06      	ldr	r2, [sp, #24]
     b26:	2a08      	cmp	r2, #8
     b28:	d004      	beq.n	b34 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     b2a:	0351      	lsls	r1, r2, #13
     b2c:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     b2e:	9b07      	ldr	r3, [sp, #28]
     b30:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     b32:	2500      	movs	r5, #0
}
     b34:	1c28      	adds	r0, r5, #0
     b36:	b009      	add	sp, #36	; 0x24
     b38:	bc3c      	pop	{r2, r3, r4, r5}
     b3a:	4690      	mov	r8, r2
     b3c:	4699      	mov	r9, r3
     b3e:	46a2      	mov	sl, r4
     b40:	46ab      	mov	fp, r5
     b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b44:	000021e9 	.word	0x000021e9
     b48:	00001fff 	.word	0x00001fff

00000b4c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b4c:	b510      	push	{r4, lr}
     b4e:	b082      	sub	sp, #8
     b50:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b52:	4b0e      	ldr	r3, [pc, #56]	; (b8c <sercom_set_gclk_generator+0x40>)
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	2b00      	cmp	r3, #0
     b58:	d001      	beq.n	b5e <sercom_set_gclk_generator+0x12>
     b5a:	2900      	cmp	r1, #0
     b5c:	d00d      	beq.n	b7a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     b5e:	a901      	add	r1, sp, #4
     b60:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b62:	200d      	movs	r0, #13
     b64:	4b0a      	ldr	r3, [pc, #40]	; (b90 <sercom_set_gclk_generator+0x44>)
     b66:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b68:	200d      	movs	r0, #13
     b6a:	4b0a      	ldr	r3, [pc, #40]	; (b94 <sercom_set_gclk_generator+0x48>)
     b6c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <sercom_set_gclk_generator+0x40>)
     b70:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b72:	2201      	movs	r2, #1
     b74:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     b76:	2000      	movs	r0, #0
     b78:	e006      	b.n	b88 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <sercom_set_gclk_generator+0x40>)
     b7c:	785b      	ldrb	r3, [r3, #1]
     b7e:	4283      	cmp	r3, r0
     b80:	d001      	beq.n	b86 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b82:	201d      	movs	r0, #29
     b84:	e000      	b.n	b88 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     b86:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     b88:	b002      	add	sp, #8
     b8a:	bd10      	pop	{r4, pc}
     b8c:	20000208 	.word	0x20000208
     b90:	000016e1 	.word	0x000016e1
     b94:	00001655 	.word	0x00001655

00000b98 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b98:	4b21      	ldr	r3, [pc, #132]	; (c20 <_sercom_get_default_pad+0x88>)
     b9a:	4298      	cmp	r0, r3
     b9c:	d016      	beq.n	bcc <_sercom_get_default_pad+0x34>
     b9e:	4b21      	ldr	r3, [pc, #132]	; (c24 <_sercom_get_default_pad+0x8c>)
     ba0:	4298      	cmp	r0, r3
     ba2:	d024      	beq.n	bee <_sercom_get_default_pad+0x56>
     ba4:	4b20      	ldr	r3, [pc, #128]	; (c28 <_sercom_get_default_pad+0x90>)
     ba6:	4298      	cmp	r0, r3
     ba8:	d132      	bne.n	c10 <_sercom_get_default_pad+0x78>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     baa:	2901      	cmp	r1, #1
     bac:	d006      	beq.n	bbc <_sercom_get_default_pad+0x24>
     bae:	2900      	cmp	r1, #0
     bb0:	d030      	beq.n	c14 <_sercom_get_default_pad+0x7c>
     bb2:	2902      	cmp	r1, #2
     bb4:	d006      	beq.n	bc4 <_sercom_get_default_pad+0x2c>
     bb6:	2903      	cmp	r1, #3
     bb8:	d006      	beq.n	bc8 <_sercom_get_default_pad+0x30>
     bba:	e001      	b.n	bc0 <_sercom_get_default_pad+0x28>
     bbc:	481b      	ldr	r0, [pc, #108]	; (c2c <_sercom_get_default_pad+0x94>)
     bbe:	e02e      	b.n	c1e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     bc0:	2000      	movs	r0, #0
     bc2:	e02c      	b.n	c1e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bc4:	481a      	ldr	r0, [pc, #104]	; (c30 <_sercom_get_default_pad+0x98>)
     bc6:	e02a      	b.n	c1e <_sercom_get_default_pad+0x86>
     bc8:	481a      	ldr	r0, [pc, #104]	; (c34 <_sercom_get_default_pad+0x9c>)
     bca:	e028      	b.n	c1e <_sercom_get_default_pad+0x86>
     bcc:	2901      	cmp	r1, #1
     bce:	d006      	beq.n	bde <_sercom_get_default_pad+0x46>
     bd0:	2900      	cmp	r1, #0
     bd2:	d021      	beq.n	c18 <_sercom_get_default_pad+0x80>
     bd4:	2902      	cmp	r1, #2
     bd6:	d006      	beq.n	be6 <_sercom_get_default_pad+0x4e>
     bd8:	2903      	cmp	r1, #3
     bda:	d006      	beq.n	bea <_sercom_get_default_pad+0x52>
     bdc:	e001      	b.n	be2 <_sercom_get_default_pad+0x4a>
     bde:	4816      	ldr	r0, [pc, #88]	; (c38 <_sercom_get_default_pad+0xa0>)
     be0:	e01d      	b.n	c1e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     be2:	2000      	movs	r0, #0
     be4:	e01b      	b.n	c1e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     be6:	4815      	ldr	r0, [pc, #84]	; (c3c <_sercom_get_default_pad+0xa4>)
     be8:	e019      	b.n	c1e <_sercom_get_default_pad+0x86>
     bea:	4815      	ldr	r0, [pc, #84]	; (c40 <_sercom_get_default_pad+0xa8>)
     bec:	e017      	b.n	c1e <_sercom_get_default_pad+0x86>
     bee:	2901      	cmp	r1, #1
     bf0:	d006      	beq.n	c00 <_sercom_get_default_pad+0x68>
     bf2:	2900      	cmp	r1, #0
     bf4:	d012      	beq.n	c1c <_sercom_get_default_pad+0x84>
     bf6:	2902      	cmp	r1, #2
     bf8:	d006      	beq.n	c08 <_sercom_get_default_pad+0x70>
     bfa:	2903      	cmp	r1, #3
     bfc:	d006      	beq.n	c0c <_sercom_get_default_pad+0x74>
     bfe:	e001      	b.n	c04 <_sercom_get_default_pad+0x6c>
     c00:	4810      	ldr	r0, [pc, #64]	; (c44 <_sercom_get_default_pad+0xac>)
     c02:	e00c      	b.n	c1e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     c04:	2000      	movs	r0, #0
     c06:	e00a      	b.n	c1e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c08:	480f      	ldr	r0, [pc, #60]	; (c48 <_sercom_get_default_pad+0xb0>)
     c0a:	e008      	b.n	c1e <_sercom_get_default_pad+0x86>
     c0c:	480f      	ldr	r0, [pc, #60]	; (c4c <_sercom_get_default_pad+0xb4>)
     c0e:	e006      	b.n	c1e <_sercom_get_default_pad+0x86>
	}

	Assert(false);
	return 0;
     c10:	2000      	movs	r0, #0
     c12:	e004      	b.n	c1e <_sercom_get_default_pad+0x86>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c14:	480e      	ldr	r0, [pc, #56]	; (c50 <_sercom_get_default_pad+0xb8>)
     c16:	e002      	b.n	c1e <_sercom_get_default_pad+0x86>
     c18:	480e      	ldr	r0, [pc, #56]	; (c54 <_sercom_get_default_pad+0xbc>)
     c1a:	e000      	b.n	c1e <_sercom_get_default_pad+0x86>
     c1c:	480e      	ldr	r0, [pc, #56]	; (c58 <_sercom_get_default_pad+0xc0>)
	}

	Assert(false);
	return 0;
}
     c1e:	4770      	bx	lr
     c20:	42000c00 	.word	0x42000c00
     c24:	42001000 	.word	0x42001000
     c28:	42000800 	.word	0x42000800
     c2c:	00050003 	.word	0x00050003
     c30:	00060003 	.word	0x00060003
     c34:	00070003 	.word	0x00070003
     c38:	00170002 	.word	0x00170002
     c3c:	001e0003 	.word	0x001e0003
     c40:	001f0003 	.word	0x001f0003
     c44:	00170003 	.word	0x00170003
     c48:	00100003 	.word	0x00100003
     c4c:	00190003 	.word	0x00190003
     c50:	00040003 	.word	0x00040003
     c54:	00160002 	.word	0x00160002
     c58:	00160003 	.word	0x00160003

00000c5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c5c:	b530      	push	{r4, r5, lr}
     c5e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c60:	aa01      	add	r2, sp, #4
     c62:	4b0b      	ldr	r3, [pc, #44]	; (c90 <_sercom_get_sercom_inst_index+0x34>)
     c64:	cb32      	ldmia	r3!, {r1, r4, r5}
     c66:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c68:	1c03      	adds	r3, r0, #0
     c6a:	9a01      	ldr	r2, [sp, #4]
     c6c:	4282      	cmp	r2, r0
     c6e:	d00a      	beq.n	c86 <_sercom_get_sercom_inst_index+0x2a>
     c70:	9a02      	ldr	r2, [sp, #8]
     c72:	4282      	cmp	r2, r0
     c74:	d005      	beq.n	c82 <_sercom_get_sercom_inst_index+0x26>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     c76:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c78:	9a03      	ldr	r2, [sp, #12]
     c7a:	429a      	cmp	r2, r3
     c7c:	d105      	bne.n	c8a <_sercom_get_sercom_inst_index+0x2e>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c7e:	3002      	adds	r0, #2
     c80:	e002      	b.n	c88 <_sercom_get_sercom_inst_index+0x2c>
     c82:	2001      	movs	r0, #1
     c84:	e000      	b.n	c88 <_sercom_get_sercom_inst_index+0x2c>
     c86:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     c88:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     c8a:	b005      	add	sp, #20
     c8c:	bd30      	pop	{r4, r5, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	000033cc 	.word	0x000033cc

00000c94 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c94:	4770      	bx	lr
     c96:	46c0      	nop			; (mov r8, r8)

00000c98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c98:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c9a:	4b0a      	ldr	r3, [pc, #40]	; (cc4 <_sercom_set_handler+0x2c>)
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d10c      	bne.n	cbc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ca2:	4c09      	ldr	r4, [pc, #36]	; (cc8 <_sercom_set_handler+0x30>)
     ca4:	4d09      	ldr	r5, [pc, #36]	; (ccc <_sercom_set_handler+0x34>)
     ca6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     ca8:	4b09      	ldr	r3, [pc, #36]	; (cd0 <_sercom_set_handler+0x38>)
     caa:	2200      	movs	r2, #0
     cac:	601a      	str	r2, [r3, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cae:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     cb0:	605a      	str	r2, [r3, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cb2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     cb4:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     cb6:	3201      	adds	r2, #1
     cb8:	4b02      	ldr	r3, [pc, #8]	; (cc4 <_sercom_set_handler+0x2c>)
     cba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     cbc:	0080      	lsls	r0, r0, #2
     cbe:	4b02      	ldr	r3, [pc, #8]	; (cc8 <_sercom_set_handler+0x30>)
     cc0:	50c1      	str	r1, [r0, r3]
}
     cc2:	bd30      	pop	{r4, r5, pc}
     cc4:	2000020a 	.word	0x2000020a
     cc8:	2000020c 	.word	0x2000020c
     ccc:	00000c95 	.word	0x00000c95
     cd0:	200002d8 	.word	0x200002d8

00000cd4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     cd4:	b530      	push	{r4, r5, lr}
     cd6:	b083      	sub	sp, #12
     cd8:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     cda:	ac01      	add	r4, sp, #4
     cdc:	1c20      	adds	r0, r4, #0
     cde:	4905      	ldr	r1, [pc, #20]	; (cf4 <_sercom_get_interrupt_vector+0x20>)
     ce0:	2203      	movs	r2, #3
     ce2:	4b05      	ldr	r3, [pc, #20]	; (cf8 <_sercom_get_interrupt_vector+0x24>)
     ce4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ce6:	1c28      	adds	r0, r5, #0
     ce8:	4b04      	ldr	r3, [pc, #16]	; (cfc <_sercom_get_interrupt_vector+0x28>)
     cea:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     cec:	5620      	ldrsb	r0, [r4, r0]
}
     cee:	b003      	add	sp, #12
     cf0:	bd30      	pop	{r4, r5, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	000033d8 	.word	0x000033d8
     cf8:	00002289 	.word	0x00002289
     cfc:	00000c5d 	.word	0x00000c5d

00000d00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d00:	b508      	push	{r3, lr}
     d02:	4b02      	ldr	r3, [pc, #8]	; (d0c <SERCOM0_Handler+0xc>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	2000      	movs	r0, #0
     d08:	4798      	blx	r3
     d0a:	bd08      	pop	{r3, pc}
     d0c:	2000020c 	.word	0x2000020c

00000d10 <SERCOM1_Handler>:
     d10:	b508      	push	{r3, lr}
     d12:	4b02      	ldr	r3, [pc, #8]	; (d1c <SERCOM1_Handler+0xc>)
     d14:	685b      	ldr	r3, [r3, #4]
     d16:	2001      	movs	r0, #1
     d18:	4798      	blx	r3
     d1a:	bd08      	pop	{r3, pc}
     d1c:	2000020c 	.word	0x2000020c

00000d20 <SERCOM2_Handler>:
     d20:	b508      	push	{r3, lr}
     d22:	4b02      	ldr	r3, [pc, #8]	; (d2c <SERCOM2_Handler+0xc>)
     d24:	689b      	ldr	r3, [r3, #8]
     d26:	2002      	movs	r0, #2
     d28:	4798      	blx	r3
     d2a:	bd08      	pop	{r3, pc}
     d2c:	2000020c 	.word	0x2000020c

00000d30 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d30:	b5f0      	push	{r4, r5, r6, r7, lr}
     d32:	465f      	mov	r7, fp
     d34:	4656      	mov	r6, sl
     d36:	464d      	mov	r5, r9
     d38:	4644      	mov	r4, r8
     d3a:	b4f0      	push	{r4, r5, r6, r7}
     d3c:	b091      	sub	sp, #68	; 0x44
     d3e:	1c05      	adds	r5, r0, #0
     d40:	1c0c      	adds	r4, r1, #0
     d42:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d44:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d46:	1c08      	adds	r0, r1, #0
     d48:	4bb9      	ldr	r3, [pc, #740]	; (1030 <usart_init+0x300>)
     d4a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d4c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d4e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d50:	07d2      	lsls	r2, r2, #31
     d52:	d500      	bpl.n	d56 <usart_init+0x26>
     d54:	e163      	b.n	101e <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d56:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     d58:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d5a:	0792      	lsls	r2, r2, #30
     d5c:	d500      	bpl.n	d60 <usart_init+0x30>
     d5e:	e15e      	b.n	101e <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     d60:	49b4      	ldr	r1, [pc, #720]	; (1034 <usart_init+0x304>)
     d62:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d64:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d66:	3b1b      	subs	r3, #27
     d68:	40bb      	lsls	r3, r7
     d6a:	4313      	orrs	r3, r2
     d6c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d6e:	a90f      	add	r1, sp, #60	; 0x3c
     d70:	272d      	movs	r7, #45	; 0x2d
     d72:	5df3      	ldrb	r3, [r6, r7]
     d74:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d76:	300e      	adds	r0, #14

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d78:	b2c3      	uxtb	r3, r0
     d7a:	9302      	str	r3, [sp, #8]
     d7c:	1c18      	adds	r0, r3, #0
     d7e:	4bae      	ldr	r3, [pc, #696]	; (1038 <usart_init+0x308>)
     d80:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d82:	9802      	ldr	r0, [sp, #8]
     d84:	4bad      	ldr	r3, [pc, #692]	; (103c <usart_init+0x30c>)
     d86:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d88:	5df0      	ldrb	r0, [r6, r7]
     d8a:	2100      	movs	r1, #0
     d8c:	4bac      	ldr	r3, [pc, #688]	; (1040 <usart_init+0x310>)
     d8e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     d90:	7af3      	ldrb	r3, [r6, #11]
     d92:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     d94:	2324      	movs	r3, #36	; 0x24
     d96:	5cf3      	ldrb	r3, [r6, r3]
     d98:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d9a:	2325      	movs	r3, #37	; 0x25
     d9c:	5cf3      	ldrb	r3, [r6, r3]
     d9e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     da0:	7ef3      	ldrb	r3, [r6, #27]
     da2:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     da4:	7f33      	ldrb	r3, [r6, #28]
     da6:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     da8:	682b      	ldr	r3, [r5, #0]
     daa:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     dac:	1c18      	adds	r0, r3, #0
     dae:	4ba0      	ldr	r3, [pc, #640]	; (1030 <usart_init+0x300>)
     db0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     db2:	300e      	adds	r0, #14
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     db4:	2200      	movs	r2, #0
     db6:	230e      	movs	r3, #14
     db8:	a906      	add	r1, sp, #24
     dba:	468c      	mov	ip, r1
     dbc:	4463      	add	r3, ip
     dbe:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     dc0:	8a33      	ldrh	r3, [r6, #16]
     dc2:	4699      	mov	r9, r3
     dc4:	2380      	movs	r3, #128	; 0x80
     dc6:	01db      	lsls	r3, r3, #7
     dc8:	4599      	cmp	r9, r3
     dca:	d019      	beq.n	e00 <usart_init+0xd0>
     dcc:	d804      	bhi.n	dd8 <usart_init+0xa8>
     dce:	2380      	movs	r3, #128	; 0x80
     dd0:	019b      	lsls	r3, r3, #6
     dd2:	4599      	cmp	r9, r3
     dd4:	d00a      	beq.n	dec <usart_init+0xbc>
     dd6:	e103      	b.n	fe0 <usart_init+0x2b0>
     dd8:	23c0      	movs	r3, #192	; 0xc0
     dda:	01db      	lsls	r3, r3, #7
     ddc:	4599      	cmp	r9, r3
     dde:	d00a      	beq.n	df6 <usart_init+0xc6>
     de0:	2380      	movs	r3, #128	; 0x80
     de2:	021b      	lsls	r3, r3, #8
     de4:	4599      	cmp	r9, r3
     de6:	d100      	bne.n	dea <usart_init+0xba>
     de8:	e0ff      	b.n	fea <usart_init+0x2ba>
     dea:	e0f9      	b.n	fe0 <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     dec:	2310      	movs	r3, #16
     dee:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     df0:	3b0f      	subs	r3, #15
     df2:	9307      	str	r3, [sp, #28]
     df4:	e0fd      	b.n	ff2 <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     df6:	2308      	movs	r3, #8
     df8:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     dfa:	3b07      	subs	r3, #7
     dfc:	9307      	str	r3, [sp, #28]
     dfe:	e0f8      	b.n	ff2 <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e00:	6833      	ldr	r3, [r6, #0]
     e02:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     e04:	68f3      	ldr	r3, [r6, #12]
     e06:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e08:	6973      	ldr	r3, [r6, #20]
     e0a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e0c:	7e33      	ldrb	r3, [r6, #24]
     e0e:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e10:	2326      	movs	r3, #38	; 0x26
     e12:	5cf3      	ldrb	r3, [r6, r3]
     e14:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     e16:	6872      	ldr	r2, [r6, #4]
     e18:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e1a:	2a00      	cmp	r2, #0
     e1c:	d015      	beq.n	e4a <usart_init+0x11a>
     e1e:	2380      	movs	r3, #128	; 0x80
     e20:	055b      	lsls	r3, r3, #21
     e22:	429a      	cmp	r2, r3
     e24:	d136      	bne.n	e94 <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e26:	2327      	movs	r3, #39	; 0x27
     e28:	5cf3      	ldrb	r3, [r6, r3]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d136      	bne.n	e9c <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e2e:	6a33      	ldr	r3, [r6, #32]
     e30:	4698      	mov	r8, r3
     e32:	b2c0      	uxtb	r0, r0
     e34:	4b83      	ldr	r3, [pc, #524]	; (1044 <usart_init+0x314>)
     e36:	4798      	blx	r3
     e38:	1c01      	adds	r1, r0, #0
     e3a:	4640      	mov	r0, r8
     e3c:	220e      	movs	r2, #14
     e3e:	ab06      	add	r3, sp, #24
     e40:	469c      	mov	ip, r3
     e42:	4462      	add	r2, ip
     e44:	4b80      	ldr	r3, [pc, #512]	; (1048 <usart_init+0x318>)
     e46:	4798      	blx	r3
     e48:	e025      	b.n	e96 <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e4a:	2308      	movs	r3, #8
     e4c:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e4e:	2300      	movs	r3, #0
     e50:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     e52:	2327      	movs	r3, #39	; 0x27
     e54:	5cf3      	ldrb	r3, [r6, r3]
     e56:	2b00      	cmp	r3, #0
     e58:	d00b      	beq.n	e72 <usart_init+0x142>
				status_code =
     e5a:	4643      	mov	r3, r8
     e5c:	9300      	str	r3, [sp, #0]
     e5e:	6a30      	ldr	r0, [r6, #32]
     e60:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e62:	220e      	movs	r2, #14
     e64:	ab06      	add	r3, sp, #24
     e66:	469c      	mov	ip, r3
     e68:	4462      	add	r2, ip
     e6a:	9b07      	ldr	r3, [sp, #28]
     e6c:	4f77      	ldr	r7, [pc, #476]	; (104c <usart_init+0x31c>)
     e6e:	47b8      	blx	r7
     e70:	e011      	b.n	e96 <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     e72:	6a33      	ldr	r3, [r6, #32]
     e74:	1c1f      	adds	r7, r3, #0
     e76:	b2c0      	uxtb	r0, r0
     e78:	4b72      	ldr	r3, [pc, #456]	; (1044 <usart_init+0x314>)
     e7a:	4798      	blx	r3
     e7c:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     e7e:	4643      	mov	r3, r8
     e80:	9300      	str	r3, [sp, #0]
     e82:	1c38      	adds	r0, r7, #0
     e84:	220e      	movs	r2, #14
     e86:	ab06      	add	r3, sp, #24
     e88:	469c      	mov	ip, r3
     e8a:	4462      	add	r2, ip
     e8c:	9b07      	ldr	r3, [sp, #28]
     e8e:	4f6f      	ldr	r7, [pc, #444]	; (104c <usart_init+0x31c>)
     e90:	47b8      	blx	r7
     e92:	e000      	b.n	e96 <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     e94:	2000      	movs	r0, #0
     e96:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     e98:	d000      	beq.n	e9c <usart_init+0x16c>
     e9a:	e0c0      	b.n	101e <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     e9c:	7e73      	ldrb	r3, [r6, #25]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d002      	beq.n	ea8 <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ea2:	7eb3      	ldrb	r3, [r6, #26]
     ea4:	4652      	mov	r2, sl
     ea6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ea8:	682a      	ldr	r2, [r5, #0]
     eaa:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     eac:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     eae:	2b00      	cmp	r3, #0
     eb0:	d1fc      	bne.n	eac <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eb2:	330e      	adds	r3, #14
     eb4:	aa06      	add	r2, sp, #24
     eb6:	4694      	mov	ip, r2
     eb8:	4463      	add	r3, ip
     eba:	881b      	ldrh	r3, [r3, #0]
     ebc:	4652      	mov	r2, sl
     ebe:	8193      	strh	r3, [r2, #12]
     ec0:	9b02      	ldr	r3, [sp, #8]
     ec2:	465a      	mov	r2, fp
     ec4:	4313      	orrs	r3, r2
     ec6:	9a03      	ldr	r2, [sp, #12]
     ec8:	4313      	orrs	r3, r2
     eca:	433b      	orrs	r3, r7
     ecc:	464a      	mov	r2, r9
     ece:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ed0:	9a04      	ldr	r2, [sp, #16]
     ed2:	0212      	lsls	r2, r2, #8
     ed4:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ed6:	9a05      	ldr	r2, [sp, #20]
     ed8:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     eda:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     edc:	2327      	movs	r3, #39	; 0x27
     ede:	5cf3      	ldrb	r3, [r6, r3]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d101      	bne.n	ee8 <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ee4:	3304      	adds	r3, #4
     ee6:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ee8:	7f33      	ldrb	r3, [r6, #28]
     eea:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     eec:	7e72      	ldrb	r2, [r6, #25]
     eee:	0293      	lsls	r3, r2, #10
     ef0:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ef2:	7f72      	ldrb	r2, [r6, #29]
     ef4:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ef6:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ef8:	2224      	movs	r2, #36	; 0x24
     efa:	5cb2      	ldrb	r2, [r6, r2]
     efc:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     efe:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f00:	2225      	movs	r2, #37	; 0x25
     f02:	5cb2      	ldrb	r2, [r6, r2]
     f04:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f06:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     f08:	7af1      	ldrb	r1, [r6, #11]
     f0a:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f0c:	8933      	ldrh	r3, [r6, #8]
     f0e:	2bff      	cmp	r3, #255	; 0xff
     f10:	d004      	beq.n	f1c <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f12:	2280      	movs	r2, #128	; 0x80
     f14:	0452      	lsls	r2, r2, #17
     f16:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     f18:	4319      	orrs	r1, r3
     f1a:	e005      	b.n	f28 <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f1c:	7ef3      	ldrb	r3, [r6, #27]
     f1e:	2b00      	cmp	r3, #0
     f20:	d002      	beq.n	f28 <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f22:	2380      	movs	r3, #128	; 0x80
     f24:	04db      	lsls	r3, r3, #19
     f26:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f28:	232c      	movs	r3, #44	; 0x2c
     f2a:	5cf3      	ldrb	r3, [r6, r3]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d103      	bne.n	f38 <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f30:	4b47      	ldr	r3, [pc, #284]	; (1050 <usart_init+0x320>)
     f32:	789b      	ldrb	r3, [r3, #2]
     f34:	079b      	lsls	r3, r3, #30
     f36:	d501      	bpl.n	f3c <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f3c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f3e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f40:	2b00      	cmp	r3, #0
     f42:	d1fc      	bne.n	f3e <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f44:	4653      	mov	r3, sl
     f46:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f48:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f4a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f4c:	2b00      	cmp	r3, #0
     f4e:	d1fc      	bne.n	f4a <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f50:	4653      	mov	r3, sl
     f52:	601f      	str	r7, [r3, #0]
     f54:	ab0e      	add	r3, sp, #56	; 0x38
     f56:	2280      	movs	r2, #128	; 0x80
     f58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f5a:	2200      	movs	r2, #0
     f5c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f5e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f60:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     f62:	6b33      	ldr	r3, [r6, #48]	; 0x30
     f64:	930a      	str	r3, [sp, #40]	; 0x28
     f66:	6b73      	ldr	r3, [r6, #52]	; 0x34
     f68:	930b      	str	r3, [sp, #44]	; 0x2c
     f6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     f6c:	930c      	str	r3, [sp, #48]	; 0x30
     f6e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     f70:	9302      	str	r3, [sp, #8]
     f72:	930d      	str	r3, [sp, #52]	; 0x34
     f74:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f76:	ae0e      	add	r6, sp, #56	; 0x38
     f78:	b2f9      	uxtb	r1, r7
     f7a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f7c:	aa0a      	add	r2, sp, #40	; 0x28
     f7e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     f80:	2800      	cmp	r0, #0
     f82:	d102      	bne.n	f8a <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f84:	1c20      	adds	r0, r4, #0
     f86:	4b33      	ldr	r3, [pc, #204]	; (1054 <usart_init+0x324>)
     f88:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f8a:	1c43      	adds	r3, r0, #1
     f8c:	d005      	beq.n	f9a <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f8e:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f90:	0c00      	lsrs	r0, r0, #16
     f92:	b2c0      	uxtb	r0, r0
     f94:	1c31      	adds	r1, r6, #0
     f96:	4b30      	ldr	r3, [pc, #192]	; (1058 <usart_init+0x328>)
     f98:	4798      	blx	r3
     f9a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f9c:	2f04      	cmp	r7, #4
     f9e:	d1eb      	bne.n	f78 <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     fa0:	2300      	movs	r3, #0
     fa2:	60eb      	str	r3, [r5, #12]
     fa4:	612b      	str	r3, [r5, #16]
     fa6:	616b      	str	r3, [r5, #20]
     fa8:	61ab      	str	r3, [r5, #24]
     faa:	61eb      	str	r3, [r5, #28]
     fac:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     fae:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fb0:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fb2:	2200      	movs	r2, #0
     fb4:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fb6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fb8:	3330      	adds	r3, #48	; 0x30
     fba:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fbc:	3301      	adds	r3, #1
     fbe:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fc0:	3301      	adds	r3, #1
     fc2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fc4:	3301      	adds	r3, #1
     fc6:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fc8:	6828      	ldr	r0, [r5, #0]
     fca:	4b19      	ldr	r3, [pc, #100]	; (1030 <usart_init+0x300>)
     fcc:	4798      	blx	r3
     fce:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fd0:	4922      	ldr	r1, [pc, #136]	; (105c <usart_init+0x32c>)
     fd2:	4b23      	ldr	r3, [pc, #140]	; (1060 <usart_init+0x330>)
     fd4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fd6:	00a4      	lsls	r4, r4, #2
     fd8:	4b22      	ldr	r3, [pc, #136]	; (1064 <usart_init+0x334>)
     fda:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     fdc:	2300      	movs	r3, #0
     fde:	e01e      	b.n	101e <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fe0:	2310      	movs	r3, #16
     fe2:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fe4:	2300      	movs	r3, #0
     fe6:	9307      	str	r3, [sp, #28]
     fe8:	e003      	b.n	ff2 <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     fea:	2303      	movs	r3, #3
     fec:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fee:	2300      	movs	r3, #0
     ff0:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff2:	6833      	ldr	r3, [r6, #0]
     ff4:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     ff6:	68f3      	ldr	r3, [r6, #12]
     ff8:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ffa:	6973      	ldr	r3, [r6, #20]
     ffc:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ffe:	7e33      	ldrb	r3, [r6, #24]
    1000:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1002:	2326      	movs	r3, #38	; 0x26
    1004:	5cf3      	ldrb	r3, [r6, r3]
    1006:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1008:	6872      	ldr	r2, [r6, #4]
    100a:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    100c:	2a00      	cmp	r2, #0
    100e:	d100      	bne.n	1012 <usart_init+0x2e2>
    1010:	e71f      	b.n	e52 <usart_init+0x122>
    1012:	2380      	movs	r3, #128	; 0x80
    1014:	055b      	lsls	r3, r3, #21
    1016:	429a      	cmp	r2, r3
    1018:	d100      	bne.n	101c <usart_init+0x2ec>
    101a:	e704      	b.n	e26 <usart_init+0xf6>
    101c:	e73e      	b.n	e9c <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    101e:	1c18      	adds	r0, r3, #0
    1020:	b011      	add	sp, #68	; 0x44
    1022:	bc3c      	pop	{r2, r3, r4, r5}
    1024:	4690      	mov	r8, r2
    1026:	4699      	mov	r9, r3
    1028:	46a2      	mov	sl, r4
    102a:	46ab      	mov	fp, r5
    102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	00000c5d 	.word	0x00000c5d
    1034:	40000400 	.word	0x40000400
    1038:	000016e1 	.word	0x000016e1
    103c:	00001655 	.word	0x00001655
    1040:	00000b4d 	.word	0x00000b4d
    1044:	000016fd 	.word	0x000016fd
    1048:	0000095d 	.word	0x0000095d
    104c:	00000985 	.word	0x00000985
    1050:	41002000 	.word	0x41002000
    1054:	00000b99 	.word	0x00000b99
    1058:	000017d9 	.word	0x000017d9
    105c:	00001125 	.word	0x00001125
    1060:	00000c99 	.word	0x00000c99
    1064:	200002d8 	.word	0x200002d8

00001068 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1068:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    106a:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    106c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    106e:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1070:	2c00      	cmp	r4, #0
    1072:	d00d      	beq.n	1090 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1074:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    1076:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    1078:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    107a:	2800      	cmp	r0, #0
    107c:	d108      	bne.n	1090 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    107e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1080:	2a00      	cmp	r2, #0
    1082:	d1fc      	bne.n	107e <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1084:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1086:	2102      	movs	r1, #2
    1088:	7e1a      	ldrb	r2, [r3, #24]
    108a:	420a      	tst	r2, r1
    108c:	d0fc      	beq.n	1088 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    108e:	2200      	movs	r2, #0
}
    1090:	1c10      	adds	r0, r2, #0
    1092:	bd10      	pop	{r4, pc}

00001094 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1094:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1096:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1098:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    109a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    109c:	2a00      	cmp	r2, #0
    109e:	d033      	beq.n	1108 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    10a0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    10a2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    10a4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    10a6:	2a00      	cmp	r2, #0
    10a8:	d12e      	bne.n	1108 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10aa:	7e22      	ldrb	r2, [r4, #24]
    10ac:	0752      	lsls	r2, r2, #29
    10ae:	d52b      	bpl.n	1108 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10b0:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    10b2:	2b00      	cmp	r3, #0
    10b4:	d1fc      	bne.n	10b0 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10b6:	8b63      	ldrh	r3, [r4, #26]
    10b8:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    10ba:	069a      	lsls	r2, r3, #26
    10bc:	d021      	beq.n	1102 <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10be:	079a      	lsls	r2, r3, #30
    10c0:	d503      	bpl.n	10ca <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10c2:	2302      	movs	r3, #2
    10c4:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    10c6:	3318      	adds	r3, #24
    10c8:	e01e      	b.n	1108 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10ca:	075a      	lsls	r2, r3, #29
    10cc:	d503      	bpl.n	10d6 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10ce:	2304      	movs	r3, #4
    10d0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    10d2:	331a      	adds	r3, #26
    10d4:	e018      	b.n	1108 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10d6:	07da      	lsls	r2, r3, #31
    10d8:	d503      	bpl.n	10e2 <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10da:	2301      	movs	r3, #1
    10dc:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    10de:	3312      	adds	r3, #18
    10e0:	e012      	b.n	1108 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10e2:	06da      	lsls	r2, r3, #27
    10e4:	d505      	bpl.n	10f2 <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    10e6:	8b62      	ldrh	r2, [r4, #26]
    10e8:	2310      	movs	r3, #16
    10ea:	4313      	orrs	r3, r2
    10ec:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    10ee:	2342      	movs	r3, #66	; 0x42
    10f0:	e00a      	b.n	1108 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10f2:	069b      	lsls	r3, r3, #26
    10f4:	d505      	bpl.n	1102 <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    10f6:	8b62      	ldrh	r2, [r4, #26]
    10f8:	2320      	movs	r3, #32
    10fa:	4313      	orrs	r3, r2
    10fc:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    10fe:	2341      	movs	r3, #65	; 0x41
    1100:	e002      	b.n	1108 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1102:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1104:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1106:	2300      	movs	r3, #0
}
    1108:	1c18      	adds	r0, r3, #0
    110a:	bd10      	pop	{r4, pc}

0000110c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    110c:	1c93      	adds	r3, r2, #2
    110e:	009b      	lsls	r3, r3, #2
    1110:	18c3      	adds	r3, r0, r3
    1112:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1114:	2301      	movs	r3, #1
    1116:	4093      	lsls	r3, r2
    1118:	1c1a      	adds	r2, r3, #0
    111a:	2130      	movs	r1, #48	; 0x30
    111c:	5c43      	ldrb	r3, [r0, r1]
    111e:	431a      	orrs	r2, r3
    1120:	5442      	strb	r2, [r0, r1]
}
    1122:	4770      	bx	lr

00001124 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1126:	0080      	lsls	r0, r0, #2
    1128:	4b5b      	ldr	r3, [pc, #364]	; (1298 <_usart_interrupt_handler+0x174>)
    112a:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    112c:	6834      	ldr	r4, [r6, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    112e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1130:	2b00      	cmp	r3, #0
    1132:	d1fc      	bne.n	112e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1134:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1136:	7da5      	ldrb	r5, [r4, #22]
    1138:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    113a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    113c:	5cf3      	ldrb	r3, [r6, r3]
    113e:	2230      	movs	r2, #48	; 0x30
    1140:	5cb7      	ldrb	r7, [r6, r2]
    1142:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1144:	07eb      	lsls	r3, r5, #31
    1146:	d522      	bpl.n	118e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1148:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    114a:	b29b      	uxth	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	d01c      	beq.n	118a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1150:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1152:	7813      	ldrb	r3, [r2, #0]
    1154:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1156:	1c51      	adds	r1, r2, #1
    1158:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    115a:	7971      	ldrb	r1, [r6, #5]
    115c:	2901      	cmp	r1, #1
    115e:	d001      	beq.n	1164 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1160:	b29b      	uxth	r3, r3
    1162:	e004      	b.n	116e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1164:	7851      	ldrb	r1, [r2, #1]
    1166:	0209      	lsls	r1, r1, #8
    1168:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    116a:	3202      	adds	r2, #2
    116c:	62b2      	str	r2, [r6, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    116e:	05db      	lsls	r3, r3, #23
    1170:	0ddb      	lsrs	r3, r3, #23
    1172:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1174:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1176:	3b01      	subs	r3, #1
    1178:	b29b      	uxth	r3, r3
    117a:	85f3      	strh	r3, [r6, #46]	; 0x2e
    117c:	2b00      	cmp	r3, #0
    117e:	d106      	bne.n	118e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1180:	3301      	adds	r3, #1
    1182:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1184:	3301      	adds	r3, #1
    1186:	75a3      	strb	r3, [r4, #22]
    1188:	e001      	b.n	118e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    118a:	2301      	movs	r3, #1
    118c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    118e:	07ab      	lsls	r3, r5, #30
    1190:	d509      	bpl.n	11a6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1192:	2302      	movs	r3, #2
    1194:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1196:	2200      	movs	r2, #0
    1198:	3331      	adds	r3, #49	; 0x31
    119a:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    119c:	07fb      	lsls	r3, r7, #31
    119e:	d502      	bpl.n	11a6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    11a0:	1c30      	adds	r0, r6, #0
    11a2:	68f3      	ldr	r3, [r6, #12]
    11a4:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    11a6:	076b      	lsls	r3, r5, #29
    11a8:	d556      	bpl.n	1258 <_usart_interrupt_handler+0x134>

	//	if (module->remaining_rx_buffer_length) 
	//	{
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11aa:	8b63      	ldrh	r3, [r4, #26]
    11ac:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) 
    11ae:	071a      	lsls	r2, r3, #28
    11b0:	d402      	bmi.n	11b8 <_usart_interrupt_handler+0x94>
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

	//	if (module->remaining_rx_buffer_length) 
	//	{
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11b2:	223f      	movs	r2, #63	; 0x3f
    11b4:	4013      	ands	r3, r2
    11b6:	e001      	b.n	11bc <_usart_interrupt_handler+0x98>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) 
			{
				error_code &= ~SERCOM_USART_STATUS_CTS;
    11b8:	2237      	movs	r2, #55	; 0x37
    11ba:	4013      	ands	r3, r2
			{
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code)
    11bc:	2b00      	cmp	r3, #0
    11be:	d037      	beq.n	1230 <_usart_interrupt_handler+0x10c>
			{
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) 
    11c0:	079a      	lsls	r2, r3, #30
    11c2:	d507      	bpl.n	11d4 <_usart_interrupt_handler+0xb0>
				{
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    11c4:	221a      	movs	r2, #26
    11c6:	2332      	movs	r3, #50	; 0x32
    11c8:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    11ca:	8b62      	ldrh	r2, [r4, #26]
    11cc:	3b30      	subs	r3, #48	; 0x30
    11ce:	4313      	orrs	r3, r2
    11d0:	8363      	strh	r3, [r4, #26]
    11d2:	e027      	b.n	1224 <_usart_interrupt_handler+0x100>
				} 
				else if (error_code & SERCOM_USART_STATUS_BUFOVF) 
    11d4:	075a      	lsls	r2, r3, #29
    11d6:	d507      	bpl.n	11e8 <_usart_interrupt_handler+0xc4>
				{
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    11d8:	221e      	movs	r2, #30
    11da:	2332      	movs	r3, #50	; 0x32
    11dc:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    11de:	8b62      	ldrh	r2, [r4, #26]
    11e0:	3b2e      	subs	r3, #46	; 0x2e
    11e2:	4313      	orrs	r3, r2
    11e4:	8363      	strh	r3, [r4, #26]
    11e6:	e01d      	b.n	1224 <_usart_interrupt_handler+0x100>
				} 
				else if (error_code & SERCOM_USART_STATUS_PERR) 
    11e8:	07da      	lsls	r2, r3, #31
    11ea:	d507      	bpl.n	11fc <_usart_interrupt_handler+0xd8>
				{
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    11ec:	2213      	movs	r2, #19
    11ee:	2332      	movs	r3, #50	; 0x32
    11f0:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    11f2:	8b62      	ldrh	r2, [r4, #26]
    11f4:	3b31      	subs	r3, #49	; 0x31
    11f6:	4313      	orrs	r3, r2
    11f8:	8363      	strh	r3, [r4, #26]
    11fa:	e013      	b.n	1224 <_usart_interrupt_handler+0x100>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) 
    11fc:	06da      	lsls	r2, r3, #27
    11fe:	d507      	bpl.n	1210 <_usart_interrupt_handler+0xec>
				{
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1200:	2242      	movs	r2, #66	; 0x42
    1202:	2332      	movs	r3, #50	; 0x32
    1204:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1206:	8b62      	ldrh	r2, [r4, #26]
    1208:	3b22      	subs	r3, #34	; 0x22
    120a:	4313      	orrs	r3, r2
    120c:	8363      	strh	r3, [r4, #26]
    120e:	e009      	b.n	1224 <_usart_interrupt_handler+0x100>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) 
    1210:	2220      	movs	r2, #32
    1212:	421a      	tst	r2, r3
    1214:	d006      	beq.n	1224 <_usart_interrupt_handler+0x100>
				{
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1216:	3221      	adds	r2, #33	; 0x21
    1218:	2332      	movs	r3, #50	; 0x32
    121a:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    121c:	8b62      	ldrh	r2, [r4, #26]
    121e:	3b12      	subs	r3, #18
    1220:	4313      	orrs	r3, r2
    1222:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status	& (1 << USART_CALLBACK_ERROR)) 
    1224:	077b      	lsls	r3, r7, #29
    1226:	d517      	bpl.n	1258 <_usart_interrupt_handler+0x134>
				{
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1228:	1c30      	adds	r0, r6, #0
    122a:	6973      	ldr	r3, [r6, #20]
    122c:	4798      	blx	r3
    122e:	e013      	b.n	1258 <_usart_interrupt_handler+0x134>
			else 
			{

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1230:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1232:	05db      	lsls	r3, r3, #23
    1234:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1236:	b2da      	uxtb	r2, r3
    1238:	6a71      	ldr	r1, [r6, #36]	; 0x24
    123a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
			//	module->rx_buffer_ptr += 1;

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) 
    123c:	7972      	ldrb	r2, [r6, #5]
    123e:	2a01      	cmp	r2, #1
    1240:	d105      	bne.n	124e <_usart_interrupt_handler+0x12a>
				{
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1242:	0a1b      	lsrs	r3, r3, #8
    1244:	6a72      	ldr	r2, [r6, #36]	; 0x24
    1246:	7013      	strb	r3, [r2, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1248:	6a73      	ldr	r3, [r6, #36]	; 0x24
    124a:	3301      	adds	r3, #1
    124c:	6273      	str	r3, [r6, #36]	; 0x24
					// Disable RX Complete Interrupt and set STATUS_OK
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

				*/	// Run callback if registered and enabled 
					if (callback_status	& (1 << USART_CALLBACK_BUFFER_RECEIVED)) 
    124e:	07bb      	lsls	r3, r7, #30
    1250:	d502      	bpl.n	1258 <_usart_interrupt_handler+0x134>
					{
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1252:	1c30      	adds	r0, r6, #0
    1254:	6933      	ldr	r3, [r6, #16]
    1256:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}*/
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1258:	06eb      	lsls	r3, r5, #27
    125a:	d507      	bpl.n	126c <_usart_interrupt_handler+0x148>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    125c:	2310      	movs	r3, #16
    125e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1260:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1262:	06fb      	lsls	r3, r7, #27
    1264:	d502      	bpl.n	126c <_usart_interrupt_handler+0x148>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1266:	1c30      	adds	r0, r6, #0
    1268:	69f3      	ldr	r3, [r6, #28]
    126a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    126c:	06ab      	lsls	r3, r5, #26
    126e:	d507      	bpl.n	1280 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1270:	2320      	movs	r3, #32
    1272:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1274:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1276:	073b      	lsls	r3, r7, #28
    1278:	d502      	bpl.n	1280 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    127a:	1c30      	adds	r0, r6, #0
    127c:	69b3      	ldr	r3, [r6, #24]
    127e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1280:	072b      	lsls	r3, r5, #28
    1282:	d507      	bpl.n	1294 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1284:	2308      	movs	r3, #8
    1286:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1288:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    128a:	06bb      	lsls	r3, r7, #26
    128c:	d502      	bpl.n	1294 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    128e:	6a33      	ldr	r3, [r6, #32]
    1290:	1c30      	adds	r0, r6, #0
    1292:	4798      	blx	r3
		}
	}
#endif
}
    1294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	200002d8 	.word	0x200002d8

0000129c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    129c:	b508      	push	{r3, lr}
	switch (clock_source) {
    129e:	2808      	cmp	r0, #8
    12a0:	d803      	bhi.n	12aa <system_clock_source_get_hz+0xe>
    12a2:	0080      	lsls	r0, r0, #2
    12a4:	4b1b      	ldr	r3, [pc, #108]	; (1314 <system_clock_source_get_hz+0x78>)
    12a6:	581b      	ldr	r3, [r3, r0]
    12a8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    12aa:	2000      	movs	r0, #0
    12ac:	e031      	b.n	1312 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    12ae:	4b1a      	ldr	r3, [pc, #104]	; (1318 <system_clock_source_get_hz+0x7c>)
    12b0:	6918      	ldr	r0, [r3, #16]
    12b2:	e02e      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    12b4:	4b19      	ldr	r3, [pc, #100]	; (131c <system_clock_source_get_hz+0x80>)
    12b6:	6a18      	ldr	r0, [r3, #32]
    12b8:	0580      	lsls	r0, r0, #22
    12ba:	0f80      	lsrs	r0, r0, #30
    12bc:	4b18      	ldr	r3, [pc, #96]	; (1320 <system_clock_source_get_hz+0x84>)
    12be:	40c3      	lsrs	r3, r0
    12c0:	1c18      	adds	r0, r3, #0
    12c2:	e026      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    12c4:	4b14      	ldr	r3, [pc, #80]	; (1318 <system_clock_source_get_hz+0x7c>)
    12c6:	6958      	ldr	r0, [r3, #20]
    12c8:	e023      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12ca:	4b13      	ldr	r3, [pc, #76]	; (1318 <system_clock_source_get_hz+0x7c>)
    12cc:	681b      	ldr	r3, [r3, #0]
    12ce:	2002      	movs	r0, #2
    12d0:	4018      	ands	r0, r3
    12d2:	d01e      	beq.n	1312 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12d4:	4911      	ldr	r1, [pc, #68]	; (131c <system_clock_source_get_hz+0x80>)
    12d6:	2210      	movs	r2, #16
    12d8:	68cb      	ldr	r3, [r1, #12]
    12da:	421a      	tst	r2, r3
    12dc:	d0fc      	beq.n	12d8 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12de:	4b0e      	ldr	r3, [pc, #56]	; (1318 <system_clock_source_get_hz+0x7c>)
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	075b      	lsls	r3, r3, #29
    12e4:	d514      	bpl.n	1310 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12e6:	2000      	movs	r0, #0
    12e8:	4b0e      	ldr	r3, [pc, #56]	; (1324 <system_clock_source_get_hz+0x88>)
    12ea:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <system_clock_source_get_hz+0x7c>)
    12ee:	689b      	ldr	r3, [r3, #8]
    12f0:	041b      	lsls	r3, r3, #16
    12f2:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12f4:	4358      	muls	r0, r3
    12f6:	e00c      	b.n	1312 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12f8:	2350      	movs	r3, #80	; 0x50
    12fa:	4a08      	ldr	r2, [pc, #32]	; (131c <system_clock_source_get_hz+0x80>)
    12fc:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    12fe:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1300:	075b      	lsls	r3, r3, #29
    1302:	d506      	bpl.n	1312 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1304:	4b04      	ldr	r3, [pc, #16]	; (1318 <system_clock_source_get_hz+0x7c>)
    1306:	68d8      	ldr	r0, [r3, #12]
    1308:	e003      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    130a:	2080      	movs	r0, #128	; 0x80
    130c:	0200      	lsls	r0, r0, #8
    130e:	e000      	b.n	1312 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1310:	4805      	ldr	r0, [pc, #20]	; (1328 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1312:	bd08      	pop	{r3, pc}
    1314:	000033dc 	.word	0x000033dc
    1318:	20000218 	.word	0x20000218
    131c:	40000800 	.word	0x40000800
    1320:	007a1200 	.word	0x007a1200
    1324:	000016fd 	.word	0x000016fd
    1328:	02dc6c00 	.word	0x02dc6c00

0000132c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    132c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    132e:	4c0c      	ldr	r4, [pc, #48]	; (1360 <system_clock_source_osc8m_set_config+0x34>)
    1330:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1332:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1334:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1336:	7842      	ldrb	r2, [r0, #1]
    1338:	2001      	movs	r0, #1
    133a:	4002      	ands	r2, r0
    133c:	0192      	lsls	r2, r2, #6
    133e:	2640      	movs	r6, #64	; 0x40
    1340:	43b3      	bics	r3, r6
    1342:	4313      	orrs	r3, r2
    1344:	1c02      	adds	r2, r0, #0
    1346:	402a      	ands	r2, r5
    1348:	01d2      	lsls	r2, r2, #7
    134a:	307f      	adds	r0, #127	; 0x7f
    134c:	4383      	bics	r3, r0
    134e:	4313      	orrs	r3, r2
    1350:	2203      	movs	r2, #3
    1352:	400a      	ands	r2, r1
    1354:	0212      	lsls	r2, r2, #8
    1356:	4903      	ldr	r1, [pc, #12]	; (1364 <system_clock_source_osc8m_set_config+0x38>)
    1358:	400b      	ands	r3, r1
    135a:	4313      	orrs	r3, r2
    135c:	6223      	str	r3, [r4, #32]
}
    135e:	bd70      	pop	{r4, r5, r6, pc}
    1360:	40000800 	.word	0x40000800
    1364:	fffffcff 	.word	0xfffffcff

00001368 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1368:	2808      	cmp	r0, #8
    136a:	d803      	bhi.n	1374 <system_clock_source_enable+0xc>
    136c:	0080      	lsls	r0, r0, #2
    136e:	4b25      	ldr	r3, [pc, #148]	; (1404 <system_clock_source_enable+0x9c>)
    1370:	581b      	ldr	r3, [r3, r0]
    1372:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1374:	2017      	movs	r0, #23
    1376:	e044      	b.n	1402 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1378:	4a23      	ldr	r2, [pc, #140]	; (1408 <system_clock_source_enable+0xa0>)
    137a:	6a11      	ldr	r1, [r2, #32]
    137c:	2302      	movs	r3, #2
    137e:	430b      	orrs	r3, r1
    1380:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1382:	2000      	movs	r0, #0
    1384:	e03d      	b.n	1402 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1386:	4a20      	ldr	r2, [pc, #128]	; (1408 <system_clock_source_enable+0xa0>)
    1388:	6991      	ldr	r1, [r2, #24]
    138a:	2302      	movs	r3, #2
    138c:	430b      	orrs	r3, r1
    138e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1390:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1392:	e036      	b.n	1402 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1394:	4a1c      	ldr	r2, [pc, #112]	; (1408 <system_clock_source_enable+0xa0>)
    1396:	8a11      	ldrh	r1, [r2, #16]
    1398:	2302      	movs	r3, #2
    139a:	430b      	orrs	r3, r1
    139c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    139e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    13a0:	e02f      	b.n	1402 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    13a2:	4a19      	ldr	r2, [pc, #100]	; (1408 <system_clock_source_enable+0xa0>)
    13a4:	8a91      	ldrh	r1, [r2, #20]
    13a6:	2302      	movs	r3, #2
    13a8:	430b      	orrs	r3, r1
    13aa:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13ac:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    13ae:	e028      	b.n	1402 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    13b0:	4916      	ldr	r1, [pc, #88]	; (140c <system_clock_source_enable+0xa4>)
    13b2:	680b      	ldr	r3, [r1, #0]
    13b4:	2202      	movs	r2, #2
    13b6:	4313      	orrs	r3, r2
    13b8:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    13ba:	4b13      	ldr	r3, [pc, #76]	; (1408 <system_clock_source_enable+0xa0>)
    13bc:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13be:	1c19      	adds	r1, r3, #0
    13c0:	320e      	adds	r2, #14
    13c2:	68cb      	ldr	r3, [r1, #12]
    13c4:	421a      	tst	r2, r3
    13c6:	d0fc      	beq.n	13c2 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    13c8:	4a10      	ldr	r2, [pc, #64]	; (140c <system_clock_source_enable+0xa4>)
    13ca:	6891      	ldr	r1, [r2, #8]
    13cc:	4b0e      	ldr	r3, [pc, #56]	; (1408 <system_clock_source_enable+0xa0>)
    13ce:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    13d0:	6852      	ldr	r2, [r2, #4]
    13d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    13d4:	2200      	movs	r2, #0
    13d6:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13d8:	1c19      	adds	r1, r3, #0
    13da:	3210      	adds	r2, #16
    13dc:	68cb      	ldr	r3, [r1, #12]
    13de:	421a      	tst	r2, r3
    13e0:	d0fc      	beq.n	13dc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13e2:	4b0a      	ldr	r3, [pc, #40]	; (140c <system_clock_source_enable+0xa4>)
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	b29b      	uxth	r3, r3
    13e8:	4a07      	ldr	r2, [pc, #28]	; (1408 <system_clock_source_enable+0xa0>)
    13ea:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13ec:	2000      	movs	r0, #0
    13ee:	e008      	b.n	1402 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13f0:	4905      	ldr	r1, [pc, #20]	; (1408 <system_clock_source_enable+0xa0>)
    13f2:	2244      	movs	r2, #68	; 0x44
    13f4:	5c88      	ldrb	r0, [r1, r2]
    13f6:	2302      	movs	r3, #2
    13f8:	4303      	orrs	r3, r0
    13fa:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13fc:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    13fe:	e000      	b.n	1402 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1400:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1402:	4770      	bx	lr
    1404:	00003400 	.word	0x00003400
    1408:	40000800 	.word	0x40000800
    140c:	20000218 	.word	0x20000218

00001410 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1410:	b530      	push	{r4, r5, lr}
    1412:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1414:	22c2      	movs	r2, #194	; 0xc2
    1416:	00d2      	lsls	r2, r2, #3
    1418:	4b1a      	ldr	r3, [pc, #104]	; (1484 <system_clock_init+0x74>)
    141a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    141c:	4a1a      	ldr	r2, [pc, #104]	; (1488 <system_clock_init+0x78>)
    141e:	6853      	ldr	r3, [r2, #4]
    1420:	211e      	movs	r1, #30
    1422:	438b      	bics	r3, r1
    1424:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1426:	2301      	movs	r3, #1
    1428:	466a      	mov	r2, sp
    142a:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    142c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    142e:	4d17      	ldr	r5, [pc, #92]	; (148c <system_clock_init+0x7c>)
    1430:	b2e0      	uxtb	r0, r4
    1432:	4669      	mov	r1, sp
    1434:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1436:	3401      	adds	r4, #1
    1438:	2c18      	cmp	r4, #24
    143a:	d1f9      	bne.n	1430 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    143c:	a803      	add	r0, sp, #12
    143e:	2400      	movs	r4, #0
    1440:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1442:	2501      	movs	r5, #1
    1444:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1446:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1448:	4b11      	ldr	r3, [pc, #68]	; (1490 <system_clock_init+0x80>)
    144a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    144c:	2006      	movs	r0, #6
    144e:	4b11      	ldr	r3, [pc, #68]	; (1494 <system_clock_init+0x84>)
    1450:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1452:	4b11      	ldr	r3, [pc, #68]	; (1498 <system_clock_init+0x88>)
    1454:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1456:	4b11      	ldr	r3, [pc, #68]	; (149c <system_clock_init+0x8c>)
    1458:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    145a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    145c:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    145e:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1460:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1462:	466b      	mov	r3, sp
    1464:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1466:	2306      	movs	r3, #6
    1468:	466a      	mov	r2, sp
    146a:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    146c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    146e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1470:	2000      	movs	r0, #0
    1472:	4669      	mov	r1, sp
    1474:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <system_clock_init+0x90>)
    1476:	4798      	blx	r3
    1478:	2000      	movs	r0, #0
    147a:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <system_clock_init+0x94>)
    147c:	4798      	blx	r3
#endif
}
    147e:	b005      	add	sp, #20
    1480:	bd30      	pop	{r4, r5, pc}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	40000800 	.word	0x40000800
    1488:	41004000 	.word	0x41004000
    148c:	000016e1 	.word	0x000016e1
    1490:	0000132d 	.word	0x0000132d
    1494:	00001369 	.word	0x00001369
    1498:	000014a9 	.word	0x000014a9
    149c:	40000400 	.word	0x40000400
    14a0:	000014cd 	.word	0x000014cd
    14a4:	00001585 	.word	0x00001585

000014a8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    14a8:	4a06      	ldr	r2, [pc, #24]	; (14c4 <system_gclk_init+0x1c>)
    14aa:	6991      	ldr	r1, [r2, #24]
    14ac:	2308      	movs	r3, #8
    14ae:	430b      	orrs	r3, r1
    14b0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    14b2:	2201      	movs	r2, #1
    14b4:	4b04      	ldr	r3, [pc, #16]	; (14c8 <system_gclk_init+0x20>)
    14b6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    14b8:	1c19      	adds	r1, r3, #0
    14ba:	780b      	ldrb	r3, [r1, #0]
    14bc:	4213      	tst	r3, r2
    14be:	d1fc      	bne.n	14ba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    14c0:	4770      	bx	lr
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	40000400 	.word	0x40000400
    14c8:	40000c00 	.word	0x40000c00

000014cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    14cc:	b570      	push	{r4, r5, r6, lr}
    14ce:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    14d0:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14d2:	780d      	ldrb	r5, [r1, #0]
    14d4:	022d      	lsls	r5, r5, #8
    14d6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    14d8:	784b      	ldrb	r3, [r1, #1]
    14da:	2b00      	cmp	r3, #0
    14dc:	d002      	beq.n	14e4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	02db      	lsls	r3, r3, #11
    14e2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    14e4:	7a4b      	ldrb	r3, [r1, #9]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d002      	beq.n	14f0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    14ea:	2380      	movs	r3, #128	; 0x80
    14ec:	031b      	lsls	r3, r3, #12
    14ee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    14f0:	6848      	ldr	r0, [r1, #4]
    14f2:	2801      	cmp	r0, #1
    14f4:	d918      	bls.n	1528 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    14f6:	1e43      	subs	r3, r0, #1
    14f8:	4218      	tst	r0, r3
    14fa:	d110      	bne.n	151e <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    14fc:	2802      	cmp	r0, #2
    14fe:	d906      	bls.n	150e <system_gclk_gen_set_config+0x42>
    1500:	2302      	movs	r3, #2
    1502:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1504:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1506:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1508:	4298      	cmp	r0, r3
    150a:	d8fb      	bhi.n	1504 <system_gclk_gen_set_config+0x38>
    150c:	e000      	b.n	1510 <system_gclk_gen_set_config+0x44>
    150e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1510:	0212      	lsls	r2, r2, #8
    1512:	4332      	orrs	r2, r6
    1514:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1516:	2380      	movs	r3, #128	; 0x80
    1518:	035b      	lsls	r3, r3, #13
    151a:	431d      	orrs	r5, r3
    151c:	e004      	b.n	1528 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    151e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1520:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1522:	2380      	movs	r3, #128	; 0x80
    1524:	029b      	lsls	r3, r3, #10
    1526:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1528:	7a0b      	ldrb	r3, [r1, #8]
    152a:	2b00      	cmp	r3, #0
    152c:	d002      	beq.n	1534 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    152e:	2380      	movs	r3, #128	; 0x80
    1530:	039b      	lsls	r3, r3, #14
    1532:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1534:	4a0f      	ldr	r2, [pc, #60]	; (1574 <system_gclk_gen_set_config+0xa8>)
    1536:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1538:	b25b      	sxtb	r3, r3
    153a:	2b00      	cmp	r3, #0
    153c:	dbfb      	blt.n	1536 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    153e:	4b0e      	ldr	r3, [pc, #56]	; (1578 <system_gclk_gen_set_config+0xac>)
    1540:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1542:	4b0e      	ldr	r3, [pc, #56]	; (157c <system_gclk_gen_set_config+0xb0>)
    1544:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1546:	4a0b      	ldr	r2, [pc, #44]	; (1574 <system_gclk_gen_set_config+0xa8>)
    1548:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    154a:	b25b      	sxtb	r3, r3
    154c:	2b00      	cmp	r3, #0
    154e:	dbfb      	blt.n	1548 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1550:	4b08      	ldr	r3, [pc, #32]	; (1574 <system_gclk_gen_set_config+0xa8>)
    1552:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1554:	1c1a      	adds	r2, r3, #0
    1556:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1558:	b25b      	sxtb	r3, r3
    155a:	2b00      	cmp	r3, #0
    155c:	dbfb      	blt.n	1556 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    155e:	4a05      	ldr	r2, [pc, #20]	; (1574 <system_gclk_gen_set_config+0xa8>)
    1560:	6851      	ldr	r1, [r2, #4]
    1562:	2380      	movs	r3, #128	; 0x80
    1564:	025b      	lsls	r3, r3, #9
    1566:	400b      	ands	r3, r1
    1568:	431d      	orrs	r5, r3
    156a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <system_gclk_gen_set_config+0xb4>)
    156e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1570:	bd70      	pop	{r4, r5, r6, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	40000c00 	.word	0x40000c00
    1578:	000007a5 	.word	0x000007a5
    157c:	40000c08 	.word	0x40000c08
    1580:	000007e5 	.word	0x000007e5

00001584 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1584:	b510      	push	{r4, lr}
    1586:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1588:	4a0b      	ldr	r2, [pc, #44]	; (15b8 <system_gclk_gen_enable+0x34>)
    158a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    158c:	b25b      	sxtb	r3, r3
    158e:	2b00      	cmp	r3, #0
    1590:	dbfb      	blt.n	158a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1592:	4b0a      	ldr	r3, [pc, #40]	; (15bc <system_gclk_gen_enable+0x38>)
    1594:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1596:	4b0a      	ldr	r3, [pc, #40]	; (15c0 <system_gclk_gen_enable+0x3c>)
    1598:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    159a:	4a07      	ldr	r2, [pc, #28]	; (15b8 <system_gclk_gen_enable+0x34>)
    159c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    159e:	b25b      	sxtb	r3, r3
    15a0:	2b00      	cmp	r3, #0
    15a2:	dbfb      	blt.n	159c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    15a4:	4a04      	ldr	r2, [pc, #16]	; (15b8 <system_gclk_gen_enable+0x34>)
    15a6:	6853      	ldr	r3, [r2, #4]
    15a8:	2180      	movs	r1, #128	; 0x80
    15aa:	0249      	lsls	r1, r1, #9
    15ac:	430b      	orrs	r3, r1
    15ae:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15b0:	4b04      	ldr	r3, [pc, #16]	; (15c4 <system_gclk_gen_enable+0x40>)
    15b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15b4:	bd10      	pop	{r4, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	40000c00 	.word	0x40000c00
    15bc:	000007a5 	.word	0x000007a5
    15c0:	40000c04 	.word	0x40000c04
    15c4:	000007e5 	.word	0x000007e5

000015c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15cc:	4a1a      	ldr	r2, [pc, #104]	; (1638 <system_gclk_gen_get_hz+0x70>)
    15ce:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    15d0:	b25b      	sxtb	r3, r3
    15d2:	2b00      	cmp	r3, #0
    15d4:	dbfb      	blt.n	15ce <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15d6:	4b19      	ldr	r3, [pc, #100]	; (163c <system_gclk_gen_get_hz+0x74>)
    15d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15da:	4b19      	ldr	r3, [pc, #100]	; (1640 <system_gclk_gen_get_hz+0x78>)
    15dc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15de:	4a16      	ldr	r2, [pc, #88]	; (1638 <system_gclk_gen_get_hz+0x70>)
    15e0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    15e2:	b25b      	sxtb	r3, r3
    15e4:	2b00      	cmp	r3, #0
    15e6:	dbfb      	blt.n	15e0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    15e8:	4e13      	ldr	r6, [pc, #76]	; (1638 <system_gclk_gen_get_hz+0x70>)
    15ea:	6870      	ldr	r0, [r6, #4]
    15ec:	04c0      	lsls	r0, r0, #19
    15ee:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15f0:	4b14      	ldr	r3, [pc, #80]	; (1644 <system_gclk_gen_get_hz+0x7c>)
    15f2:	4798      	blx	r3
    15f4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15f6:	4b12      	ldr	r3, [pc, #72]	; (1640 <system_gclk_gen_get_hz+0x78>)
    15f8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    15fa:	6876      	ldr	r6, [r6, #4]
    15fc:	02f6      	lsls	r6, r6, #11
    15fe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1600:	4b11      	ldr	r3, [pc, #68]	; (1648 <system_gclk_gen_get_hz+0x80>)
    1602:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1604:	4a0c      	ldr	r2, [pc, #48]	; (1638 <system_gclk_gen_get_hz+0x70>)
    1606:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1608:	b25b      	sxtb	r3, r3
    160a:	2b00      	cmp	r3, #0
    160c:	dbfb      	blt.n	1606 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    160e:	4b0a      	ldr	r3, [pc, #40]	; (1638 <system_gclk_gen_get_hz+0x70>)
    1610:	689c      	ldr	r4, [r3, #8]
    1612:	0a24      	lsrs	r4, r4, #8
    1614:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1616:	4b0d      	ldr	r3, [pc, #52]	; (164c <system_gclk_gen_get_hz+0x84>)
    1618:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    161a:	2e00      	cmp	r6, #0
    161c:	d107      	bne.n	162e <system_gclk_gen_get_hz+0x66>
    161e:	2c01      	cmp	r4, #1
    1620:	d907      	bls.n	1632 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1622:	1c28      	adds	r0, r5, #0
    1624:	1c21      	adds	r1, r4, #0
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <system_gclk_gen_get_hz+0x88>)
    1628:	4798      	blx	r3
    162a:	1c05      	adds	r5, r0, #0
    162c:	e001      	b.n	1632 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    162e:	3401      	adds	r4, #1
    1630:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1632:	1c28      	adds	r0, r5, #0
    1634:	bd70      	pop	{r4, r5, r6, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	40000c00 	.word	0x40000c00
    163c:	000007a5 	.word	0x000007a5
    1640:	40000c04 	.word	0x40000c04
    1644:	0000129d 	.word	0x0000129d
    1648:	40000c08 	.word	0x40000c08
    164c:	000007e5 	.word	0x000007e5
    1650:	000020c5 	.word	0x000020c5

00001654 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1654:	b510      	push	{r4, lr}
    1656:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1658:	4b06      	ldr	r3, [pc, #24]	; (1674 <system_gclk_chan_enable+0x20>)
    165a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    165c:	4b06      	ldr	r3, [pc, #24]	; (1678 <system_gclk_chan_enable+0x24>)
    165e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1660:	4a06      	ldr	r2, [pc, #24]	; (167c <system_gclk_chan_enable+0x28>)
    1662:	8851      	ldrh	r1, [r2, #2]
    1664:	2380      	movs	r3, #128	; 0x80
    1666:	01db      	lsls	r3, r3, #7
    1668:	430b      	orrs	r3, r1
    166a:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    166c:	4b04      	ldr	r3, [pc, #16]	; (1680 <system_gclk_chan_enable+0x2c>)
    166e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1670:	bd10      	pop	{r4, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	000007a5 	.word	0x000007a5
    1678:	40000c02 	.word	0x40000c02
    167c:	40000c00 	.word	0x40000c00
    1680:	000007e5 	.word	0x000007e5

00001684 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1684:	b510      	push	{r4, lr}
    1686:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1688:	4b0f      	ldr	r3, [pc, #60]	; (16c8 <system_gclk_chan_disable+0x44>)
    168a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    168c:	4b0f      	ldr	r3, [pc, #60]	; (16cc <system_gclk_chan_disable+0x48>)
    168e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1690:	4b0f      	ldr	r3, [pc, #60]	; (16d0 <system_gclk_chan_disable+0x4c>)
    1692:	885a      	ldrh	r2, [r3, #2]
    1694:	0512      	lsls	r2, r2, #20
    1696:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1698:	8859      	ldrh	r1, [r3, #2]
    169a:	4a0e      	ldr	r2, [pc, #56]	; (16d4 <system_gclk_chan_disable+0x50>)
    169c:	400a      	ands	r2, r1
    169e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    16a0:	8859      	ldrh	r1, [r3, #2]
    16a2:	4a0d      	ldr	r2, [pc, #52]	; (16d8 <system_gclk_chan_disable+0x54>)
    16a4:	400a      	ands	r2, r1
    16a6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    16a8:	1c19      	adds	r1, r3, #0
    16aa:	2280      	movs	r2, #128	; 0x80
    16ac:	01d2      	lsls	r2, r2, #7
    16ae:	884b      	ldrh	r3, [r1, #2]
    16b0:	4213      	tst	r3, r2
    16b2:	d1fc      	bne.n	16ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    16b4:	4906      	ldr	r1, [pc, #24]	; (16d0 <system_gclk_chan_disable+0x4c>)
    16b6:	0202      	lsls	r2, r0, #8
    16b8:	8848      	ldrh	r0, [r1, #2]
    16ba:	4b06      	ldr	r3, [pc, #24]	; (16d4 <system_gclk_chan_disable+0x50>)
    16bc:	4003      	ands	r3, r0
    16be:	4313      	orrs	r3, r2
    16c0:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16c2:	4b06      	ldr	r3, [pc, #24]	; (16dc <system_gclk_chan_disable+0x58>)
    16c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16c6:	bd10      	pop	{r4, pc}
    16c8:	000007a5 	.word	0x000007a5
    16cc:	40000c02 	.word	0x40000c02
    16d0:	40000c00 	.word	0x40000c00
    16d4:	fffff0ff 	.word	0xfffff0ff
    16d8:	ffffbfff 	.word	0xffffbfff
    16dc:	000007e5 	.word	0x000007e5

000016e0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    16e0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    16e2:	780c      	ldrb	r4, [r1, #0]
    16e4:	0224      	lsls	r4, r4, #8
    16e6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    16e8:	4b02      	ldr	r3, [pc, #8]	; (16f4 <system_gclk_chan_set_config+0x14>)
    16ea:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    16ec:	b2a4      	uxth	r4, r4
    16ee:	4b02      	ldr	r3, [pc, #8]	; (16f8 <system_gclk_chan_set_config+0x18>)
    16f0:	805c      	strh	r4, [r3, #2]
}
    16f2:	bd10      	pop	{r4, pc}
    16f4:	00001685 	.word	0x00001685
    16f8:	40000c00 	.word	0x40000c00

000016fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16fc:	b510      	push	{r4, lr}
    16fe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1700:	4b06      	ldr	r3, [pc, #24]	; (171c <system_gclk_chan_get_hz+0x20>)
    1702:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1704:	4b06      	ldr	r3, [pc, #24]	; (1720 <system_gclk_chan_get_hz+0x24>)
    1706:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1708:	4b06      	ldr	r3, [pc, #24]	; (1724 <system_gclk_chan_get_hz+0x28>)
    170a:	885c      	ldrh	r4, [r3, #2]
    170c:	0524      	lsls	r4, r4, #20
    170e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1710:	4b05      	ldr	r3, [pc, #20]	; (1728 <system_gclk_chan_get_hz+0x2c>)
    1712:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1714:	1c20      	adds	r0, r4, #0
    1716:	4b05      	ldr	r3, [pc, #20]	; (172c <system_gclk_chan_get_hz+0x30>)
    1718:	4798      	blx	r3
}
    171a:	bd10      	pop	{r4, pc}
    171c:	000007a5 	.word	0x000007a5
    1720:	40000c02 	.word	0x40000c02
    1724:	40000c00 	.word	0x40000c00
    1728:	000007e5 	.word	0x000007e5
    172c:	000015c9 	.word	0x000015c9

00001730 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1730:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1732:	78d3      	ldrb	r3, [r2, #3]
    1734:	2b00      	cmp	r3, #0
    1736:	d11e      	bne.n	1776 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1738:	7814      	ldrb	r4, [r2, #0]
    173a:	2c80      	cmp	r4, #128	; 0x80
    173c:	d004      	beq.n	1748 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    173e:	0624      	lsls	r4, r4, #24
    1740:	2380      	movs	r3, #128	; 0x80
    1742:	025b      	lsls	r3, r3, #9
    1744:	431c      	orrs	r4, r3
    1746:	e000      	b.n	174a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1748:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    174a:	7853      	ldrb	r3, [r2, #1]
    174c:	2502      	movs	r5, #2
    174e:	43ab      	bics	r3, r5
    1750:	d10a      	bne.n	1768 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1752:	7893      	ldrb	r3, [r2, #2]
    1754:	2b00      	cmp	r3, #0
    1756:	d103      	bne.n	1760 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1758:	2380      	movs	r3, #128	; 0x80
    175a:	029b      	lsls	r3, r3, #10
    175c:	431c      	orrs	r4, r3
    175e:	e002      	b.n	1766 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1760:	23c0      	movs	r3, #192	; 0xc0
    1762:	02db      	lsls	r3, r3, #11
    1764:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1766:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1768:	7853      	ldrb	r3, [r2, #1]
    176a:	3b01      	subs	r3, #1
    176c:	2b01      	cmp	r3, #1
    176e:	d812      	bhi.n	1796 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1770:	4b18      	ldr	r3, [pc, #96]	; (17d4 <_system_pinmux_config+0xa4>)
    1772:	401c      	ands	r4, r3
    1774:	e00f      	b.n	1796 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1776:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1778:	040b      	lsls	r3, r1, #16
    177a:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    177c:	24a0      	movs	r4, #160	; 0xa0
    177e:	05e4      	lsls	r4, r4, #23
    1780:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1782:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1784:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1786:	24d0      	movs	r4, #208	; 0xd0
    1788:	0624      	lsls	r4, r4, #24
    178a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    178c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    178e:	78d3      	ldrb	r3, [r2, #3]
    1790:	2b00      	cmp	r3, #0
    1792:	d018      	beq.n	17c6 <_system_pinmux_config+0x96>
    1794:	e01c      	b.n	17d0 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1796:	040b      	lsls	r3, r1, #16
    1798:	0c1b      	lsrs	r3, r3, #16
    179a:	25a0      	movs	r5, #160	; 0xa0
    179c:	05ed      	lsls	r5, r5, #23
    179e:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17a0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17a2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17a4:	0c0b      	lsrs	r3, r1, #16
    17a6:	25d0      	movs	r5, #208	; 0xd0
    17a8:	062d      	lsls	r5, r5, #24
    17aa:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17ac:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17ae:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17b0:	78d3      	ldrb	r3, [r2, #3]
    17b2:	2b00      	cmp	r3, #0
    17b4:	d10c      	bne.n	17d0 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    17b6:	0363      	lsls	r3, r4, #13
    17b8:	d505      	bpl.n	17c6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    17ba:	7893      	ldrb	r3, [r2, #2]
    17bc:	2b01      	cmp	r3, #1
    17be:	d101      	bne.n	17c4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    17c0:	6181      	str	r1, [r0, #24]
    17c2:	e000      	b.n	17c6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    17c4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17c6:	7853      	ldrb	r3, [r2, #1]
    17c8:	3b01      	subs	r3, #1
    17ca:	2b01      	cmp	r3, #1
    17cc:	d800      	bhi.n	17d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    17ce:	6081      	str	r1, [r0, #8]
		}
	}
}
    17d0:	bd30      	pop	{r4, r5, pc}
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	fffbffff 	.word	0xfffbffff

000017d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    17d8:	b508      	push	{r3, lr}
    17da:	1c03      	adds	r3, r0, #0
    17dc:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17de:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    17e0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17e2:	2900      	cmp	r1, #0
    17e4:	d104      	bne.n	17f0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    17e6:	0958      	lsrs	r0, r3, #5
    17e8:	01c0      	lsls	r0, r0, #7
    17ea:	4905      	ldr	r1, [pc, #20]	; (1800 <system_pinmux_pin_set_config+0x28>)
    17ec:	468c      	mov	ip, r1
    17ee:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    17f0:	211f      	movs	r1, #31
    17f2:	400b      	ands	r3, r1
    17f4:	391e      	subs	r1, #30
    17f6:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    17f8:	4b02      	ldr	r3, [pc, #8]	; (1804 <system_pinmux_pin_set_config+0x2c>)
    17fa:	4798      	blx	r3
}
    17fc:	bd08      	pop	{r3, pc}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	41004400 	.word	0x41004400
    1804:	00001731 	.word	0x00001731

00001808 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1808:	4770      	bx	lr
    180a:	46c0      	nop			; (mov r8, r8)

0000180c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    180c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    180e:	4b05      	ldr	r3, [pc, #20]	; (1824 <system_init+0x18>)
    1810:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1812:	4b05      	ldr	r3, [pc, #20]	; (1828 <system_init+0x1c>)
    1814:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1816:	4b05      	ldr	r3, [pc, #20]	; (182c <system_init+0x20>)
    1818:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    181a:	4b05      	ldr	r3, [pc, #20]	; (1830 <system_init+0x24>)
    181c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    181e:	4b05      	ldr	r3, [pc, #20]	; (1834 <system_init+0x28>)
    1820:	4798      	blx	r3
}
    1822:	bd08      	pop	{r3, pc}
    1824:	00001411 	.word	0x00001411
    1828:	00000815 	.word	0x00000815
    182c:	00001809 	.word	0x00001809
    1830:	000008cd 	.word	0x000008cd
    1834:	00001809 	.word	0x00001809

00001838 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1838:	1c93      	adds	r3, r2, #2
    183a:	009b      	lsls	r3, r3, #2
    183c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    183e:	2a02      	cmp	r2, #2
    1840:	d104      	bne.n	184c <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1842:	7e02      	ldrb	r2, [r0, #24]
    1844:	2310      	movs	r3, #16
    1846:	4313      	orrs	r3, r2
    1848:	7603      	strb	r3, [r0, #24]
    184a:	e00c      	b.n	1866 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    184c:	2a03      	cmp	r2, #3
    184e:	d104      	bne.n	185a <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1850:	7e02      	ldrb	r2, [r0, #24]
    1852:	2320      	movs	r3, #32
    1854:	4313      	orrs	r3, r2
    1856:	7603      	strb	r3, [r0, #24]
    1858:	e005      	b.n	1866 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    185a:	2301      	movs	r3, #1
    185c:	4093      	lsls	r3, r2
    185e:	1c1a      	adds	r2, r3, #0
    1860:	7e03      	ldrb	r3, [r0, #24]
    1862:	431a      	orrs	r2, r3
    1864:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1866:	2000      	movs	r0, #0
    1868:	4770      	bx	lr
    186a:	46c0      	nop			; (mov r8, r8)

0000186c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    186c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    186e:	0080      	lsls	r0, r0, #2
    1870:	4b14      	ldr	r3, [pc, #80]	; (18c4 <_tc_interrupt_handler+0x58>)
    1872:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1874:	682b      	ldr	r3, [r5, #0]
    1876:	7b9c      	ldrb	r4, [r3, #14]
    1878:	7e2b      	ldrb	r3, [r5, #24]
    187a:	401c      	ands	r4, r3
    187c:	7e6b      	ldrb	r3, [r5, #25]
    187e:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1880:	07e3      	lsls	r3, r4, #31
    1882:	d505      	bpl.n	1890 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1884:	1c28      	adds	r0, r5, #0
    1886:	68ab      	ldr	r3, [r5, #8]
    1888:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    188a:	2301      	movs	r3, #1
    188c:	682a      	ldr	r2, [r5, #0]
    188e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1890:	07a3      	lsls	r3, r4, #30
    1892:	d505      	bpl.n	18a0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1894:	1c28      	adds	r0, r5, #0
    1896:	68eb      	ldr	r3, [r5, #12]
    1898:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    189a:	2302      	movs	r3, #2
    189c:	682a      	ldr	r2, [r5, #0]
    189e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    18a0:	06e3      	lsls	r3, r4, #27
    18a2:	d505      	bpl.n	18b0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    18a4:	1c28      	adds	r0, r5, #0
    18a6:	692b      	ldr	r3, [r5, #16]
    18a8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    18aa:	2310      	movs	r3, #16
    18ac:	682a      	ldr	r2, [r5, #0]
    18ae:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    18b0:	06a3      	lsls	r3, r4, #26
    18b2:	d505      	bpl.n	18c0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18b4:	1c28      	adds	r0, r5, #0
    18b6:	696b      	ldr	r3, [r5, #20]
    18b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18ba:	682b      	ldr	r3, [r5, #0]
    18bc:	2220      	movs	r2, #32
    18be:	739a      	strb	r2, [r3, #14]
	}
}
    18c0:	bd38      	pop	{r3, r4, r5, pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	200002e4 	.word	0x200002e4

000018c8 <TC1_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    18c8:	b508      	push	{r3, lr}
    18ca:	2000      	movs	r0, #0
    18cc:	4b01      	ldr	r3, [pc, #4]	; (18d4 <TC1_Handler+0xc>)
    18ce:	4798      	blx	r3
    18d0:	bd08      	pop	{r3, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	0000186d 	.word	0x0000186d

000018d8 <TC2_Handler>:
    18d8:	b508      	push	{r3, lr}
    18da:	2001      	movs	r0, #1
    18dc:	4b01      	ldr	r3, [pc, #4]	; (18e4 <TC2_Handler+0xc>)
    18de:	4798      	blx	r3
    18e0:	bd08      	pop	{r3, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	0000186d 	.word	0x0000186d

000018e8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    18e8:	b510      	push	{r4, lr}
    18ea:	b082      	sub	sp, #8
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    18ec:	466a      	mov	r2, sp
    18ee:	4b08      	ldr	r3, [pc, #32]	; (1910 <_tc_get_inst_index+0x28>)
    18f0:	cb12      	ldmia	r3!, {r1, r4}
    18f2:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    18f4:	9b00      	ldr	r3, [sp, #0]
    18f6:	4283      	cmp	r3, r0
    18f8:	d005      	beq.n	1906 <_tc_get_inst_index+0x1e>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    18fa:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    18fc:	9a01      	ldr	r2, [sp, #4]
    18fe:	4282      	cmp	r2, r0
    1900:	d103      	bne.n	190a <_tc_get_inst_index+0x22>
    1902:	3301      	adds	r3, #1
    1904:	e000      	b.n	1908 <_tc_get_inst_index+0x20>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1906:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    1908:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    190a:	1c18      	adds	r0, r3, #0
    190c:	b002      	add	sp, #8
    190e:	bd10      	pop	{r4, pc}
    1910:	00003424 	.word	0x00003424

00001914 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1914:	b5f0      	push	{r4, r5, r6, r7, lr}
    1916:	464f      	mov	r7, r9
    1918:	4646      	mov	r6, r8
    191a:	b4c0      	push	{r6, r7}
    191c:	b085      	sub	sp, #20
    191e:	1c04      	adds	r4, r0, #0
    1920:	1c0e      	adds	r6, r1, #0
    1922:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1924:	1c08      	adds	r0, r1, #0
    1926:	4b92      	ldr	r3, [pc, #584]	; (1b70 <tc_init+0x25c>)
    1928:	4798      	blx	r3
    192a:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    192c:	4d91      	ldr	r5, [pc, #580]	; (1b74 <tc_init+0x260>)
    192e:	1c29      	adds	r1, r5, #0
    1930:	3108      	adds	r1, #8
    1932:	a803      	add	r0, sp, #12
    1934:	2202      	movs	r2, #2
    1936:	4f90      	ldr	r7, [pc, #576]	; (1b78 <tc_init+0x264>)
    1938:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    193a:	1c29      	adds	r1, r5, #0
    193c:	310c      	adds	r1, #12
    193e:	a802      	add	r0, sp, #8
    1940:	2204      	movs	r2, #4
    1942:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1944:	2300      	movs	r3, #0
    1946:	60a3      	str	r3, [r4, #8]
    1948:	60e3      	str	r3, [r4, #12]
    194a:	6123      	str	r3, [r4, #16]
    194c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    194e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1950:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1952:	464b      	mov	r3, r9
    1954:	009a      	lsls	r2, r3, #2
    1956:	4b89      	ldr	r3, [pc, #548]	; (1b7c <tc_init+0x268>)
    1958:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    195a:	6026      	str	r6, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    195c:	4643      	mov	r3, r8
    195e:	789b      	ldrb	r3, [r3, #2]
    1960:	2b08      	cmp	r3, #8
    1962:	d104      	bne.n	196e <tc_init+0x5a>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1964:	2017      	movs	r0, #23
#if SAMD09 || SAMD10 || SAMD11
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1966:	464a      	mov	r2, r9
    1968:	07d2      	lsls	r2, r2, #31
    196a:	d500      	bpl.n	196e <tc_init+0x5a>
    196c:	e0fa      	b.n	1b64 <tc_init+0x250>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    196e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1970:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1972:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1974:	07db      	lsls	r3, r3, #31
    1976:	d500      	bpl.n	197a <tc_init+0x66>
    1978:	e0f4      	b.n	1b64 <tc_init+0x250>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    197a:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    197c:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    197e:	06db      	lsls	r3, r3, #27
    1980:	d500      	bpl.n	1984 <tc_init+0x70>
    1982:	e0ef      	b.n	1b64 <tc_init+0x250>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1984:	8833      	ldrh	r3, [r6, #0]
    1986:	079b      	lsls	r3, r3, #30
    1988:	d500      	bpl.n	198c <tc_init+0x78>
    198a:	e0eb      	b.n	1b64 <tc_init+0x250>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    198c:	4643      	mov	r3, r8
    198e:	7c1b      	ldrb	r3, [r3, #16]
    1990:	2b00      	cmp	r3, #0
    1992:	d00c      	beq.n	19ae <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1994:	a901      	add	r1, sp, #4
    1996:	2301      	movs	r3, #1
    1998:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    199a:	2200      	movs	r2, #0
    199c:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    199e:	4642      	mov	r2, r8
    19a0:	7e12      	ldrb	r2, [r2, #24]
    19a2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    19a4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    19a6:	4643      	mov	r3, r8
    19a8:	7d18      	ldrb	r0, [r3, #20]
    19aa:	4b75      	ldr	r3, [pc, #468]	; (1b80 <tc_init+0x26c>)
    19ac:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    19ae:	4643      	mov	r3, r8
    19b0:	7f1b      	ldrb	r3, [r3, #28]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d00d      	beq.n	19d2 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    19b6:	a901      	add	r1, sp, #4
    19b8:	2301      	movs	r3, #1
    19ba:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    19bc:	2200      	movs	r2, #0
    19be:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    19c0:	4642      	mov	r2, r8
    19c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
    19c4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    19c6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    19c8:	4643      	mov	r3, r8
    19ca:	6a1b      	ldr	r3, [r3, #32]
    19cc:	b2d8      	uxtb	r0, r3
    19ce:	4b6c      	ldr	r3, [pc, #432]	; (1b80 <tc_init+0x26c>)
    19d0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    19d2:	496c      	ldr	r1, [pc, #432]	; (1b84 <tc_init+0x270>)
    19d4:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    19d6:	464a      	mov	r2, r9
    19d8:	0052      	lsls	r2, r2, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19da:	a802      	add	r0, sp, #8
    19dc:	5a12      	ldrh	r2, [r2, r0]
    19de:	4313      	orrs	r3, r2
    19e0:	620b      	str	r3, [r1, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    19e2:	4643      	mov	r3, r8
    19e4:	789b      	ldrb	r3, [r3, #2]
    19e6:	2b08      	cmp	r3, #8
    19e8:	d106      	bne.n	19f8 <tc_init+0xe4>
    19ea:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    19ec:	464a      	mov	r2, r9
    19ee:	3201      	adds	r2, #1
    19f0:	0052      	lsls	r2, r2, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    19f2:	5a12      	ldrh	r2, [r2, r0]
    19f4:	4313      	orrs	r3, r2
    19f6:	620b      	str	r3, [r1, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    19f8:	4643      	mov	r3, r8
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	466a      	mov	r2, sp
    19fe:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1a00:	ab03      	add	r3, sp, #12
    1a02:	464a      	mov	r2, r9
    1a04:	5c9d      	ldrb	r5, [r3, r2]
    1a06:	1c28      	adds	r0, r5, #0
    1a08:	4669      	mov	r1, sp
    1a0a:	4b5f      	ldr	r3, [pc, #380]	; (1b88 <tc_init+0x274>)
    1a0c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1a0e:	1c28      	adds	r0, r5, #0
    1a10:	4b5e      	ldr	r3, [pc, #376]	; (1b8c <tc_init+0x278>)
    1a12:	4798      	blx	r3
    1a14:	4643      	mov	r3, r8
    1a16:	8898      	ldrh	r0, [r3, #4]
    1a18:	891b      	ldrh	r3, [r3, #8]
    1a1a:	4303      	orrs	r3, r0

	/* Set ctrla register */
	ctrla_tmp =
    1a1c:	4642      	mov	r2, r8
    1a1e:	7990      	ldrb	r0, [r2, #6]
    1a20:	7892      	ldrb	r2, [r2, #2]
    1a22:	4310      	orrs	r0, r2
    1a24:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1a26:	4643      	mov	r3, r8
    1a28:	785b      	ldrb	r3, [r3, #1]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d002      	beq.n	1a34 <tc_init+0x120>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1a2e:	2380      	movs	r3, #128	; 0x80
    1a30:	011b      	lsls	r3, r3, #4
    1a32:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a34:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a36:	227f      	movs	r2, #127	; 0x7f
    1a38:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1a3a:	4393      	bics	r3, r2
    1a3c:	d1fc      	bne.n	1a38 <tc_init+0x124>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1a3e:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1a40:	4643      	mov	r3, r8
    1a42:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1a44:	1e43      	subs	r3, r0, #1
    1a46:	4198      	sbcs	r0, r3
    1a48:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    1a4a:	4643      	mov	r3, r8
    1a4c:	7b9b      	ldrb	r3, [r3, #14]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d001      	beq.n	1a56 <tc_init+0x142>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1a52:	2301      	movs	r3, #1
    1a54:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a56:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a58:	227f      	movs	r2, #127	; 0x7f
    1a5a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1a5c:	4393      	bics	r3, r2
    1a5e:	d1fc      	bne.n	1a5a <tc_init+0x146>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1a60:	33ff      	adds	r3, #255	; 0xff
    1a62:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1a64:	2800      	cmp	r0, #0
    1a66:	d005      	beq.n	1a74 <tc_init+0x160>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a68:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a6a:	227f      	movs	r2, #127	; 0x7f
    1a6c:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1a6e:	4393      	bics	r3, r2
    1a70:	d1fc      	bne.n	1a6c <tc_init+0x158>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1a72:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1a74:	4643      	mov	r3, r8
    1a76:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1a78:	7adb      	ldrb	r3, [r3, #11]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d001      	beq.n	1a82 <tc_init+0x16e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a7e:	2310      	movs	r3, #16
    1a80:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1a82:	4643      	mov	r3, r8
    1a84:	7b1b      	ldrb	r3, [r3, #12]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d001      	beq.n	1a8e <tc_init+0x17a>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a8a:	2320      	movs	r3, #32
    1a8c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a8e:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a90:	227f      	movs	r2, #127	; 0x7f
    1a92:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1a94:	4393      	bics	r3, r2
    1a96:	d1fc      	bne.n	1a92 <tc_init+0x17e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1a98:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a9a:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a9c:	217f      	movs	r1, #127	; 0x7f
    1a9e:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1aa0:	438b      	bics	r3, r1
    1aa2:	d1fc      	bne.n	1a9e <tc_init+0x18a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1aa4:	7923      	ldrb	r3, [r4, #4]
    1aa6:	2b04      	cmp	r3, #4
    1aa8:	d005      	beq.n	1ab6 <tc_init+0x1a2>
    1aaa:	2b08      	cmp	r3, #8
    1aac:	d041      	beq.n	1b32 <tc_init+0x21e>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1aae:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d157      	bne.n	1b64 <tc_init+0x250>
    1ab4:	e024      	b.n	1b00 <tc_init+0x1ec>
    1ab6:	217f      	movs	r1, #127	; 0x7f
    1ab8:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1aba:	438b      	bics	r3, r1
    1abc:	d1fc      	bne.n	1ab8 <tc_init+0x1a4>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1abe:	3328      	adds	r3, #40	; 0x28
    1ac0:	4642      	mov	r2, r8
    1ac2:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1ac4:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ac6:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ac8:	227f      	movs	r2, #127	; 0x7f
    1aca:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1acc:	4393      	bics	r3, r2
    1ace:	d1fc      	bne.n	1aca <tc_init+0x1b6>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1ad0:	3329      	adds	r3, #41	; 0x29
    1ad2:	4642      	mov	r2, r8
    1ad4:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1ad6:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ad8:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ada:	227f      	movs	r2, #127	; 0x7f
    1adc:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1ade:	4393      	bics	r3, r2
    1ae0:	d1fc      	bne.n	1adc <tc_init+0x1c8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1ae2:	332a      	adds	r3, #42	; 0x2a
    1ae4:	4642      	mov	r2, r8
    1ae6:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1ae8:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1aea:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1aec:	227f      	movs	r2, #127	; 0x7f
    1aee:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1af0:	4393      	bics	r3, r2
    1af2:	d1fc      	bne.n	1aee <tc_init+0x1da>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1af4:	332b      	adds	r3, #43	; 0x2b
    1af6:	4642      	mov	r2, r8
    1af8:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1afa:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1afc:	2000      	movs	r0, #0
    1afe:	e031      	b.n	1b64 <tc_init+0x250>
    1b00:	217f      	movs	r1, #127	; 0x7f
    1b02:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1b04:	438b      	bics	r3, r1
    1b06:	d1fc      	bne.n	1b02 <tc_init+0x1ee>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1b08:	4643      	mov	r3, r8
    1b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1b0c:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b0e:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b10:	227f      	movs	r2, #127	; 0x7f
    1b12:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1b14:	4393      	bics	r3, r2
    1b16:	d1fc      	bne.n	1b12 <tc_init+0x1fe>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1b18:	4643      	mov	r3, r8
    1b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1b1c:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b1e:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b20:	227f      	movs	r2, #127	; 0x7f
    1b22:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1b24:	4393      	bics	r3, r2
    1b26:	d1fc      	bne.n	1b22 <tc_init+0x20e>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1b28:	4643      	mov	r3, r8
    1b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1b2c:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1b2e:	2000      	movs	r0, #0
    1b30:	e018      	b.n	1b64 <tc_init+0x250>
    1b32:	217f      	movs	r1, #127	; 0x7f
    1b34:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1b36:	438b      	bics	r3, r1
    1b38:	d1fc      	bne.n	1b34 <tc_init+0x220>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1b3a:	4643      	mov	r3, r8
    1b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b3e:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b40:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b42:	227f      	movs	r2, #127	; 0x7f
    1b44:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1b46:	4393      	bics	r3, r2
    1b48:	d1fc      	bne.n	1b44 <tc_init+0x230>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1b4a:	4643      	mov	r3, r8
    1b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b4e:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b50:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b52:	227f      	movs	r2, #127	; 0x7f
    1b54:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1b56:	4393      	bics	r3, r2
    1b58:	d1fc      	bne.n	1b54 <tc_init+0x240>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1b5a:	4643      	mov	r3, r8
    1b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1b5e:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1b60:	2000      	movs	r0, #0
    1b62:	e7ff      	b.n	1b64 <tc_init+0x250>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1b64:	b005      	add	sp, #20
    1b66:	bc0c      	pop	{r2, r3}
    1b68:	4690      	mov	r8, r2
    1b6a:	4699      	mov	r9, r3
    1b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	000018e9 	.word	0x000018e9
    1b74:	00003424 	.word	0x00003424
    1b78:	00002289 	.word	0x00002289
    1b7c:	200002e4 	.word	0x200002e4
    1b80:	000017d9 	.word	0x000017d9
    1b84:	40000400 	.word	0x40000400
    1b88:	000016e1 	.word	0x000016e1
    1b8c:	00001655 	.word	0x00001655

00001b90 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1b90:	e7fe      	b.n	1b90 <Dummy_Handler>
    1b92:	46c0      	nop			; (mov r8, r8)

00001b94 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1b94:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1b96:	4b2b      	ldr	r3, [pc, #172]	; (1c44 <Reset_Handler+0xb0>)
    1b98:	4a2b      	ldr	r2, [pc, #172]	; (1c48 <Reset_Handler+0xb4>)
    1b9a:	429a      	cmp	r2, r3
    1b9c:	d003      	beq.n	1ba6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1b9e:	4b2b      	ldr	r3, [pc, #172]	; (1c4c <Reset_Handler+0xb8>)
    1ba0:	4a28      	ldr	r2, [pc, #160]	; (1c44 <Reset_Handler+0xb0>)
    1ba2:	429a      	cmp	r2, r3
    1ba4:	d304      	bcc.n	1bb0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ba6:	4b2a      	ldr	r3, [pc, #168]	; (1c50 <Reset_Handler+0xbc>)
    1ba8:	4a2a      	ldr	r2, [pc, #168]	; (1c54 <Reset_Handler+0xc0>)
    1baa:	429a      	cmp	r2, r3
    1bac:	d310      	bcc.n	1bd0 <Reset_Handler+0x3c>
    1bae:	e01e      	b.n	1bee <Reset_Handler+0x5a>
    1bb0:	4a29      	ldr	r2, [pc, #164]	; (1c58 <Reset_Handler+0xc4>)
    1bb2:	4b26      	ldr	r3, [pc, #152]	; (1c4c <Reset_Handler+0xb8>)
    1bb4:	3303      	adds	r3, #3
    1bb6:	1a9b      	subs	r3, r3, r2
    1bb8:	089b      	lsrs	r3, r3, #2
    1bba:	3301      	adds	r3, #1
    1bbc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1bbe:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1bc0:	4820      	ldr	r0, [pc, #128]	; (1c44 <Reset_Handler+0xb0>)
    1bc2:	4921      	ldr	r1, [pc, #132]	; (1c48 <Reset_Handler+0xb4>)
    1bc4:	588c      	ldr	r4, [r1, r2]
    1bc6:	5084      	str	r4, [r0, r2]
    1bc8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1bca:	429a      	cmp	r2, r3
    1bcc:	d1fa      	bne.n	1bc4 <Reset_Handler+0x30>
    1bce:	e7ea      	b.n	1ba6 <Reset_Handler+0x12>
    1bd0:	4a22      	ldr	r2, [pc, #136]	; (1c5c <Reset_Handler+0xc8>)
    1bd2:	4b1f      	ldr	r3, [pc, #124]	; (1c50 <Reset_Handler+0xbc>)
    1bd4:	3303      	adds	r3, #3
    1bd6:	1a9b      	subs	r3, r3, r2
    1bd8:	089b      	lsrs	r3, r3, #2
    1bda:	3301      	adds	r3, #1
    1bdc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1bde:	2200      	movs	r2, #0
                *pDest++ = 0;
    1be0:	481c      	ldr	r0, [pc, #112]	; (1c54 <Reset_Handler+0xc0>)
    1be2:	2100      	movs	r1, #0
    1be4:	1814      	adds	r4, r2, r0
    1be6:	6021      	str	r1, [r4, #0]
    1be8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1bea:	429a      	cmp	r2, r3
    1bec:	d1fa      	bne.n	1be4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bee:	4a1c      	ldr	r2, [pc, #112]	; (1c60 <Reset_Handler+0xcc>)
    1bf0:	21ff      	movs	r1, #255	; 0xff
    1bf2:	4b1c      	ldr	r3, [pc, #112]	; (1c64 <Reset_Handler+0xd0>)
    1bf4:	438b      	bics	r3, r1
    1bf6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bf8:	39fd      	subs	r1, #253	; 0xfd
    1bfa:	2390      	movs	r3, #144	; 0x90
    1bfc:	005b      	lsls	r3, r3, #1
    1bfe:	4a1a      	ldr	r2, [pc, #104]	; (1c68 <Reset_Handler+0xd4>)
    1c00:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c02:	4b1a      	ldr	r3, [pc, #104]	; (1c6c <Reset_Handler+0xd8>)
    1c04:	7b9a      	ldrb	r2, [r3, #14]
    1c06:	312e      	adds	r1, #46	; 0x2e
    1c08:	438a      	bics	r2, r1
    1c0a:	1c11      	adds	r1, r2, #0
    1c0c:	2220      	movs	r2, #32
    1c0e:	430a      	orrs	r2, r1
    1c10:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c12:	7b9a      	ldrb	r2, [r3, #14]
    1c14:	210c      	movs	r1, #12
    1c16:	438a      	bics	r2, r1
    1c18:	1c11      	adds	r1, r2, #0
    1c1a:	2208      	movs	r2, #8
    1c1c:	430a      	orrs	r2, r1
    1c1e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c20:	7b9a      	ldrb	r2, [r3, #14]
    1c22:	2103      	movs	r1, #3
    1c24:	438a      	bics	r2, r1
    1c26:	1c11      	adds	r1, r2, #0
    1c28:	2202      	movs	r2, #2
    1c2a:	430a      	orrs	r2, r1
    1c2c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c2e:	4a10      	ldr	r2, [pc, #64]	; (1c70 <Reset_Handler+0xdc>)
    1c30:	6851      	ldr	r1, [r2, #4]
    1c32:	2380      	movs	r3, #128	; 0x80
    1c34:	430b      	orrs	r3, r1
    1c36:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1c38:	4b0e      	ldr	r3, [pc, #56]	; (1c74 <Reset_Handler+0xe0>)
    1c3a:	4798      	blx	r3

        /* Branch to main function */
        main();
    1c3c:	4b0e      	ldr	r3, [pc, #56]	; (1c78 <Reset_Handler+0xe4>)
    1c3e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1c40:	e7fe      	b.n	1c40 <Reset_Handler+0xac>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	20000000 	.word	0x20000000
    1c48:	000034f0 	.word	0x000034f0
    1c4c:	200000dc 	.word	0x200000dc
    1c50:	200002fc 	.word	0x200002fc
    1c54:	200000dc 	.word	0x200000dc
    1c58:	20000004 	.word	0x20000004
    1c5c:	200000e0 	.word	0x200000e0
    1c60:	e000ed00 	.word	0xe000ed00
    1c64:	00000000 	.word	0x00000000
    1c68:	41007000 	.word	0x41007000
    1c6c:	41004800 	.word	0x41004800
    1c70:	41004000 	.word	0x41004000
    1c74:	0000223d 	.word	0x0000223d
    1c78:	00001de9 	.word	0x00001de9

00001c7c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7e:	4647      	mov	r7, r8
    1c80:	b480      	push	{r7}
    1c82:	1c0c      	adds	r4, r1, #0
    1c84:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1c86:	2800      	cmp	r0, #0
    1c88:	d110      	bne.n	1cac <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    1c8a:	2a00      	cmp	r2, #0
    1c8c:	dd0a      	ble.n	1ca4 <_read+0x28>
    1c8e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1c90:	4e09      	ldr	r6, [pc, #36]	; (1cb8 <_read+0x3c>)
    1c92:	4d0a      	ldr	r5, [pc, #40]	; (1cbc <_read+0x40>)
    1c94:	6830      	ldr	r0, [r6, #0]
    1c96:	1c21      	adds	r1, r4, #0
    1c98:	682b      	ldr	r3, [r5, #0]
    1c9a:	4798      	blx	r3
		ptr++;
    1c9c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1c9e:	42bc      	cmp	r4, r7
    1ca0:	d1f8      	bne.n	1c94 <_read+0x18>
    1ca2:	e001      	b.n	1ca8 <_read+0x2c>
    1ca4:	2300      	movs	r3, #0
    1ca6:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1ca8:	4640      	mov	r0, r8
    1caa:	e001      	b.n	1cb0 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1cac:	2001      	movs	r0, #1
    1cae:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1cb0:	bc04      	pop	{r2}
    1cb2:	4690      	mov	r8, r2
    1cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	200002f4 	.word	0x200002f4
    1cbc:	200002ec 	.word	0x200002ec

00001cc0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	4647      	mov	r7, r8
    1cc4:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1cc6:	3801      	subs	r0, #1
    1cc8:	2802      	cmp	r0, #2
    1cca:	d815      	bhi.n	1cf8 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    1ccc:	2a00      	cmp	r2, #0
    1cce:	d010      	beq.n	1cf2 <_write+0x32>
    1cd0:	1c15      	adds	r5, r2, #0
    1cd2:	1c0e      	adds	r6, r1, #0
    1cd4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1cd6:	4b0c      	ldr	r3, [pc, #48]	; (1d08 <_write+0x48>)
    1cd8:	4698      	mov	r8, r3
    1cda:	4f0c      	ldr	r7, [pc, #48]	; (1d0c <_write+0x4c>)
    1cdc:	4643      	mov	r3, r8
    1cde:	6818      	ldr	r0, [r3, #0]
    1ce0:	5d31      	ldrb	r1, [r6, r4]
    1ce2:	683b      	ldr	r3, [r7, #0]
    1ce4:	4798      	blx	r3
    1ce6:	2800      	cmp	r0, #0
    1ce8:	db09      	blt.n	1cfe <_write+0x3e>
			return -1;
		}
		++nChars;
    1cea:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1cec:	42a5      	cmp	r5, r4
    1cee:	d1f5      	bne.n	1cdc <_write+0x1c>
    1cf0:	e000      	b.n	1cf4 <_write+0x34>
    1cf2:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1cf4:	1c20      	adds	r0, r4, #0
    1cf6:	e004      	b.n	1d02 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1cf8:	2001      	movs	r0, #1
    1cfa:	4240      	negs	r0, r0
    1cfc:	e001      	b.n	1d02 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1cfe:	2001      	movs	r0, #1
    1d00:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    1d02:	bc04      	pop	{r2}
    1d04:	4690      	mov	r8, r2
    1d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d08:	200002f4 	.word	0x200002f4
    1d0c:	200002f0 	.word	0x200002f0

00001d10 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1d10:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1d12:	4a06      	ldr	r2, [pc, #24]	; (1d2c <_sbrk+0x1c>)
    1d14:	6812      	ldr	r2, [r2, #0]
    1d16:	2a00      	cmp	r2, #0
    1d18:	d102      	bne.n	1d20 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1d1a:	4905      	ldr	r1, [pc, #20]	; (1d30 <_sbrk+0x20>)
    1d1c:	4a03      	ldr	r2, [pc, #12]	; (1d2c <_sbrk+0x1c>)
    1d1e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1d20:	4a02      	ldr	r2, [pc, #8]	; (1d2c <_sbrk+0x1c>)
    1d22:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1d24:	18c3      	adds	r3, r0, r3
    1d26:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1d28:	4770      	bx	lr
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	20000230 	.word	0x20000230
    1d30:	20000700 	.word	0x20000700

00001d34 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1d34:	2001      	movs	r0, #1
    1d36:	4240      	negs	r0, r0
    1d38:	4770      	bx	lr
    1d3a:	46c0      	nop			; (mov r8, r8)

00001d3c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1d3c:	2380      	movs	r3, #128	; 0x80
    1d3e:	019b      	lsls	r3, r3, #6
    1d40:	604b      	str	r3, [r1, #4]

	return 0;
}
    1d42:	2000      	movs	r0, #0
    1d44:	4770      	bx	lr
    1d46:	46c0      	nop			; (mov r8, r8)

00001d48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1d48:	2001      	movs	r0, #1
    1d4a:	4770      	bx	lr

00001d4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1d4c:	2000      	movs	r0, #0
    1d4e:	4770      	bx	lr

00001d50 <USART_RX_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1d50:	2280      	movs	r2, #128	; 0x80
    1d52:	0092      	lsls	r2, r2, #2
    1d54:	4b01      	ldr	r3, [pc, #4]	; (1d5c <USART_RX_callback+0xc>)
    1d56:	61da      	str	r2, [r3, #28]

//--------------------Functions------------------
void USART_RX_callback(const struct usart_module *const usart_module)
{
   port_pin_toggle_output_level(LED0_PIN);
}
    1d58:	4770      	bx	lr
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	41004400 	.word	0x41004400

00001d60 <tc_callback_to_counter>:

/** TC Callback function.
 */
static void tc_callback_to_counter(	struct tc_module *const module_inst)
{
	++tick;
    1d60:	4a04      	ldr	r2, [pc, #16]	; (1d74 <tc_callback_to_counter+0x14>)
    1d62:	8813      	ldrh	r3, [r2, #0]
    1d64:	3301      	adds	r3, #1
    1d66:	b29b      	uxth	r3, r3
    1d68:	8013      	strh	r3, [r2, #0]
	iterate_game = true;
    1d6a:	2201      	movs	r2, #1
    1d6c:	4b02      	ldr	r3, [pc, #8]	; (1d78 <tc_callback_to_counter+0x18>)
    1d6e:	701a      	strb	r2, [r3, #0]
	
}
    1d70:	4770      	bx	lr
    1d72:	46c0      	nop			; (mov r8, r8)
    1d74:	2000026a 	.word	0x2000026a
    1d78:	2000026c 	.word	0x2000026c

00001d7c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	b082      	sub	sp, #8
    1d80:	1c05      	adds	r5, r0, #0
    1d82:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1d84:	2200      	movs	r2, #0
    1d86:	466b      	mov	r3, sp
    1d88:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1d8a:	4c06      	ldr	r4, [pc, #24]	; (1da4 <usart_serial_getchar+0x28>)
    1d8c:	1c28      	adds	r0, r5, #0
    1d8e:	466b      	mov	r3, sp
    1d90:	1d99      	adds	r1, r3, #6
    1d92:	47a0      	blx	r4
    1d94:	2800      	cmp	r0, #0
    1d96:	d1f9      	bne.n	1d8c <usart_serial_getchar+0x10>

	*c = temp;
    1d98:	466b      	mov	r3, sp
    1d9a:	3306      	adds	r3, #6
    1d9c:	881b      	ldrh	r3, [r3, #0]
    1d9e:	7033      	strb	r3, [r6, #0]
}
    1da0:	b002      	add	sp, #8
    1da2:	bd70      	pop	{r4, r5, r6, pc}
    1da4:	00001095 	.word	0x00001095

00001da8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1da8:	b570      	push	{r4, r5, r6, lr}
    1daa:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    1dac:	b28c      	uxth	r4, r1
    1dae:	4e03      	ldr	r6, [pc, #12]	; (1dbc <usart_serial_putchar+0x14>)
    1db0:	1c28      	adds	r0, r5, #0
    1db2:	1c21      	adds	r1, r4, #0
    1db4:	47b0      	blx	r6
    1db6:	2800      	cmp	r0, #0
    1db8:	d1fa      	bne.n	1db0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1dba:	bd70      	pop	{r4, r5, r6, pc}
    1dbc:	00001069 	.word	0x00001069

00001dc0 <configure_usart_callbacks>:
	// Enable the RX Complete Interrupt
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
	return STATUS_OK;
}
void configure_usart_callbacks(void)
{
    1dc0:	b510      	push	{r4, lr}
	usart_register_callback(&cdc_uart_module, USART_RX_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1dc2:	4c06      	ldr	r4, [pc, #24]	; (1ddc <configure_usart_callbacks+0x1c>)
    1dc4:	1c20      	adds	r0, r4, #0
    1dc6:	4906      	ldr	r1, [pc, #24]	; (1de0 <configure_usart_callbacks+0x20>)
    1dc8:	2201      	movs	r2, #1
    1dca:	4b06      	ldr	r3, [pc, #24]	; (1de4 <configure_usart_callbacks+0x24>)
    1dcc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1dce:	2231      	movs	r2, #49	; 0x31
    1dd0:	5ca1      	ldrb	r1, [r4, r2]
    1dd2:	2302      	movs	r3, #2
    1dd4:	430b      	orrs	r3, r1
    1dd6:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
}
    1dd8:	bd10      	pop	{r4, pc}
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	20000234 	.word	0x20000234
    1de0:	00001d51 	.word	0x00001d51
    1de4:	0000110d 	.word	0x0000110d

00001de8 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
    1de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dea:	b093      	sub	sp, #76	; 0x4c
	struct port_config pin;
	unsigned char c;
	
	system_init();
    1dec:	4b8a      	ldr	r3, [pc, #552]	; (2018 <main+0x230>)
    1dee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1df0:	2380      	movs	r3, #128	; 0x80
    1df2:	05db      	lsls	r3, r3, #23
    1df4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1df6:	2300      	movs	r3, #0
    1df8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1dfa:	22ff      	movs	r2, #255	; 0xff
    1dfc:	4669      	mov	r1, sp
    1dfe:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1e00:	2200      	movs	r2, #0
    1e02:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1e04:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1e06:	2501      	movs	r5, #1
    1e08:	2124      	movs	r1, #36	; 0x24
    1e0a:	4668      	mov	r0, sp
    1e0c:	5445      	strb	r5, [r0, r1]
	config->transmitter_enable = true;
    1e0e:	3101      	adds	r1, #1
    1e10:	5445      	strb	r5, [r0, r1]
	config->clock_polarity_inverted = false;
    1e12:	3101      	adds	r1, #1
    1e14:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1e16:	3101      	adds	r1, #1
    1e18:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1e1a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1e1c:	3105      	adds	r1, #5
    1e1e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1e20:	3101      	adds	r1, #1
    1e22:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e24:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1e26:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1e28:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1e2a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1e2c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1e2e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1e30:	2313      	movs	r3, #19
    1e32:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1e34:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    1e36:	23c4      	movs	r3, #196	; 0xc4
    1e38:	039b      	lsls	r3, r3, #14
    1e3a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    1e3c:	2301      	movs	r3, #1
    1e3e:	425b      	negs	r3, r3
    1e40:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    1e42:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    1e44:	4b75      	ldr	r3, [pc, #468]	; (201c <main+0x234>)
    1e46:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    1e48:	4b75      	ldr	r3, [pc, #468]	; (2020 <main+0x238>)
    1e4a:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    1e4c:	2396      	movs	r3, #150	; 0x96
    1e4e:	021b      	lsls	r3, r3, #8
    1e50:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1e52:	4c74      	ldr	r4, [pc, #464]	; (2024 <main+0x23c>)
    1e54:	4b74      	ldr	r3, [pc, #464]	; (2028 <main+0x240>)
    1e56:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1e58:	4a74      	ldr	r2, [pc, #464]	; (202c <main+0x244>)
    1e5a:	4b75      	ldr	r3, [pc, #468]	; (2030 <main+0x248>)
    1e5c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1e5e:	4a75      	ldr	r2, [pc, #468]	; (2034 <main+0x24c>)
    1e60:	4b75      	ldr	r3, [pc, #468]	; (2038 <main+0x250>)
    1e62:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1e64:	1c20      	adds	r0, r4, #0
    1e66:	4975      	ldr	r1, [pc, #468]	; (203c <main+0x254>)
    1e68:	466a      	mov	r2, sp
    1e6a:	4b75      	ldr	r3, [pc, #468]	; (2040 <main+0x258>)
    1e6c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1e6e:	4f75      	ldr	r7, [pc, #468]	; (2044 <main+0x25c>)
    1e70:	683b      	ldr	r3, [r7, #0]
    1e72:	6898      	ldr	r0, [r3, #8]
    1e74:	2100      	movs	r1, #0
    1e76:	4e74      	ldr	r6, [pc, #464]	; (2048 <main+0x260>)
    1e78:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1e7a:	683b      	ldr	r3, [r7, #0]
    1e7c:	6858      	ldr	r0, [r3, #4]
    1e7e:	2100      	movs	r1, #0
    1e80:	47b0      	blx	r6
	system_init();

	//Configure UART console.
	configure_console();
	
	configure_usart_callbacks();
    1e82:	4b72      	ldr	r3, [pc, #456]	; (204c <main+0x264>)
    1e84:	4798      	blx	r3
	Assert(module);
	Assert(rx_data);

	// Issue internal asynchronous read
	// Get a pointer to the hardware module instance
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e86:	6826      	ldr	r6, [r4, #0]
	module->rx_buffer_ptr = rx_data;
    1e88:	2343      	movs	r3, #67	; 0x43
    1e8a:	446b      	add	r3, sp
    1e8c:	6263      	str	r3, [r4, #36]	; 0x24
	// Enable the RX Complete Interrupt
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1e8e:	2304      	movs	r3, #4
    1e90:	75b3      	strb	r3, [r6, #22]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e92:	1c30      	adds	r0, r6, #0
    1e94:	4b6e      	ldr	r3, [pc, #440]	; (2050 <main+0x268>)
    1e96:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e98:	231f      	movs	r3, #31
    1e9a:	4018      	ands	r0, r3
    1e9c:	4085      	lsls	r5, r0
    1e9e:	4b6d      	ldr	r3, [pc, #436]	; (2054 <main+0x26c>)
    1ea0:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1ea2:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1ea4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1ea6:	2a00      	cmp	r2, #0
    1ea8:	d1fc      	bne.n	1ea4 <main+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1eaa:	6832      	ldr	r2, [r6, #0]
    1eac:	2302      	movs	r3, #2
    1eae:	4313      	orrs	r3, r2
    1eb0:	6033      	str	r3, [r6, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1eb2:	2300      	movs	r3, #0
    1eb4:	2200      	movs	r2, #0
    1eb6:	4669      	mov	r1, sp
    1eb8:	700b      	strb	r3, [r1, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1eba:	708b      	strb	r3, [r1, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1ebc:	810b      	strh	r3, [r1, #8]
	config->run_in_standby             = false;
    1ebe:	2100      	movs	r1, #0
    1ec0:	4668      	mov	r0, sp
    1ec2:	7041      	strb	r1, [r0, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1ec4:	7282      	strb	r2, [r0, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1ec6:	72c2      	strb	r2, [r0, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1ec8:	7302      	strb	r2, [r0, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1eca:	7382      	strb	r2, [r0, #14]
	config->oneshot                    = false;
    1ecc:	7342      	strb	r2, [r0, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1ece:	7402      	strb	r2, [r0, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1ed0:	9305      	str	r3, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1ed2:	9306      	str	r3, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1ed4:	7702      	strb	r2, [r0, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1ed6:	9308      	str	r3, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1ed8:	9309      	str	r3, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1eda:	466a      	mov	r2, sp
    1edc:	8503      	strh	r3, [r0, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1ede:	8583      	strh	r3, [r0, #44]	; 0x2c
{
	struct tc_config config_tc;

	tc_get_config_defaults(&config_tc);
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    1ee0:	3320      	adds	r3, #32
    1ee2:	7183      	strb	r3, [r0, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 2000; 
    1ee4:	23fa      	movs	r3, #250	; 0xfa
    1ee6:	00db      	lsls	r3, r3, #3
    1ee8:	8543      	strh	r3, [r0, #42]	; 0x2a
	config_tc.clock_prescaler=TC_CLOCK_PRESCALER_DIV1024;
    1eea:	3bd0      	subs	r3, #208	; 0xd0
    1eec:	8083      	strh	r3, [r0, #4]

	tc_init(&tc_instance, CONF_TC_INSTANCE, &config_tc);
    1eee:	4c5a      	ldr	r4, [pc, #360]	; (2058 <main+0x270>)
    1ef0:	1c20      	adds	r0, r4, #0
    1ef2:	495a      	ldr	r1, [pc, #360]	; (205c <main+0x274>)
    1ef4:	4b5a      	ldr	r3, [pc, #360]	; (2060 <main+0x278>)
    1ef6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ef8:	6823      	ldr	r3, [r4, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1efa:	217f      	movs	r1, #127	; 0x7f
    1efc:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1efe:	438a      	bics	r2, r1
    1f00:	d1fc      	bne.n	1efc <main+0x114>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1f02:	8819      	ldrh	r1, [r3, #0]
    1f04:	3202      	adds	r2, #2
    1f06:	430a      	orrs	r2, r1
    1f08:	801a      	strh	r2, [r3, #0]

/** Registers TC callback function with the  driver.
 */
static void configure_tc_callbacks(void)
{
	tc_register_callback(&tc_instance,	tc_callback_to_counter,	TC_CALLBACK_CC_CHANNEL0);
    1f0a:	4c53      	ldr	r4, [pc, #332]	; (2058 <main+0x270>)
    1f0c:	1c20      	adds	r0, r4, #0
    1f0e:	4955      	ldr	r1, [pc, #340]	; (2064 <main+0x27c>)
    1f10:	2202      	movs	r2, #2
    1f12:	4b55      	ldr	r3, [pc, #340]	; (2068 <main+0x280>)
    1f14:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1f16:	6820      	ldr	r0, [r4, #0]
    1f18:	4b54      	ldr	r3, [pc, #336]	; (206c <main+0x284>)
    1f1a:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1f1c:	4b54      	ldr	r3, [pc, #336]	; (2070 <main+0x288>)
    1f1e:	5c1b      	ldrb	r3, [r3, r0]
    1f20:	221f      	movs	r2, #31
    1f22:	4013      	ands	r3, r2
    1f24:	2501      	movs	r5, #1
    1f26:	1c2a      	adds	r2, r5, #0
    1f28:	409a      	lsls	r2, r3
    1f2a:	1c13      	adds	r3, r2, #0
    1f2c:	4a49      	ldr	r2, [pc, #292]	; (2054 <main+0x26c>)
    1f2e:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1f30:	7e62      	ldrb	r2, [r4, #25]
    1f32:	2310      	movs	r3, #16
    1f34:	4313      	orrs	r3, r2
    1f36:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1f38:	6823      	ldr	r3, [r4, #0]
    1f3a:	2210      	movs	r2, #16
    1f3c:	735a      	strb	r2, [r3, #13]

	//Configures TC callback
	configure_tc_callbacks();

	//Initialize the delay driver
	delay_init();
    1f3e:	4b4d      	ldr	r3, [pc, #308]	; (2074 <main+0x28c>)
    1f40:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1f42:	4b4d      	ldr	r3, [pc, #308]	; (2078 <main+0x290>)
    1f44:	701d      	strb	r5, [r3, #0]
    1f46:	f3bf 8f5f 	dmb	sy
    1f4a:	b662      	cpsie	i
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1f4c:	a911      	add	r1, sp, #68	; 0x44
    1f4e:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    1f50:	2300      	movs	r3, #0
    1f52:	708b      	strb	r3, [r1, #2]
	//Enable system interrupt
	system_interrupt_enable_global();

    //Configures PORT for LED0
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1f54:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    1f56:	2009      	movs	r0, #9
    1f58:	4b48      	ldr	r3, [pc, #288]	; (207c <main+0x294>)
    1f5a:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f5c:	4b48      	ldr	r3, [pc, #288]	; (2080 <main+0x298>)
    1f5e:	2280      	movs	r2, #128	; 0x80
    1f60:	0092      	lsls	r2, r2, #2
    1f62:	615a      	str	r2, [r3, #20]
    1f64:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	/*main loop*/
	while(1)
	{
		if (is_running) 
    1f66:	4c47      	ldr	r4, [pc, #284]	; (2084 <main+0x29c>)
				{
					c=0;
					//Seed random function so we do not get same start condition
					//for each new game. In essence we will not start a new game
					//exactly at the same time.
					srand(tick);
    1f68:	4e47      	ldr	r6, [pc, #284]	; (2088 <main+0x2a0>)
    1f6a:	4d48      	ldr	r5, [pc, #288]	; (208c <main+0x2a4>)
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	/*main loop*/
	while(1)
	{
		if (is_running) 
    1f6c:	7823      	ldrb	r3, [r4, #0]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d035      	beq.n	1fde <main+0x1f6>
		{
			//Handle user's input
	//		if (uart_getc(&c)) 
	//		{
				switch (c) 
    1f72:	2343      	movs	r3, #67	; 0x43
    1f74:	446b      	add	r3, sp
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	2b64      	cmp	r3, #100	; 0x64
    1f7a:	d011      	beq.n	1fa0 <main+0x1b8>
    1f7c:	b2da      	uxtb	r2, r3
    1f7e:	2a64      	cmp	r2, #100	; 0x64
    1f80:	d804      	bhi.n	1f8c <main+0x1a4>
    1f82:	2b20      	cmp	r3, #32
    1f84:	d006      	beq.n	1f94 <main+0x1ac>
    1f86:	2b61      	cmp	r3, #97	; 0x61
    1f88:	d00d      	beq.n	1fa6 <main+0x1be>
    1f8a:	e00e      	b.n	1faa <main+0x1c2>
    1f8c:	2b73      	cmp	r3, #115	; 0x73
    1f8e:	d004      	beq.n	1f9a <main+0x1b2>
    1f90:	2b77      	cmp	r3, #119	; 0x77
    1f92:	d10a      	bne.n	1faa <main+0x1c2>
				{
					case 'w':
					case ' ':
					   //ROTATE
					   tetris_rotate();
    1f94:	4b3e      	ldr	r3, [pc, #248]	; (2090 <main+0x2a8>)
    1f96:	4798      	blx	r3
					break;
    1f98:	e007      	b.n	1faa <main+0x1c2>
					case 's':
					   //DOWN
					   tetris_gravity();	
    1f9a:	4b3e      	ldr	r3, [pc, #248]	; (2094 <main+0x2ac>)
    1f9c:	4798      	blx	r3
					break;
    1f9e:	e004      	b.n	1faa <main+0x1c2>
					case 'd':
					   //RIGHT
					   tetris_move_right();
    1fa0:	4b3d      	ldr	r3, [pc, #244]	; (2098 <main+0x2b0>)
    1fa2:	4798      	blx	r3
					break;
    1fa4:	e001      	b.n	1faa <main+0x1c2>
					case 'a':
					   //LEFT
					   tetris_move_left();
    1fa6:	4b3d      	ldr	r3, [pc, #244]	; (209c <main+0x2b4>)
    1fa8:	4798      	blx	r3
					break;
					default: break;
				}
				c=0;
    1faa:	2200      	movs	r2, #0
    1fac:	2343      	movs	r3, #67	; 0x43
    1fae:	446b      	add	r3, sp
    1fb0:	701a      	strb	r2, [r3, #0]
	//		}
			// was here if(!iterate_game) 
			if(iterate_game) 
    1fb2:	4b3b      	ldr	r3, [pc, #236]	; (20a0 <main+0x2b8>)
    1fb4:	781b      	ldrb	r3, [r3, #0]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d0d8      	beq.n	1f6c <main+0x184>
			{
				//Update game
				iterate_game = false;
    1fba:	4b39      	ldr	r3, [pc, #228]	; (20a0 <main+0x2b8>)
    1fbc:	701a      	strb	r2, [r3, #0]
				tetris_gravity();
    1fbe:	4b35      	ldr	r3, [pc, #212]	; (2094 <main+0x2ac>)
    1fc0:	4798      	blx	r3
				tetris_check_lines();
    1fc2:	4b38      	ldr	r3, [pc, #224]	; (20a4 <main+0x2bc>)
    1fc4:	4798      	blx	r3
				terminal_cursor_home();
    1fc6:	4b38      	ldr	r3, [pc, #224]	; (20a8 <main+0x2c0>)
    1fc8:	4798      	blx	r3
				tetris_print();			
    1fca:	4b38      	ldr	r3, [pc, #224]	; (20ac <main+0x2c4>)
    1fcc:	4798      	blx	r3
				if (tetris_is_game_over()) 
    1fce:	4b38      	ldr	r3, [pc, #224]	; (20b0 <main+0x2c8>)
    1fd0:	4798      	blx	r3
    1fd2:	2800      	cmp	r0, #0
    1fd4:	d0ca      	beq.n	1f6c <main+0x184>
				{
					is_running = false;
    1fd6:	2200      	movs	r2, #0
    1fd8:	4b2a      	ldr	r3, [pc, #168]	; (2084 <main+0x29c>)
    1fda:	701a      	strb	r2, [r3, #0]
    1fdc:	e7c6      	b.n	1f6c <main+0x184>
		} 
		else 
		{
		//	if (uart_getc(&c)) 
		//	{
				if (c == 'n') 
    1fde:	2343      	movs	r3, #67	; 0x43
    1fe0:	446b      	add	r3, sp
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	2b6e      	cmp	r3, #110	; 0x6e
    1fe6:	d1c1      	bne.n	1f6c <main+0x184>
				{
					c=0;
    1fe8:	2200      	movs	r2, #0
    1fea:	3b2b      	subs	r3, #43	; 0x2b
    1fec:	446b      	add	r3, sp
    1fee:	701a      	strb	r2, [r3, #0]
					//Seed random function so we do not get same start condition
					//for each new game. In essence we will not start a new game
					//exactly at the same time.
					srand(tick);
    1ff0:	8830      	ldrh	r0, [r6, #0]
    1ff2:	b280      	uxth	r0, r0
    1ff4:	47a8      	blx	r5
					
					//New Game
					is_running = true;
    1ff6:	2201      	movs	r2, #1
    1ff8:	4b22      	ldr	r3, [pc, #136]	; (2084 <main+0x29c>)
    1ffa:	701a      	strb	r2, [r3, #0]
					terminal_cursor_off();
    1ffc:	4b2d      	ldr	r3, [pc, #180]	; (20b4 <main+0x2cc>)
    1ffe:	4798      	blx	r3
					terminal_clear();
    2000:	4b2d      	ldr	r3, [pc, #180]	; (20b8 <main+0x2d0>)
    2002:	4798      	blx	r3
					tetris_init();
    2004:	4b2d      	ldr	r3, [pc, #180]	; (20bc <main+0x2d4>)
    2006:	4798      	blx	r3
					tetris_new_block();
    2008:	4b2d      	ldr	r3, [pc, #180]	; (20c0 <main+0x2d8>)
    200a:	4798      	blx	r3
					terminal_cursor_home();
    200c:	4b26      	ldr	r3, [pc, #152]	; (20a8 <main+0x2c0>)
    200e:	4798      	blx	r3
					tetris_print();
    2010:	4b26      	ldr	r3, [pc, #152]	; (20ac <main+0x2c4>)
    2012:	4798      	blx	r3
    2014:	e7aa      	b.n	1f6c <main+0x184>
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	0000180d 	.word	0x0000180d
    201c:	000a0003 	.word	0x000a0003
    2020:	000b0003 	.word	0x000b0003
    2024:	20000234 	.word	0x20000234
    2028:	200002f4 	.word	0x200002f4
    202c:	00001da9 	.word	0x00001da9
    2030:	200002f0 	.word	0x200002f0
    2034:	00001d7d 	.word	0x00001d7d
    2038:	200002ec 	.word	0x200002ec
    203c:	42001000 	.word	0x42001000
    2040:	00000d31 	.word	0x00000d31
    2044:	200000d8 	.word	0x200000d8
    2048:	0000248d 	.word	0x0000248d
    204c:	00001dc1 	.word	0x00001dc1
    2050:	00000cd5 	.word	0x00000cd5
    2054:	e000e100 	.word	0xe000e100
    2058:	20000270 	.word	0x20000270
    205c:	42001800 	.word	0x42001800
    2060:	00001915 	.word	0x00001915
    2064:	00001d61 	.word	0x00001d61
    2068:	00001839 	.word	0x00001839
    206c:	000018e9 	.word	0x000018e9
    2070:	00003434 	.word	0x00003434
    2074:	00000769 	.word	0x00000769
    2078:	20000074 	.word	0x20000074
    207c:	00000939 	.word	0x00000939
    2080:	41004400 	.word	0x41004400
    2084:	20000268 	.word	0x20000268
    2088:	2000026a 	.word	0x2000026a
    208c:	000023b9 	.word	0x000023b9
    2090:	00000481 	.word	0x00000481
    2094:	00000595 	.word	0x00000595
    2098:	00000691 	.word	0x00000691
    209c:	000006b9 	.word	0x000006b9
    20a0:	2000026c 	.word	0x2000026c
    20a4:	00000615 	.word	0x00000615
    20a8:	00000141 	.word	0x00000141
    20ac:	0000019d 	.word	0x0000019d
    20b0:	00000685 	.word	0x00000685
    20b4:	00000111 	.word	0x00000111
    20b8:	000000ed 	.word	0x000000ed
    20bc:	0000016d 	.word	0x0000016d
    20c0:	000003b9 	.word	0x000003b9

000020c4 <__aeabi_uidiv>:
    20c4:	2200      	movs	r2, #0
    20c6:	0843      	lsrs	r3, r0, #1
    20c8:	428b      	cmp	r3, r1
    20ca:	d374      	bcc.n	21b6 <__aeabi_uidiv+0xf2>
    20cc:	0903      	lsrs	r3, r0, #4
    20ce:	428b      	cmp	r3, r1
    20d0:	d35f      	bcc.n	2192 <__aeabi_uidiv+0xce>
    20d2:	0a03      	lsrs	r3, r0, #8
    20d4:	428b      	cmp	r3, r1
    20d6:	d344      	bcc.n	2162 <__aeabi_uidiv+0x9e>
    20d8:	0b03      	lsrs	r3, r0, #12
    20da:	428b      	cmp	r3, r1
    20dc:	d328      	bcc.n	2130 <__aeabi_uidiv+0x6c>
    20de:	0c03      	lsrs	r3, r0, #16
    20e0:	428b      	cmp	r3, r1
    20e2:	d30d      	bcc.n	2100 <__aeabi_uidiv+0x3c>
    20e4:	22ff      	movs	r2, #255	; 0xff
    20e6:	0209      	lsls	r1, r1, #8
    20e8:	ba12      	rev	r2, r2
    20ea:	0c03      	lsrs	r3, r0, #16
    20ec:	428b      	cmp	r3, r1
    20ee:	d302      	bcc.n	20f6 <__aeabi_uidiv+0x32>
    20f0:	1212      	asrs	r2, r2, #8
    20f2:	0209      	lsls	r1, r1, #8
    20f4:	d065      	beq.n	21c2 <__aeabi_uidiv+0xfe>
    20f6:	0b03      	lsrs	r3, r0, #12
    20f8:	428b      	cmp	r3, r1
    20fa:	d319      	bcc.n	2130 <__aeabi_uidiv+0x6c>
    20fc:	e000      	b.n	2100 <__aeabi_uidiv+0x3c>
    20fe:	0a09      	lsrs	r1, r1, #8
    2100:	0bc3      	lsrs	r3, r0, #15
    2102:	428b      	cmp	r3, r1
    2104:	d301      	bcc.n	210a <__aeabi_uidiv+0x46>
    2106:	03cb      	lsls	r3, r1, #15
    2108:	1ac0      	subs	r0, r0, r3
    210a:	4152      	adcs	r2, r2
    210c:	0b83      	lsrs	r3, r0, #14
    210e:	428b      	cmp	r3, r1
    2110:	d301      	bcc.n	2116 <__aeabi_uidiv+0x52>
    2112:	038b      	lsls	r3, r1, #14
    2114:	1ac0      	subs	r0, r0, r3
    2116:	4152      	adcs	r2, r2
    2118:	0b43      	lsrs	r3, r0, #13
    211a:	428b      	cmp	r3, r1
    211c:	d301      	bcc.n	2122 <__aeabi_uidiv+0x5e>
    211e:	034b      	lsls	r3, r1, #13
    2120:	1ac0      	subs	r0, r0, r3
    2122:	4152      	adcs	r2, r2
    2124:	0b03      	lsrs	r3, r0, #12
    2126:	428b      	cmp	r3, r1
    2128:	d301      	bcc.n	212e <__aeabi_uidiv+0x6a>
    212a:	030b      	lsls	r3, r1, #12
    212c:	1ac0      	subs	r0, r0, r3
    212e:	4152      	adcs	r2, r2
    2130:	0ac3      	lsrs	r3, r0, #11
    2132:	428b      	cmp	r3, r1
    2134:	d301      	bcc.n	213a <__aeabi_uidiv+0x76>
    2136:	02cb      	lsls	r3, r1, #11
    2138:	1ac0      	subs	r0, r0, r3
    213a:	4152      	adcs	r2, r2
    213c:	0a83      	lsrs	r3, r0, #10
    213e:	428b      	cmp	r3, r1
    2140:	d301      	bcc.n	2146 <__aeabi_uidiv+0x82>
    2142:	028b      	lsls	r3, r1, #10
    2144:	1ac0      	subs	r0, r0, r3
    2146:	4152      	adcs	r2, r2
    2148:	0a43      	lsrs	r3, r0, #9
    214a:	428b      	cmp	r3, r1
    214c:	d301      	bcc.n	2152 <__aeabi_uidiv+0x8e>
    214e:	024b      	lsls	r3, r1, #9
    2150:	1ac0      	subs	r0, r0, r3
    2152:	4152      	adcs	r2, r2
    2154:	0a03      	lsrs	r3, r0, #8
    2156:	428b      	cmp	r3, r1
    2158:	d301      	bcc.n	215e <__aeabi_uidiv+0x9a>
    215a:	020b      	lsls	r3, r1, #8
    215c:	1ac0      	subs	r0, r0, r3
    215e:	4152      	adcs	r2, r2
    2160:	d2cd      	bcs.n	20fe <__aeabi_uidiv+0x3a>
    2162:	09c3      	lsrs	r3, r0, #7
    2164:	428b      	cmp	r3, r1
    2166:	d301      	bcc.n	216c <__aeabi_uidiv+0xa8>
    2168:	01cb      	lsls	r3, r1, #7
    216a:	1ac0      	subs	r0, r0, r3
    216c:	4152      	adcs	r2, r2
    216e:	0983      	lsrs	r3, r0, #6
    2170:	428b      	cmp	r3, r1
    2172:	d301      	bcc.n	2178 <__aeabi_uidiv+0xb4>
    2174:	018b      	lsls	r3, r1, #6
    2176:	1ac0      	subs	r0, r0, r3
    2178:	4152      	adcs	r2, r2
    217a:	0943      	lsrs	r3, r0, #5
    217c:	428b      	cmp	r3, r1
    217e:	d301      	bcc.n	2184 <__aeabi_uidiv+0xc0>
    2180:	014b      	lsls	r3, r1, #5
    2182:	1ac0      	subs	r0, r0, r3
    2184:	4152      	adcs	r2, r2
    2186:	0903      	lsrs	r3, r0, #4
    2188:	428b      	cmp	r3, r1
    218a:	d301      	bcc.n	2190 <__aeabi_uidiv+0xcc>
    218c:	010b      	lsls	r3, r1, #4
    218e:	1ac0      	subs	r0, r0, r3
    2190:	4152      	adcs	r2, r2
    2192:	08c3      	lsrs	r3, r0, #3
    2194:	428b      	cmp	r3, r1
    2196:	d301      	bcc.n	219c <__aeabi_uidiv+0xd8>
    2198:	00cb      	lsls	r3, r1, #3
    219a:	1ac0      	subs	r0, r0, r3
    219c:	4152      	adcs	r2, r2
    219e:	0883      	lsrs	r3, r0, #2
    21a0:	428b      	cmp	r3, r1
    21a2:	d301      	bcc.n	21a8 <__aeabi_uidiv+0xe4>
    21a4:	008b      	lsls	r3, r1, #2
    21a6:	1ac0      	subs	r0, r0, r3
    21a8:	4152      	adcs	r2, r2
    21aa:	0843      	lsrs	r3, r0, #1
    21ac:	428b      	cmp	r3, r1
    21ae:	d301      	bcc.n	21b4 <__aeabi_uidiv+0xf0>
    21b0:	004b      	lsls	r3, r1, #1
    21b2:	1ac0      	subs	r0, r0, r3
    21b4:	4152      	adcs	r2, r2
    21b6:	1a41      	subs	r1, r0, r1
    21b8:	d200      	bcs.n	21bc <__aeabi_uidiv+0xf8>
    21ba:	4601      	mov	r1, r0
    21bc:	4152      	adcs	r2, r2
    21be:	4610      	mov	r0, r2
    21c0:	4770      	bx	lr
    21c2:	e7ff      	b.n	21c4 <__aeabi_uidiv+0x100>
    21c4:	b501      	push	{r0, lr}
    21c6:	2000      	movs	r0, #0
    21c8:	f000 f80c 	bl	21e4 <__aeabi_idiv0>
    21cc:	bd02      	pop	{r1, pc}
    21ce:	46c0      	nop			; (mov r8, r8)

000021d0 <__aeabi_uidivmod>:
    21d0:	2900      	cmp	r1, #0
    21d2:	d0f7      	beq.n	21c4 <__aeabi_uidiv+0x100>
    21d4:	b503      	push	{r0, r1, lr}
    21d6:	f7ff ff75 	bl	20c4 <__aeabi_uidiv>
    21da:	bc0e      	pop	{r1, r2, r3}
    21dc:	4342      	muls	r2, r0
    21de:	1a89      	subs	r1, r1, r2
    21e0:	4718      	bx	r3
    21e2:	46c0      	nop			; (mov r8, r8)

000021e4 <__aeabi_idiv0>:
    21e4:	4770      	bx	lr
    21e6:	46c0      	nop			; (mov r8, r8)

000021e8 <__aeabi_lmul>:
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	464f      	mov	r7, r9
    21ec:	4646      	mov	r6, r8
    21ee:	0405      	lsls	r5, r0, #16
    21f0:	0c2d      	lsrs	r5, r5, #16
    21f2:	1c2c      	adds	r4, r5, #0
    21f4:	b4c0      	push	{r6, r7}
    21f6:	0417      	lsls	r7, r2, #16
    21f8:	0c16      	lsrs	r6, r2, #16
    21fa:	0c3f      	lsrs	r7, r7, #16
    21fc:	4699      	mov	r9, r3
    21fe:	0c03      	lsrs	r3, r0, #16
    2200:	437c      	muls	r4, r7
    2202:	4375      	muls	r5, r6
    2204:	435f      	muls	r7, r3
    2206:	4373      	muls	r3, r6
    2208:	197d      	adds	r5, r7, r5
    220a:	0c26      	lsrs	r6, r4, #16
    220c:	19ad      	adds	r5, r5, r6
    220e:	469c      	mov	ip, r3
    2210:	42af      	cmp	r7, r5
    2212:	d903      	bls.n	221c <__aeabi_lmul+0x34>
    2214:	2380      	movs	r3, #128	; 0x80
    2216:	025b      	lsls	r3, r3, #9
    2218:	4698      	mov	r8, r3
    221a:	44c4      	add	ip, r8
    221c:	464b      	mov	r3, r9
    221e:	4351      	muls	r1, r2
    2220:	4343      	muls	r3, r0
    2222:	0424      	lsls	r4, r4, #16
    2224:	0c2e      	lsrs	r6, r5, #16
    2226:	0c24      	lsrs	r4, r4, #16
    2228:	042d      	lsls	r5, r5, #16
    222a:	4466      	add	r6, ip
    222c:	192c      	adds	r4, r5, r4
    222e:	1859      	adds	r1, r3, r1
    2230:	1989      	adds	r1, r1, r6
    2232:	1c20      	adds	r0, r4, #0
    2234:	bc0c      	pop	{r2, r3}
    2236:	4690      	mov	r8, r2
    2238:	4699      	mov	r9, r3
    223a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000223c <__libc_init_array>:
    223c:	4b0e      	ldr	r3, [pc, #56]	; (2278 <__libc_init_array+0x3c>)
    223e:	b570      	push	{r4, r5, r6, lr}
    2240:	2500      	movs	r5, #0
    2242:	1c1e      	adds	r6, r3, #0
    2244:	4c0d      	ldr	r4, [pc, #52]	; (227c <__libc_init_array+0x40>)
    2246:	1ae4      	subs	r4, r4, r3
    2248:	10a4      	asrs	r4, r4, #2
    224a:	42a5      	cmp	r5, r4
    224c:	d004      	beq.n	2258 <__libc_init_array+0x1c>
    224e:	00ab      	lsls	r3, r5, #2
    2250:	58f3      	ldr	r3, [r6, r3]
    2252:	4798      	blx	r3
    2254:	3501      	adds	r5, #1
    2256:	e7f8      	b.n	224a <__libc_init_array+0xe>
    2258:	f001 f93a 	bl	34d0 <_init>
    225c:	4b08      	ldr	r3, [pc, #32]	; (2280 <__libc_init_array+0x44>)
    225e:	2500      	movs	r5, #0
    2260:	1c1e      	adds	r6, r3, #0
    2262:	4c08      	ldr	r4, [pc, #32]	; (2284 <__libc_init_array+0x48>)
    2264:	1ae4      	subs	r4, r4, r3
    2266:	10a4      	asrs	r4, r4, #2
    2268:	42a5      	cmp	r5, r4
    226a:	d004      	beq.n	2276 <__libc_init_array+0x3a>
    226c:	00ab      	lsls	r3, r5, #2
    226e:	58f3      	ldr	r3, [r6, r3]
    2270:	4798      	blx	r3
    2272:	3501      	adds	r5, #1
    2274:	e7f8      	b.n	2268 <__libc_init_array+0x2c>
    2276:	bd70      	pop	{r4, r5, r6, pc}
    2278:	000034dc 	.word	0x000034dc
    227c:	000034dc 	.word	0x000034dc
    2280:	000034dc 	.word	0x000034dc
    2284:	000034e0 	.word	0x000034e0

00002288 <memcpy>:
    2288:	2300      	movs	r3, #0
    228a:	b510      	push	{r4, lr}
    228c:	4293      	cmp	r3, r2
    228e:	d003      	beq.n	2298 <memcpy+0x10>
    2290:	5ccc      	ldrb	r4, [r1, r3]
    2292:	54c4      	strb	r4, [r0, r3]
    2294:	3301      	adds	r3, #1
    2296:	e7f9      	b.n	228c <memcpy+0x4>
    2298:	bd10      	pop	{r4, pc}

0000229a <memset>:
    229a:	1c03      	adds	r3, r0, #0
    229c:	1882      	adds	r2, r0, r2
    229e:	4293      	cmp	r3, r2
    22a0:	d002      	beq.n	22a8 <memset+0xe>
    22a2:	7019      	strb	r1, [r3, #0]
    22a4:	3301      	adds	r3, #1
    22a6:	e7fa      	b.n	229e <memset+0x4>
    22a8:	4770      	bx	lr
	...

000022ac <iprintf>:
    22ac:	b40f      	push	{r0, r1, r2, r3}
    22ae:	4b0b      	ldr	r3, [pc, #44]	; (22dc <iprintf+0x30>)
    22b0:	b513      	push	{r0, r1, r4, lr}
    22b2:	681c      	ldr	r4, [r3, #0]
    22b4:	2c00      	cmp	r4, #0
    22b6:	d005      	beq.n	22c4 <iprintf+0x18>
    22b8:	69a3      	ldr	r3, [r4, #24]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d102      	bne.n	22c4 <iprintf+0x18>
    22be:	1c20      	adds	r0, r4, #0
    22c0:	f000 fb38 	bl	2934 <__sinit>
    22c4:	ab05      	add	r3, sp, #20
    22c6:	1c20      	adds	r0, r4, #0
    22c8:	68a1      	ldr	r1, [r4, #8]
    22ca:	9a04      	ldr	r2, [sp, #16]
    22cc:	9301      	str	r3, [sp, #4]
    22ce:	f000 fceb 	bl	2ca8 <_vfiprintf_r>
    22d2:	bc16      	pop	{r1, r2, r4}
    22d4:	bc08      	pop	{r3}
    22d6:	b004      	add	sp, #16
    22d8:	4718      	bx	r3
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	200000d8 	.word	0x200000d8

000022e0 <_puts_r>:
    22e0:	b570      	push	{r4, r5, r6, lr}
    22e2:	1c05      	adds	r5, r0, #0
    22e4:	1c0e      	adds	r6, r1, #0
    22e6:	2800      	cmp	r0, #0
    22e8:	d004      	beq.n	22f4 <_puts_r+0x14>
    22ea:	6983      	ldr	r3, [r0, #24]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d101      	bne.n	22f4 <_puts_r+0x14>
    22f0:	f000 fb20 	bl	2934 <__sinit>
    22f4:	68ac      	ldr	r4, [r5, #8]
    22f6:	89a3      	ldrh	r3, [r4, #12]
    22f8:	071b      	lsls	r3, r3, #28
    22fa:	d502      	bpl.n	2302 <_puts_r+0x22>
    22fc:	6923      	ldr	r3, [r4, #16]
    22fe:	2b00      	cmp	r3, #0
    2300:	d119      	bne.n	2336 <_puts_r+0x56>
    2302:	1c28      	adds	r0, r5, #0
    2304:	1c21      	adds	r1, r4, #0
    2306:	f000 f9a9 	bl	265c <__swsetup_r>
    230a:	2800      	cmp	r0, #0
    230c:	d013      	beq.n	2336 <_puts_r+0x56>
    230e:	2001      	movs	r0, #1
    2310:	4240      	negs	r0, r0
    2312:	e045      	b.n	23a0 <_puts_r+0xc0>
    2314:	7831      	ldrb	r1, [r6, #0]
    2316:	2b00      	cmp	r3, #0
    2318:	da1b      	bge.n	2352 <_puts_r+0x72>
    231a:	69a2      	ldr	r2, [r4, #24]
    231c:	4293      	cmp	r3, r2
    231e:	da11      	bge.n	2344 <_puts_r+0x64>
    2320:	1c22      	adds	r2, r4, #0
    2322:	1c28      	adds	r0, r5, #0
    2324:	f000 f942 	bl	25ac <__swbuf_r>
    2328:	3001      	adds	r0, #1
    232a:	4242      	negs	r2, r0
    232c:	4142      	adcs	r2, r0
    232e:	b2d0      	uxtb	r0, r2
    2330:	2800      	cmp	r0, #0
    2332:	d1ec      	bne.n	230e <_puts_r+0x2e>
    2334:	3601      	adds	r6, #1
    2336:	68a3      	ldr	r3, [r4, #8]
    2338:	7832      	ldrb	r2, [r6, #0]
    233a:	3b01      	subs	r3, #1
    233c:	60a3      	str	r3, [r4, #8]
    233e:	2a00      	cmp	r2, #0
    2340:	d1e8      	bne.n	2314 <_puts_r+0x34>
    2342:	e00c      	b.n	235e <_puts_r+0x7e>
    2344:	6823      	ldr	r3, [r4, #0]
    2346:	7019      	strb	r1, [r3, #0]
    2348:	6823      	ldr	r3, [r4, #0]
    234a:	7819      	ldrb	r1, [r3, #0]
    234c:	290a      	cmp	r1, #10
    234e:	d103      	bne.n	2358 <_puts_r+0x78>
    2350:	e7e6      	b.n	2320 <_puts_r+0x40>
    2352:	6823      	ldr	r3, [r4, #0]
    2354:	7019      	strb	r1, [r3, #0]
    2356:	6823      	ldr	r3, [r4, #0]
    2358:	3301      	adds	r3, #1
    235a:	6023      	str	r3, [r4, #0]
    235c:	e7ea      	b.n	2334 <_puts_r+0x54>
    235e:	2b00      	cmp	r3, #0
    2360:	da17      	bge.n	2392 <_puts_r+0xb2>
    2362:	69a2      	ldr	r2, [r4, #24]
    2364:	4293      	cmp	r3, r2
    2366:	db08      	blt.n	237a <_puts_r+0x9a>
    2368:	230a      	movs	r3, #10
    236a:	6822      	ldr	r2, [r4, #0]
    236c:	7013      	strb	r3, [r2, #0]
    236e:	6823      	ldr	r3, [r4, #0]
    2370:	7819      	ldrb	r1, [r3, #0]
    2372:	290a      	cmp	r1, #10
    2374:	d111      	bne.n	239a <_puts_r+0xba>
    2376:	1c28      	adds	r0, r5, #0
    2378:	e001      	b.n	237e <_puts_r+0x9e>
    237a:	1c28      	adds	r0, r5, #0
    237c:	210a      	movs	r1, #10
    237e:	1c22      	adds	r2, r4, #0
    2380:	f000 f914 	bl	25ac <__swbuf_r>
    2384:	3001      	adds	r0, #1
    2386:	4242      	negs	r2, r0
    2388:	4142      	adcs	r2, r0
    238a:	b2d0      	uxtb	r0, r2
    238c:	2800      	cmp	r0, #0
    238e:	d006      	beq.n	239e <_puts_r+0xbe>
    2390:	e7bd      	b.n	230e <_puts_r+0x2e>
    2392:	230a      	movs	r3, #10
    2394:	6822      	ldr	r2, [r4, #0]
    2396:	7013      	strb	r3, [r2, #0]
    2398:	6823      	ldr	r3, [r4, #0]
    239a:	3301      	adds	r3, #1
    239c:	6023      	str	r3, [r4, #0]
    239e:	200a      	movs	r0, #10
    23a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000023a4 <puts>:
    23a4:	b508      	push	{r3, lr}
    23a6:	4b03      	ldr	r3, [pc, #12]	; (23b4 <puts+0x10>)
    23a8:	1c01      	adds	r1, r0, #0
    23aa:	6818      	ldr	r0, [r3, #0]
    23ac:	f7ff ff98 	bl	22e0 <_puts_r>
    23b0:	bd08      	pop	{r3, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	200000d8 	.word	0x200000d8

000023b8 <srand>:
    23b8:	b538      	push	{r3, r4, r5, lr}
    23ba:	4b10      	ldr	r3, [pc, #64]	; (23fc <srand+0x44>)
    23bc:	1c05      	adds	r5, r0, #0
    23be:	681c      	ldr	r4, [r3, #0]
    23c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23c2:	2b00      	cmp	r3, #0
    23c4:	d115      	bne.n	23f2 <srand+0x3a>
    23c6:	2018      	movs	r0, #24
    23c8:	f000 fb9e 	bl	2b08 <malloc>
    23cc:	4b0c      	ldr	r3, [pc, #48]	; (2400 <srand+0x48>)
    23ce:	63a0      	str	r0, [r4, #56]	; 0x38
    23d0:	8003      	strh	r3, [r0, #0]
    23d2:	4b0c      	ldr	r3, [pc, #48]	; (2404 <srand+0x4c>)
    23d4:	2201      	movs	r2, #1
    23d6:	8043      	strh	r3, [r0, #2]
    23d8:	4b0b      	ldr	r3, [pc, #44]	; (2408 <srand+0x50>)
    23da:	8083      	strh	r3, [r0, #4]
    23dc:	4b0b      	ldr	r3, [pc, #44]	; (240c <srand+0x54>)
    23de:	80c3      	strh	r3, [r0, #6]
    23e0:	4b0b      	ldr	r3, [pc, #44]	; (2410 <srand+0x58>)
    23e2:	8103      	strh	r3, [r0, #8]
    23e4:	2305      	movs	r3, #5
    23e6:	8143      	strh	r3, [r0, #10]
    23e8:	3306      	adds	r3, #6
    23ea:	8183      	strh	r3, [r0, #12]
    23ec:	2300      	movs	r3, #0
    23ee:	6102      	str	r2, [r0, #16]
    23f0:	6143      	str	r3, [r0, #20]
    23f2:	2200      	movs	r2, #0
    23f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23f6:	611d      	str	r5, [r3, #16]
    23f8:	615a      	str	r2, [r3, #20]
    23fa:	bd38      	pop	{r3, r4, r5, pc}
    23fc:	200000d8 	.word	0x200000d8
    2400:	0000330e 	.word	0x0000330e
    2404:	ffffabcd 	.word	0xffffabcd
    2408:	00001234 	.word	0x00001234
    240c:	ffffe66d 	.word	0xffffe66d
    2410:	ffffdeec 	.word	0xffffdeec

00002414 <rand>:
    2414:	4b15      	ldr	r3, [pc, #84]	; (246c <rand+0x58>)
    2416:	b510      	push	{r4, lr}
    2418:	681c      	ldr	r4, [r3, #0]
    241a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    241c:	2b00      	cmp	r3, #0
    241e:	d115      	bne.n	244c <rand+0x38>
    2420:	2018      	movs	r0, #24
    2422:	f000 fb71 	bl	2b08 <malloc>
    2426:	4b12      	ldr	r3, [pc, #72]	; (2470 <rand+0x5c>)
    2428:	63a0      	str	r0, [r4, #56]	; 0x38
    242a:	8003      	strh	r3, [r0, #0]
    242c:	4b11      	ldr	r3, [pc, #68]	; (2474 <rand+0x60>)
    242e:	2201      	movs	r2, #1
    2430:	8043      	strh	r3, [r0, #2]
    2432:	4b11      	ldr	r3, [pc, #68]	; (2478 <rand+0x64>)
    2434:	8083      	strh	r3, [r0, #4]
    2436:	4b11      	ldr	r3, [pc, #68]	; (247c <rand+0x68>)
    2438:	80c3      	strh	r3, [r0, #6]
    243a:	4b11      	ldr	r3, [pc, #68]	; (2480 <rand+0x6c>)
    243c:	8103      	strh	r3, [r0, #8]
    243e:	2305      	movs	r3, #5
    2440:	8143      	strh	r3, [r0, #10]
    2442:	3306      	adds	r3, #6
    2444:	8183      	strh	r3, [r0, #12]
    2446:	2300      	movs	r3, #0
    2448:	6102      	str	r2, [r0, #16]
    244a:	6143      	str	r3, [r0, #20]
    244c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    244e:	4a0d      	ldr	r2, [pc, #52]	; (2484 <rand+0x70>)
    2450:	6920      	ldr	r0, [r4, #16]
    2452:	6961      	ldr	r1, [r4, #20]
    2454:	4b0c      	ldr	r3, [pc, #48]	; (2488 <rand+0x74>)
    2456:	f7ff fec7 	bl	21e8 <__aeabi_lmul>
    245a:	2201      	movs	r2, #1
    245c:	2300      	movs	r3, #0
    245e:	1880      	adds	r0, r0, r2
    2460:	4159      	adcs	r1, r3
    2462:	6120      	str	r0, [r4, #16]
    2464:	6161      	str	r1, [r4, #20]
    2466:	0048      	lsls	r0, r1, #1
    2468:	0840      	lsrs	r0, r0, #1
    246a:	bd10      	pop	{r4, pc}
    246c:	200000d8 	.word	0x200000d8
    2470:	0000330e 	.word	0x0000330e
    2474:	ffffabcd 	.word	0xffffabcd
    2478:	00001234 	.word	0x00001234
    247c:	ffffe66d 	.word	0xffffe66d
    2480:	ffffdeec 	.word	0xffffdeec
    2484:	4c957f2d 	.word	0x4c957f2d
    2488:	5851f42d 	.word	0x5851f42d

0000248c <setbuf>:
    248c:	b508      	push	{r3, lr}
    248e:	424a      	negs	r2, r1
    2490:	414a      	adcs	r2, r1
    2492:	2380      	movs	r3, #128	; 0x80
    2494:	0052      	lsls	r2, r2, #1
    2496:	00db      	lsls	r3, r3, #3
    2498:	f000 f802 	bl	24a0 <setvbuf>
    249c:	bd08      	pop	{r3, pc}
	...

000024a0 <setvbuf>:
    24a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24a2:	1c1e      	adds	r6, r3, #0
    24a4:	4b3c      	ldr	r3, [pc, #240]	; (2598 <setvbuf+0xf8>)
    24a6:	1c04      	adds	r4, r0, #0
    24a8:	681d      	ldr	r5, [r3, #0]
    24aa:	1c0f      	adds	r7, r1, #0
    24ac:	9201      	str	r2, [sp, #4]
    24ae:	2d00      	cmp	r5, #0
    24b0:	d005      	beq.n	24be <setvbuf+0x1e>
    24b2:	69ab      	ldr	r3, [r5, #24]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d102      	bne.n	24be <setvbuf+0x1e>
    24b8:	1c28      	adds	r0, r5, #0
    24ba:	f000 fa3b 	bl	2934 <__sinit>
    24be:	4b37      	ldr	r3, [pc, #220]	; (259c <setvbuf+0xfc>)
    24c0:	429c      	cmp	r4, r3
    24c2:	d101      	bne.n	24c8 <setvbuf+0x28>
    24c4:	686c      	ldr	r4, [r5, #4]
    24c6:	e008      	b.n	24da <setvbuf+0x3a>
    24c8:	4b35      	ldr	r3, [pc, #212]	; (25a0 <setvbuf+0x100>)
    24ca:	429c      	cmp	r4, r3
    24cc:	d101      	bne.n	24d2 <setvbuf+0x32>
    24ce:	68ac      	ldr	r4, [r5, #8]
    24d0:	e003      	b.n	24da <setvbuf+0x3a>
    24d2:	4b34      	ldr	r3, [pc, #208]	; (25a4 <setvbuf+0x104>)
    24d4:	429c      	cmp	r4, r3
    24d6:	d100      	bne.n	24da <setvbuf+0x3a>
    24d8:	68ec      	ldr	r4, [r5, #12]
    24da:	9b01      	ldr	r3, [sp, #4]
    24dc:	2b02      	cmp	r3, #2
    24de:	d858      	bhi.n	2592 <setvbuf+0xf2>
    24e0:	2e00      	cmp	r6, #0
    24e2:	db56      	blt.n	2592 <setvbuf+0xf2>
    24e4:	1c28      	adds	r0, r5, #0
    24e6:	1c21      	adds	r1, r4, #0
    24e8:	f000 f9b6 	bl	2858 <_fflush_r>
    24ec:	2300      	movs	r3, #0
    24ee:	6063      	str	r3, [r4, #4]
    24f0:	61a3      	str	r3, [r4, #24]
    24f2:	89a3      	ldrh	r3, [r4, #12]
    24f4:	061b      	lsls	r3, r3, #24
    24f6:	d503      	bpl.n	2500 <setvbuf+0x60>
    24f8:	1c28      	adds	r0, r5, #0
    24fa:	6921      	ldr	r1, [r4, #16]
    24fc:	f000 fb0e 	bl	2b1c <_free_r>
    2500:	2283      	movs	r2, #131	; 0x83
    2502:	89a3      	ldrh	r3, [r4, #12]
    2504:	4393      	bics	r3, r2
    2506:	81a3      	strh	r3, [r4, #12]
    2508:	9b01      	ldr	r3, [sp, #4]
    250a:	2b02      	cmp	r3, #2
    250c:	d013      	beq.n	2536 <setvbuf+0x96>
    250e:	2f00      	cmp	r7, #0
    2510:	d125      	bne.n	255e <setvbuf+0xbe>
    2512:	2e00      	cmp	r6, #0
    2514:	d101      	bne.n	251a <setvbuf+0x7a>
    2516:	2680      	movs	r6, #128	; 0x80
    2518:	00f6      	lsls	r6, r6, #3
    251a:	1c30      	adds	r0, r6, #0
    251c:	f000 faf4 	bl	2b08 <malloc>
    2520:	1e07      	subs	r7, r0, #0
    2522:	d118      	bne.n	2556 <setvbuf+0xb6>
    2524:	2080      	movs	r0, #128	; 0x80
    2526:	00c0      	lsls	r0, r0, #3
    2528:	f000 faee 	bl	2b08 <malloc>
    252c:	1e07      	subs	r7, r0, #0
    252e:	d110      	bne.n	2552 <setvbuf+0xb2>
    2530:	2001      	movs	r0, #1
    2532:	4240      	negs	r0, r0
    2534:	e000      	b.n	2538 <setvbuf+0x98>
    2536:	2000      	movs	r0, #0
    2538:	2202      	movs	r2, #2
    253a:	89a3      	ldrh	r3, [r4, #12]
    253c:	4313      	orrs	r3, r2
    253e:	81a3      	strh	r3, [r4, #12]
    2540:	2300      	movs	r3, #0
    2542:	60a3      	str	r3, [r4, #8]
    2544:	1c23      	adds	r3, r4, #0
    2546:	3347      	adds	r3, #71	; 0x47
    2548:	6023      	str	r3, [r4, #0]
    254a:	6123      	str	r3, [r4, #16]
    254c:	2301      	movs	r3, #1
    254e:	6163      	str	r3, [r4, #20]
    2550:	e021      	b.n	2596 <setvbuf+0xf6>
    2552:	2680      	movs	r6, #128	; 0x80
    2554:	00f6      	lsls	r6, r6, #3
    2556:	2280      	movs	r2, #128	; 0x80
    2558:	89a3      	ldrh	r3, [r4, #12]
    255a:	4313      	orrs	r3, r2
    255c:	81a3      	strh	r3, [r4, #12]
    255e:	9b01      	ldr	r3, [sp, #4]
    2560:	2b01      	cmp	r3, #1
    2562:	d105      	bne.n	2570 <setvbuf+0xd0>
    2564:	89a3      	ldrh	r3, [r4, #12]
    2566:	9a01      	ldr	r2, [sp, #4]
    2568:	431a      	orrs	r2, r3
    256a:	4273      	negs	r3, r6
    256c:	81a2      	strh	r2, [r4, #12]
    256e:	61a3      	str	r3, [r4, #24]
    2570:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <setvbuf+0x108>)
    2572:	2000      	movs	r0, #0
    2574:	62ab      	str	r3, [r5, #40]	; 0x28
    2576:	89a2      	ldrh	r2, [r4, #12]
    2578:	6027      	str	r7, [r4, #0]
    257a:	6127      	str	r7, [r4, #16]
    257c:	6166      	str	r6, [r4, #20]
    257e:	0713      	lsls	r3, r2, #28
    2580:	d509      	bpl.n	2596 <setvbuf+0xf6>
    2582:	2303      	movs	r3, #3
    2584:	401a      	ands	r2, r3
    2586:	4253      	negs	r3, r2
    2588:	4153      	adcs	r3, r2
    258a:	425b      	negs	r3, r3
    258c:	401e      	ands	r6, r3
    258e:	60a6      	str	r6, [r4, #8]
    2590:	e001      	b.n	2596 <setvbuf+0xf6>
    2592:	2001      	movs	r0, #1
    2594:	4240      	negs	r0, r0
    2596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2598:	200000d8 	.word	0x200000d8
    259c:	0000343c 	.word	0x0000343c
    25a0:	0000345c 	.word	0x0000345c
    25a4:	0000347c 	.word	0x0000347c
    25a8:	000028b1 	.word	0x000028b1

000025ac <__swbuf_r>:
    25ac:	b570      	push	{r4, r5, r6, lr}
    25ae:	1c05      	adds	r5, r0, #0
    25b0:	1c0e      	adds	r6, r1, #0
    25b2:	1c14      	adds	r4, r2, #0
    25b4:	2800      	cmp	r0, #0
    25b6:	d004      	beq.n	25c2 <__swbuf_r+0x16>
    25b8:	6983      	ldr	r3, [r0, #24]
    25ba:	2b00      	cmp	r3, #0
    25bc:	d101      	bne.n	25c2 <__swbuf_r+0x16>
    25be:	f000 f9b9 	bl	2934 <__sinit>
    25c2:	4b23      	ldr	r3, [pc, #140]	; (2650 <__swbuf_r+0xa4>)
    25c4:	429c      	cmp	r4, r3
    25c6:	d101      	bne.n	25cc <__swbuf_r+0x20>
    25c8:	686c      	ldr	r4, [r5, #4]
    25ca:	e008      	b.n	25de <__swbuf_r+0x32>
    25cc:	4b21      	ldr	r3, [pc, #132]	; (2654 <__swbuf_r+0xa8>)
    25ce:	429c      	cmp	r4, r3
    25d0:	d101      	bne.n	25d6 <__swbuf_r+0x2a>
    25d2:	68ac      	ldr	r4, [r5, #8]
    25d4:	e003      	b.n	25de <__swbuf_r+0x32>
    25d6:	4b20      	ldr	r3, [pc, #128]	; (2658 <__swbuf_r+0xac>)
    25d8:	429c      	cmp	r4, r3
    25da:	d100      	bne.n	25de <__swbuf_r+0x32>
    25dc:	68ec      	ldr	r4, [r5, #12]
    25de:	69a3      	ldr	r3, [r4, #24]
    25e0:	60a3      	str	r3, [r4, #8]
    25e2:	89a3      	ldrh	r3, [r4, #12]
    25e4:	071b      	lsls	r3, r3, #28
    25e6:	d50a      	bpl.n	25fe <__swbuf_r+0x52>
    25e8:	6923      	ldr	r3, [r4, #16]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d007      	beq.n	25fe <__swbuf_r+0x52>
    25ee:	6823      	ldr	r3, [r4, #0]
    25f0:	6922      	ldr	r2, [r4, #16]
    25f2:	b2f6      	uxtb	r6, r6
    25f4:	1a98      	subs	r0, r3, r2
    25f6:	6963      	ldr	r3, [r4, #20]
    25f8:	4298      	cmp	r0, r3
    25fa:	db0f      	blt.n	261c <__swbuf_r+0x70>
    25fc:	e008      	b.n	2610 <__swbuf_r+0x64>
    25fe:	1c28      	adds	r0, r5, #0
    2600:	1c21      	adds	r1, r4, #0
    2602:	f000 f82b 	bl	265c <__swsetup_r>
    2606:	2800      	cmp	r0, #0
    2608:	d0f1      	beq.n	25ee <__swbuf_r+0x42>
    260a:	2001      	movs	r0, #1
    260c:	4240      	negs	r0, r0
    260e:	e01d      	b.n	264c <__swbuf_r+0xa0>
    2610:	1c28      	adds	r0, r5, #0
    2612:	1c21      	adds	r1, r4, #0
    2614:	f000 f920 	bl	2858 <_fflush_r>
    2618:	2800      	cmp	r0, #0
    261a:	d1f6      	bne.n	260a <__swbuf_r+0x5e>
    261c:	68a3      	ldr	r3, [r4, #8]
    261e:	3001      	adds	r0, #1
    2620:	3b01      	subs	r3, #1
    2622:	60a3      	str	r3, [r4, #8]
    2624:	6823      	ldr	r3, [r4, #0]
    2626:	1c5a      	adds	r2, r3, #1
    2628:	6022      	str	r2, [r4, #0]
    262a:	701e      	strb	r6, [r3, #0]
    262c:	6963      	ldr	r3, [r4, #20]
    262e:	4298      	cmp	r0, r3
    2630:	d005      	beq.n	263e <__swbuf_r+0x92>
    2632:	89a3      	ldrh	r3, [r4, #12]
    2634:	1c30      	adds	r0, r6, #0
    2636:	07db      	lsls	r3, r3, #31
    2638:	d508      	bpl.n	264c <__swbuf_r+0xa0>
    263a:	2e0a      	cmp	r6, #10
    263c:	d106      	bne.n	264c <__swbuf_r+0xa0>
    263e:	1c28      	adds	r0, r5, #0
    2640:	1c21      	adds	r1, r4, #0
    2642:	f000 f909 	bl	2858 <_fflush_r>
    2646:	2800      	cmp	r0, #0
    2648:	d1df      	bne.n	260a <__swbuf_r+0x5e>
    264a:	1c30      	adds	r0, r6, #0
    264c:	bd70      	pop	{r4, r5, r6, pc}
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	0000343c 	.word	0x0000343c
    2654:	0000345c 	.word	0x0000345c
    2658:	0000347c 	.word	0x0000347c

0000265c <__swsetup_r>:
    265c:	4b35      	ldr	r3, [pc, #212]	; (2734 <__swsetup_r+0xd8>)
    265e:	b570      	push	{r4, r5, r6, lr}
    2660:	681d      	ldr	r5, [r3, #0]
    2662:	1c06      	adds	r6, r0, #0
    2664:	1c0c      	adds	r4, r1, #0
    2666:	2d00      	cmp	r5, #0
    2668:	d005      	beq.n	2676 <__swsetup_r+0x1a>
    266a:	69ab      	ldr	r3, [r5, #24]
    266c:	2b00      	cmp	r3, #0
    266e:	d102      	bne.n	2676 <__swsetup_r+0x1a>
    2670:	1c28      	adds	r0, r5, #0
    2672:	f000 f95f 	bl	2934 <__sinit>
    2676:	4b30      	ldr	r3, [pc, #192]	; (2738 <__swsetup_r+0xdc>)
    2678:	429c      	cmp	r4, r3
    267a:	d101      	bne.n	2680 <__swsetup_r+0x24>
    267c:	686c      	ldr	r4, [r5, #4]
    267e:	e008      	b.n	2692 <__swsetup_r+0x36>
    2680:	4b2e      	ldr	r3, [pc, #184]	; (273c <__swsetup_r+0xe0>)
    2682:	429c      	cmp	r4, r3
    2684:	d101      	bne.n	268a <__swsetup_r+0x2e>
    2686:	68ac      	ldr	r4, [r5, #8]
    2688:	e003      	b.n	2692 <__swsetup_r+0x36>
    268a:	4b2d      	ldr	r3, [pc, #180]	; (2740 <__swsetup_r+0xe4>)
    268c:	429c      	cmp	r4, r3
    268e:	d100      	bne.n	2692 <__swsetup_r+0x36>
    2690:	68ec      	ldr	r4, [r5, #12]
    2692:	89a3      	ldrh	r3, [r4, #12]
    2694:	b29a      	uxth	r2, r3
    2696:	0711      	lsls	r1, r2, #28
    2698:	d423      	bmi.n	26e2 <__swsetup_r+0x86>
    269a:	06d1      	lsls	r1, r2, #27
    269c:	d407      	bmi.n	26ae <__swsetup_r+0x52>
    269e:	2209      	movs	r2, #9
    26a0:	2001      	movs	r0, #1
    26a2:	6032      	str	r2, [r6, #0]
    26a4:	3237      	adds	r2, #55	; 0x37
    26a6:	4313      	orrs	r3, r2
    26a8:	81a3      	strh	r3, [r4, #12]
    26aa:	4240      	negs	r0, r0
    26ac:	e040      	b.n	2730 <__swsetup_r+0xd4>
    26ae:	0753      	lsls	r3, r2, #29
    26b0:	d513      	bpl.n	26da <__swsetup_r+0x7e>
    26b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    26b4:	2900      	cmp	r1, #0
    26b6:	d008      	beq.n	26ca <__swsetup_r+0x6e>
    26b8:	1c23      	adds	r3, r4, #0
    26ba:	3344      	adds	r3, #68	; 0x44
    26bc:	4299      	cmp	r1, r3
    26be:	d002      	beq.n	26c6 <__swsetup_r+0x6a>
    26c0:	1c30      	adds	r0, r6, #0
    26c2:	f000 fa2b 	bl	2b1c <_free_r>
    26c6:	2300      	movs	r3, #0
    26c8:	6363      	str	r3, [r4, #52]	; 0x34
    26ca:	2224      	movs	r2, #36	; 0x24
    26cc:	89a3      	ldrh	r3, [r4, #12]
    26ce:	4393      	bics	r3, r2
    26d0:	81a3      	strh	r3, [r4, #12]
    26d2:	2300      	movs	r3, #0
    26d4:	6063      	str	r3, [r4, #4]
    26d6:	6923      	ldr	r3, [r4, #16]
    26d8:	6023      	str	r3, [r4, #0]
    26da:	2208      	movs	r2, #8
    26dc:	89a3      	ldrh	r3, [r4, #12]
    26de:	4313      	orrs	r3, r2
    26e0:	81a3      	strh	r3, [r4, #12]
    26e2:	6923      	ldr	r3, [r4, #16]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d10b      	bne.n	2700 <__swsetup_r+0xa4>
    26e8:	23a0      	movs	r3, #160	; 0xa0
    26ea:	89a2      	ldrh	r2, [r4, #12]
    26ec:	009b      	lsls	r3, r3, #2
    26ee:	4013      	ands	r3, r2
    26f0:	2280      	movs	r2, #128	; 0x80
    26f2:	0092      	lsls	r2, r2, #2
    26f4:	4293      	cmp	r3, r2
    26f6:	d003      	beq.n	2700 <__swsetup_r+0xa4>
    26f8:	1c30      	adds	r0, r6, #0
    26fa:	1c21      	adds	r1, r4, #0
    26fc:	f000 f9ac 	bl	2a58 <__smakebuf_r>
    2700:	2301      	movs	r3, #1
    2702:	89a2      	ldrh	r2, [r4, #12]
    2704:	4013      	ands	r3, r2
    2706:	d005      	beq.n	2714 <__swsetup_r+0xb8>
    2708:	2300      	movs	r3, #0
    270a:	60a3      	str	r3, [r4, #8]
    270c:	6963      	ldr	r3, [r4, #20]
    270e:	425b      	negs	r3, r3
    2710:	61a3      	str	r3, [r4, #24]
    2712:	e003      	b.n	271c <__swsetup_r+0xc0>
    2714:	0791      	lsls	r1, r2, #30
    2716:	d400      	bmi.n	271a <__swsetup_r+0xbe>
    2718:	6963      	ldr	r3, [r4, #20]
    271a:	60a3      	str	r3, [r4, #8]
    271c:	2000      	movs	r0, #0
    271e:	6923      	ldr	r3, [r4, #16]
    2720:	4283      	cmp	r3, r0
    2722:	d105      	bne.n	2730 <__swsetup_r+0xd4>
    2724:	0613      	lsls	r3, r2, #24
    2726:	d503      	bpl.n	2730 <__swsetup_r+0xd4>
    2728:	2340      	movs	r3, #64	; 0x40
    272a:	431a      	orrs	r2, r3
    272c:	81a2      	strh	r2, [r4, #12]
    272e:	3801      	subs	r0, #1
    2730:	bd70      	pop	{r4, r5, r6, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	200000d8 	.word	0x200000d8
    2738:	0000343c 	.word	0x0000343c
    273c:	0000345c 	.word	0x0000345c
    2740:	0000347c 	.word	0x0000347c

00002744 <__sflush_r>:
    2744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2746:	898a      	ldrh	r2, [r1, #12]
    2748:	1c05      	adds	r5, r0, #0
    274a:	1c0c      	adds	r4, r1, #0
    274c:	0713      	lsls	r3, r2, #28
    274e:	d45e      	bmi.n	280e <__sflush_r+0xca>
    2750:	684b      	ldr	r3, [r1, #4]
    2752:	2b00      	cmp	r3, #0
    2754:	dc02      	bgt.n	275c <__sflush_r+0x18>
    2756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2758:	2b00      	cmp	r3, #0
    275a:	dd1a      	ble.n	2792 <__sflush_r+0x4e>
    275c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    275e:	2f00      	cmp	r7, #0
    2760:	d017      	beq.n	2792 <__sflush_r+0x4e>
    2762:	2300      	movs	r3, #0
    2764:	682e      	ldr	r6, [r5, #0]
    2766:	602b      	str	r3, [r5, #0]
    2768:	2380      	movs	r3, #128	; 0x80
    276a:	015b      	lsls	r3, r3, #5
    276c:	401a      	ands	r2, r3
    276e:	d001      	beq.n	2774 <__sflush_r+0x30>
    2770:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2772:	e015      	b.n	27a0 <__sflush_r+0x5c>
    2774:	1c28      	adds	r0, r5, #0
    2776:	6a21      	ldr	r1, [r4, #32]
    2778:	2301      	movs	r3, #1
    277a:	47b8      	blx	r7
    277c:	1c02      	adds	r2, r0, #0
    277e:	1c43      	adds	r3, r0, #1
    2780:	d10e      	bne.n	27a0 <__sflush_r+0x5c>
    2782:	682b      	ldr	r3, [r5, #0]
    2784:	2b00      	cmp	r3, #0
    2786:	d00b      	beq.n	27a0 <__sflush_r+0x5c>
    2788:	2b1d      	cmp	r3, #29
    278a:	d001      	beq.n	2790 <__sflush_r+0x4c>
    278c:	2b16      	cmp	r3, #22
    278e:	d102      	bne.n	2796 <__sflush_r+0x52>
    2790:	602e      	str	r6, [r5, #0]
    2792:	2000      	movs	r0, #0
    2794:	e05e      	b.n	2854 <__sflush_r+0x110>
    2796:	2140      	movs	r1, #64	; 0x40
    2798:	89a3      	ldrh	r3, [r4, #12]
    279a:	430b      	orrs	r3, r1
    279c:	81a3      	strh	r3, [r4, #12]
    279e:	e059      	b.n	2854 <__sflush_r+0x110>
    27a0:	89a3      	ldrh	r3, [r4, #12]
    27a2:	075b      	lsls	r3, r3, #29
    27a4:	d506      	bpl.n	27b4 <__sflush_r+0x70>
    27a6:	6863      	ldr	r3, [r4, #4]
    27a8:	1ad2      	subs	r2, r2, r3
    27aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    27ac:	2b00      	cmp	r3, #0
    27ae:	d001      	beq.n	27b4 <__sflush_r+0x70>
    27b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    27b2:	1ad2      	subs	r2, r2, r3
    27b4:	2300      	movs	r3, #0
    27b6:	1c28      	adds	r0, r5, #0
    27b8:	6a21      	ldr	r1, [r4, #32]
    27ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    27bc:	47b8      	blx	r7
    27be:	89a3      	ldrh	r3, [r4, #12]
    27c0:	1c42      	adds	r2, r0, #1
    27c2:	d106      	bne.n	27d2 <__sflush_r+0x8e>
    27c4:	682a      	ldr	r2, [r5, #0]
    27c6:	2a00      	cmp	r2, #0
    27c8:	d003      	beq.n	27d2 <__sflush_r+0x8e>
    27ca:	2a1d      	cmp	r2, #29
    27cc:	d001      	beq.n	27d2 <__sflush_r+0x8e>
    27ce:	2a16      	cmp	r2, #22
    27d0:	d119      	bne.n	2806 <__sflush_r+0xc2>
    27d2:	2200      	movs	r2, #0
    27d4:	6062      	str	r2, [r4, #4]
    27d6:	6922      	ldr	r2, [r4, #16]
    27d8:	6022      	str	r2, [r4, #0]
    27da:	04db      	lsls	r3, r3, #19
    27dc:	d505      	bpl.n	27ea <__sflush_r+0xa6>
    27de:	1c43      	adds	r3, r0, #1
    27e0:	d102      	bne.n	27e8 <__sflush_r+0xa4>
    27e2:	682b      	ldr	r3, [r5, #0]
    27e4:	2b00      	cmp	r3, #0
    27e6:	d100      	bne.n	27ea <__sflush_r+0xa6>
    27e8:	6560      	str	r0, [r4, #84]	; 0x54
    27ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    27ec:	602e      	str	r6, [r5, #0]
    27ee:	2900      	cmp	r1, #0
    27f0:	d0cf      	beq.n	2792 <__sflush_r+0x4e>
    27f2:	1c23      	adds	r3, r4, #0
    27f4:	3344      	adds	r3, #68	; 0x44
    27f6:	4299      	cmp	r1, r3
    27f8:	d002      	beq.n	2800 <__sflush_r+0xbc>
    27fa:	1c28      	adds	r0, r5, #0
    27fc:	f000 f98e 	bl	2b1c <_free_r>
    2800:	2000      	movs	r0, #0
    2802:	6360      	str	r0, [r4, #52]	; 0x34
    2804:	e026      	b.n	2854 <__sflush_r+0x110>
    2806:	2240      	movs	r2, #64	; 0x40
    2808:	4313      	orrs	r3, r2
    280a:	81a3      	strh	r3, [r4, #12]
    280c:	e022      	b.n	2854 <__sflush_r+0x110>
    280e:	690f      	ldr	r7, [r1, #16]
    2810:	2f00      	cmp	r7, #0
    2812:	d0be      	beq.n	2792 <__sflush_r+0x4e>
    2814:	680b      	ldr	r3, [r1, #0]
    2816:	600f      	str	r7, [r1, #0]
    2818:	1bdb      	subs	r3, r3, r7
    281a:	9301      	str	r3, [sp, #4]
    281c:	2300      	movs	r3, #0
    281e:	0792      	lsls	r2, r2, #30
    2820:	d100      	bne.n	2824 <__sflush_r+0xe0>
    2822:	694b      	ldr	r3, [r1, #20]
    2824:	60a3      	str	r3, [r4, #8]
    2826:	9b01      	ldr	r3, [sp, #4]
    2828:	2b00      	cmp	r3, #0
    282a:	ddb2      	ble.n	2792 <__sflush_r+0x4e>
    282c:	1c28      	adds	r0, r5, #0
    282e:	6a21      	ldr	r1, [r4, #32]
    2830:	1c3a      	adds	r2, r7, #0
    2832:	9b01      	ldr	r3, [sp, #4]
    2834:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2836:	47b0      	blx	r6
    2838:	2800      	cmp	r0, #0
    283a:	dc06      	bgt.n	284a <__sflush_r+0x106>
    283c:	2240      	movs	r2, #64	; 0x40
    283e:	2001      	movs	r0, #1
    2840:	89a3      	ldrh	r3, [r4, #12]
    2842:	4240      	negs	r0, r0
    2844:	4313      	orrs	r3, r2
    2846:	81a3      	strh	r3, [r4, #12]
    2848:	e004      	b.n	2854 <__sflush_r+0x110>
    284a:	9b01      	ldr	r3, [sp, #4]
    284c:	183f      	adds	r7, r7, r0
    284e:	1a1b      	subs	r3, r3, r0
    2850:	9301      	str	r3, [sp, #4]
    2852:	e7e8      	b.n	2826 <__sflush_r+0xe2>
    2854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002858 <_fflush_r>:
    2858:	b538      	push	{r3, r4, r5, lr}
    285a:	690b      	ldr	r3, [r1, #16]
    285c:	1c05      	adds	r5, r0, #0
    285e:	1c0c      	adds	r4, r1, #0
    2860:	2b00      	cmp	r3, #0
    2862:	d101      	bne.n	2868 <_fflush_r+0x10>
    2864:	2000      	movs	r0, #0
    2866:	e01c      	b.n	28a2 <_fflush_r+0x4a>
    2868:	2800      	cmp	r0, #0
    286a:	d004      	beq.n	2876 <_fflush_r+0x1e>
    286c:	6983      	ldr	r3, [r0, #24]
    286e:	2b00      	cmp	r3, #0
    2870:	d101      	bne.n	2876 <_fflush_r+0x1e>
    2872:	f000 f85f 	bl	2934 <__sinit>
    2876:	4b0b      	ldr	r3, [pc, #44]	; (28a4 <_fflush_r+0x4c>)
    2878:	429c      	cmp	r4, r3
    287a:	d101      	bne.n	2880 <_fflush_r+0x28>
    287c:	686c      	ldr	r4, [r5, #4]
    287e:	e008      	b.n	2892 <_fflush_r+0x3a>
    2880:	4b09      	ldr	r3, [pc, #36]	; (28a8 <_fflush_r+0x50>)
    2882:	429c      	cmp	r4, r3
    2884:	d101      	bne.n	288a <_fflush_r+0x32>
    2886:	68ac      	ldr	r4, [r5, #8]
    2888:	e003      	b.n	2892 <_fflush_r+0x3a>
    288a:	4b08      	ldr	r3, [pc, #32]	; (28ac <_fflush_r+0x54>)
    288c:	429c      	cmp	r4, r3
    288e:	d100      	bne.n	2892 <_fflush_r+0x3a>
    2890:	68ec      	ldr	r4, [r5, #12]
    2892:	220c      	movs	r2, #12
    2894:	5ea3      	ldrsh	r3, [r4, r2]
    2896:	2b00      	cmp	r3, #0
    2898:	d0e4      	beq.n	2864 <_fflush_r+0xc>
    289a:	1c28      	adds	r0, r5, #0
    289c:	1c21      	adds	r1, r4, #0
    289e:	f7ff ff51 	bl	2744 <__sflush_r>
    28a2:	bd38      	pop	{r3, r4, r5, pc}
    28a4:	0000343c 	.word	0x0000343c
    28a8:	0000345c 	.word	0x0000345c
    28ac:	0000347c 	.word	0x0000347c

000028b0 <_cleanup_r>:
    28b0:	b508      	push	{r3, lr}
    28b2:	4902      	ldr	r1, [pc, #8]	; (28bc <_cleanup_r+0xc>)
    28b4:	f000 f8ae 	bl	2a14 <_fwalk_reent>
    28b8:	bd08      	pop	{r3, pc}
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	00002859 	.word	0x00002859

000028c0 <std.isra.0>:
    28c0:	2300      	movs	r3, #0
    28c2:	b510      	push	{r4, lr}
    28c4:	1c04      	adds	r4, r0, #0
    28c6:	6003      	str	r3, [r0, #0]
    28c8:	6043      	str	r3, [r0, #4]
    28ca:	6083      	str	r3, [r0, #8]
    28cc:	8181      	strh	r1, [r0, #12]
    28ce:	6643      	str	r3, [r0, #100]	; 0x64
    28d0:	81c2      	strh	r2, [r0, #14]
    28d2:	6103      	str	r3, [r0, #16]
    28d4:	6143      	str	r3, [r0, #20]
    28d6:	6183      	str	r3, [r0, #24]
    28d8:	1c19      	adds	r1, r3, #0
    28da:	2208      	movs	r2, #8
    28dc:	305c      	adds	r0, #92	; 0x5c
    28de:	f7ff fcdc 	bl	229a <memset>
    28e2:	4b05      	ldr	r3, [pc, #20]	; (28f8 <std.isra.0+0x38>)
    28e4:	6224      	str	r4, [r4, #32]
    28e6:	6263      	str	r3, [r4, #36]	; 0x24
    28e8:	4b04      	ldr	r3, [pc, #16]	; (28fc <std.isra.0+0x3c>)
    28ea:	62a3      	str	r3, [r4, #40]	; 0x28
    28ec:	4b04      	ldr	r3, [pc, #16]	; (2900 <std.isra.0+0x40>)
    28ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    28f0:	4b04      	ldr	r3, [pc, #16]	; (2904 <std.isra.0+0x44>)
    28f2:	6323      	str	r3, [r4, #48]	; 0x30
    28f4:	bd10      	pop	{r4, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	000031f9 	.word	0x000031f9
    28fc:	00003221 	.word	0x00003221
    2900:	00003259 	.word	0x00003259
    2904:	00003285 	.word	0x00003285

00002908 <__sfmoreglue>:
    2908:	b570      	push	{r4, r5, r6, lr}
    290a:	2568      	movs	r5, #104	; 0x68
    290c:	1e4b      	subs	r3, r1, #1
    290e:	435d      	muls	r5, r3
    2910:	1c0e      	adds	r6, r1, #0
    2912:	1c29      	adds	r1, r5, #0
    2914:	3174      	adds	r1, #116	; 0x74
    2916:	f000 f947 	bl	2ba8 <_malloc_r>
    291a:	1e04      	subs	r4, r0, #0
    291c:	d008      	beq.n	2930 <__sfmoreglue+0x28>
    291e:	2100      	movs	r1, #0
    2920:	1c2a      	adds	r2, r5, #0
    2922:	6001      	str	r1, [r0, #0]
    2924:	6046      	str	r6, [r0, #4]
    2926:	300c      	adds	r0, #12
    2928:	60a0      	str	r0, [r4, #8]
    292a:	3268      	adds	r2, #104	; 0x68
    292c:	f7ff fcb5 	bl	229a <memset>
    2930:	1c20      	adds	r0, r4, #0
    2932:	bd70      	pop	{r4, r5, r6, pc}

00002934 <__sinit>:
    2934:	6983      	ldr	r3, [r0, #24]
    2936:	b513      	push	{r0, r1, r4, lr}
    2938:	2b00      	cmp	r3, #0
    293a:	d128      	bne.n	298e <__sinit+0x5a>
    293c:	6483      	str	r3, [r0, #72]	; 0x48
    293e:	64c3      	str	r3, [r0, #76]	; 0x4c
    2940:	6503      	str	r3, [r0, #80]	; 0x50
    2942:	4b13      	ldr	r3, [pc, #76]	; (2990 <__sinit+0x5c>)
    2944:	4a13      	ldr	r2, [pc, #76]	; (2994 <__sinit+0x60>)
    2946:	681b      	ldr	r3, [r3, #0]
    2948:	6282      	str	r2, [r0, #40]	; 0x28
    294a:	9301      	str	r3, [sp, #4]
    294c:	4298      	cmp	r0, r3
    294e:	d101      	bne.n	2954 <__sinit+0x20>
    2950:	2301      	movs	r3, #1
    2952:	6183      	str	r3, [r0, #24]
    2954:	1c04      	adds	r4, r0, #0
    2956:	f000 f81f 	bl	2998 <__sfp>
    295a:	6060      	str	r0, [r4, #4]
    295c:	1c20      	adds	r0, r4, #0
    295e:	f000 f81b 	bl	2998 <__sfp>
    2962:	60a0      	str	r0, [r4, #8]
    2964:	1c20      	adds	r0, r4, #0
    2966:	f000 f817 	bl	2998 <__sfp>
    296a:	2104      	movs	r1, #4
    296c:	60e0      	str	r0, [r4, #12]
    296e:	2200      	movs	r2, #0
    2970:	6860      	ldr	r0, [r4, #4]
    2972:	f7ff ffa5 	bl	28c0 <std.isra.0>
    2976:	68a0      	ldr	r0, [r4, #8]
    2978:	2109      	movs	r1, #9
    297a:	2201      	movs	r2, #1
    297c:	f7ff ffa0 	bl	28c0 <std.isra.0>
    2980:	68e0      	ldr	r0, [r4, #12]
    2982:	2112      	movs	r1, #18
    2984:	2202      	movs	r2, #2
    2986:	f7ff ff9b 	bl	28c0 <std.isra.0>
    298a:	2301      	movs	r3, #1
    298c:	61a3      	str	r3, [r4, #24]
    298e:	bd13      	pop	{r0, r1, r4, pc}
    2990:	00003438 	.word	0x00003438
    2994:	000028b1 	.word	0x000028b1

00002998 <__sfp>:
    2998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    299a:	4b1d      	ldr	r3, [pc, #116]	; (2a10 <__sfp+0x78>)
    299c:	1c06      	adds	r6, r0, #0
    299e:	681d      	ldr	r5, [r3, #0]
    29a0:	69ab      	ldr	r3, [r5, #24]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d102      	bne.n	29ac <__sfp+0x14>
    29a6:	1c28      	adds	r0, r5, #0
    29a8:	f7ff ffc4 	bl	2934 <__sinit>
    29ac:	3548      	adds	r5, #72	; 0x48
    29ae:	68ac      	ldr	r4, [r5, #8]
    29b0:	686b      	ldr	r3, [r5, #4]
    29b2:	3b01      	subs	r3, #1
    29b4:	d405      	bmi.n	29c2 <__sfp+0x2a>
    29b6:	220c      	movs	r2, #12
    29b8:	5ea7      	ldrsh	r7, [r4, r2]
    29ba:	2f00      	cmp	r7, #0
    29bc:	d010      	beq.n	29e0 <__sfp+0x48>
    29be:	3468      	adds	r4, #104	; 0x68
    29c0:	e7f7      	b.n	29b2 <__sfp+0x1a>
    29c2:	682b      	ldr	r3, [r5, #0]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d106      	bne.n	29d6 <__sfp+0x3e>
    29c8:	1c30      	adds	r0, r6, #0
    29ca:	2104      	movs	r1, #4
    29cc:	f7ff ff9c 	bl	2908 <__sfmoreglue>
    29d0:	6028      	str	r0, [r5, #0]
    29d2:	2800      	cmp	r0, #0
    29d4:	d001      	beq.n	29da <__sfp+0x42>
    29d6:	682d      	ldr	r5, [r5, #0]
    29d8:	e7e9      	b.n	29ae <__sfp+0x16>
    29da:	230c      	movs	r3, #12
    29dc:	6033      	str	r3, [r6, #0]
    29de:	e016      	b.n	2a0e <__sfp+0x76>
    29e0:	2301      	movs	r3, #1
    29e2:	1c20      	adds	r0, r4, #0
    29e4:	425b      	negs	r3, r3
    29e6:	81e3      	strh	r3, [r4, #14]
    29e8:	3302      	adds	r3, #2
    29ea:	81a3      	strh	r3, [r4, #12]
    29ec:	6667      	str	r7, [r4, #100]	; 0x64
    29ee:	6027      	str	r7, [r4, #0]
    29f0:	60a7      	str	r7, [r4, #8]
    29f2:	6067      	str	r7, [r4, #4]
    29f4:	6127      	str	r7, [r4, #16]
    29f6:	6167      	str	r7, [r4, #20]
    29f8:	61a7      	str	r7, [r4, #24]
    29fa:	305c      	adds	r0, #92	; 0x5c
    29fc:	1c39      	adds	r1, r7, #0
    29fe:	2208      	movs	r2, #8
    2a00:	f7ff fc4b 	bl	229a <memset>
    2a04:	1c20      	adds	r0, r4, #0
    2a06:	6367      	str	r7, [r4, #52]	; 0x34
    2a08:	63a7      	str	r7, [r4, #56]	; 0x38
    2a0a:	64a7      	str	r7, [r4, #72]	; 0x48
    2a0c:	64e7      	str	r7, [r4, #76]	; 0x4c
    2a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a10:	00003438 	.word	0x00003438

00002a14 <_fwalk_reent>:
    2a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a16:	1c04      	adds	r4, r0, #0
    2a18:	1c07      	adds	r7, r0, #0
    2a1a:	2600      	movs	r6, #0
    2a1c:	9101      	str	r1, [sp, #4]
    2a1e:	3448      	adds	r4, #72	; 0x48
    2a20:	2c00      	cmp	r4, #0
    2a22:	d016      	beq.n	2a52 <_fwalk_reent+0x3e>
    2a24:	6863      	ldr	r3, [r4, #4]
    2a26:	68a5      	ldr	r5, [r4, #8]
    2a28:	9300      	str	r3, [sp, #0]
    2a2a:	9b00      	ldr	r3, [sp, #0]
    2a2c:	3b01      	subs	r3, #1
    2a2e:	9300      	str	r3, [sp, #0]
    2a30:	d40d      	bmi.n	2a4e <_fwalk_reent+0x3a>
    2a32:	89ab      	ldrh	r3, [r5, #12]
    2a34:	2b01      	cmp	r3, #1
    2a36:	d908      	bls.n	2a4a <_fwalk_reent+0x36>
    2a38:	220e      	movs	r2, #14
    2a3a:	5eab      	ldrsh	r3, [r5, r2]
    2a3c:	3301      	adds	r3, #1
    2a3e:	d004      	beq.n	2a4a <_fwalk_reent+0x36>
    2a40:	1c38      	adds	r0, r7, #0
    2a42:	1c29      	adds	r1, r5, #0
    2a44:	9b01      	ldr	r3, [sp, #4]
    2a46:	4798      	blx	r3
    2a48:	4306      	orrs	r6, r0
    2a4a:	3568      	adds	r5, #104	; 0x68
    2a4c:	e7ed      	b.n	2a2a <_fwalk_reent+0x16>
    2a4e:	6824      	ldr	r4, [r4, #0]
    2a50:	e7e6      	b.n	2a20 <_fwalk_reent+0xc>
    2a52:	1c30      	adds	r0, r6, #0
    2a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002a58 <__smakebuf_r>:
    2a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a5a:	898b      	ldrh	r3, [r1, #12]
    2a5c:	b091      	sub	sp, #68	; 0x44
    2a5e:	079b      	lsls	r3, r3, #30
    2a60:	d506      	bpl.n	2a70 <__smakebuf_r+0x18>
    2a62:	1c0b      	adds	r3, r1, #0
    2a64:	3347      	adds	r3, #71	; 0x47
    2a66:	600b      	str	r3, [r1, #0]
    2a68:	610b      	str	r3, [r1, #16]
    2a6a:	2301      	movs	r3, #1
    2a6c:	614b      	str	r3, [r1, #20]
    2a6e:	e045      	b.n	2afc <__smakebuf_r+0xa4>
    2a70:	1c0c      	adds	r4, r1, #0
    2a72:	230e      	movs	r3, #14
    2a74:	5ec9      	ldrsh	r1, [r1, r3]
    2a76:	1c06      	adds	r6, r0, #0
    2a78:	2900      	cmp	r1, #0
    2a7a:	da04      	bge.n	2a86 <__smakebuf_r+0x2e>
    2a7c:	2380      	movs	r3, #128	; 0x80
    2a7e:	89a5      	ldrh	r5, [r4, #12]
    2a80:	401d      	ands	r5, r3
    2a82:	d110      	bne.n	2aa6 <__smakebuf_r+0x4e>
    2a84:	e00c      	b.n	2aa0 <__smakebuf_r+0x48>
    2a86:	aa01      	add	r2, sp, #4
    2a88:	f000 fc28 	bl	32dc <_fstat_r>
    2a8c:	2800      	cmp	r0, #0
    2a8e:	dbf5      	blt.n	2a7c <__smakebuf_r+0x24>
    2a90:	23f0      	movs	r3, #240	; 0xf0
    2a92:	9d02      	ldr	r5, [sp, #8]
    2a94:	021b      	lsls	r3, r3, #8
    2a96:	401d      	ands	r5, r3
    2a98:	4b19      	ldr	r3, [pc, #100]	; (2b00 <__smakebuf_r+0xa8>)
    2a9a:	18ed      	adds	r5, r5, r3
    2a9c:	426b      	negs	r3, r5
    2a9e:	415d      	adcs	r5, r3
    2aa0:	2780      	movs	r7, #128	; 0x80
    2aa2:	00ff      	lsls	r7, r7, #3
    2aa4:	e001      	b.n	2aaa <__smakebuf_r+0x52>
    2aa6:	2500      	movs	r5, #0
    2aa8:	2740      	movs	r7, #64	; 0x40
    2aaa:	1c30      	adds	r0, r6, #0
    2aac:	1c39      	adds	r1, r7, #0
    2aae:	f000 f87b 	bl	2ba8 <_malloc_r>
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d10c      	bne.n	2ad0 <__smakebuf_r+0x78>
    2ab6:	89a3      	ldrh	r3, [r4, #12]
    2ab8:	059a      	lsls	r2, r3, #22
    2aba:	d41f      	bmi.n	2afc <__smakebuf_r+0xa4>
    2abc:	2202      	movs	r2, #2
    2abe:	4313      	orrs	r3, r2
    2ac0:	81a3      	strh	r3, [r4, #12]
    2ac2:	1c23      	adds	r3, r4, #0
    2ac4:	3347      	adds	r3, #71	; 0x47
    2ac6:	6023      	str	r3, [r4, #0]
    2ac8:	6123      	str	r3, [r4, #16]
    2aca:	2301      	movs	r3, #1
    2acc:	6163      	str	r3, [r4, #20]
    2ace:	e015      	b.n	2afc <__smakebuf_r+0xa4>
    2ad0:	2280      	movs	r2, #128	; 0x80
    2ad2:	4b0c      	ldr	r3, [pc, #48]	; (2b04 <__smakebuf_r+0xac>)
    2ad4:	62b3      	str	r3, [r6, #40]	; 0x28
    2ad6:	89a3      	ldrh	r3, [r4, #12]
    2ad8:	6020      	str	r0, [r4, #0]
    2ada:	4313      	orrs	r3, r2
    2adc:	81a3      	strh	r3, [r4, #12]
    2ade:	6120      	str	r0, [r4, #16]
    2ae0:	6167      	str	r7, [r4, #20]
    2ae2:	2d00      	cmp	r5, #0
    2ae4:	d00a      	beq.n	2afc <__smakebuf_r+0xa4>
    2ae6:	230e      	movs	r3, #14
    2ae8:	5ee1      	ldrsh	r1, [r4, r3]
    2aea:	1c30      	adds	r0, r6, #0
    2aec:	f000 fc08 	bl	3300 <_isatty_r>
    2af0:	2800      	cmp	r0, #0
    2af2:	d003      	beq.n	2afc <__smakebuf_r+0xa4>
    2af4:	2201      	movs	r2, #1
    2af6:	89a3      	ldrh	r3, [r4, #12]
    2af8:	4313      	orrs	r3, r2
    2afa:	81a3      	strh	r3, [r4, #12]
    2afc:	b011      	add	sp, #68	; 0x44
    2afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b00:	ffffe000 	.word	0xffffe000
    2b04:	000028b1 	.word	0x000028b1

00002b08 <malloc>:
    2b08:	b508      	push	{r3, lr}
    2b0a:	4b03      	ldr	r3, [pc, #12]	; (2b18 <malloc+0x10>)
    2b0c:	1c01      	adds	r1, r0, #0
    2b0e:	6818      	ldr	r0, [r3, #0]
    2b10:	f000 f84a 	bl	2ba8 <_malloc_r>
    2b14:	bd08      	pop	{r3, pc}
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	200000d8 	.word	0x200000d8

00002b1c <_free_r>:
    2b1c:	b530      	push	{r4, r5, lr}
    2b1e:	2900      	cmp	r1, #0
    2b20:	d03e      	beq.n	2ba0 <_free_r+0x84>
    2b22:	3904      	subs	r1, #4
    2b24:	680b      	ldr	r3, [r1, #0]
    2b26:	2b00      	cmp	r3, #0
    2b28:	da00      	bge.n	2b2c <_free_r+0x10>
    2b2a:	18c9      	adds	r1, r1, r3
    2b2c:	4a1d      	ldr	r2, [pc, #116]	; (2ba4 <_free_r+0x88>)
    2b2e:	6813      	ldr	r3, [r2, #0]
    2b30:	1c14      	adds	r4, r2, #0
    2b32:	2b00      	cmp	r3, #0
    2b34:	d102      	bne.n	2b3c <_free_r+0x20>
    2b36:	604b      	str	r3, [r1, #4]
    2b38:	6011      	str	r1, [r2, #0]
    2b3a:	e031      	b.n	2ba0 <_free_r+0x84>
    2b3c:	4299      	cmp	r1, r3
    2b3e:	d20d      	bcs.n	2b5c <_free_r+0x40>
    2b40:	6808      	ldr	r0, [r1, #0]
    2b42:	180a      	adds	r2, r1, r0
    2b44:	429a      	cmp	r2, r3
    2b46:	d103      	bne.n	2b50 <_free_r+0x34>
    2b48:	6813      	ldr	r3, [r2, #0]
    2b4a:	18c3      	adds	r3, r0, r3
    2b4c:	600b      	str	r3, [r1, #0]
    2b4e:	6853      	ldr	r3, [r2, #4]
    2b50:	604b      	str	r3, [r1, #4]
    2b52:	6021      	str	r1, [r4, #0]
    2b54:	e024      	b.n	2ba0 <_free_r+0x84>
    2b56:	428a      	cmp	r2, r1
    2b58:	d803      	bhi.n	2b62 <_free_r+0x46>
    2b5a:	1c13      	adds	r3, r2, #0
    2b5c:	685a      	ldr	r2, [r3, #4]
    2b5e:	2a00      	cmp	r2, #0
    2b60:	d1f9      	bne.n	2b56 <_free_r+0x3a>
    2b62:	681d      	ldr	r5, [r3, #0]
    2b64:	195c      	adds	r4, r3, r5
    2b66:	428c      	cmp	r4, r1
    2b68:	d10b      	bne.n	2b82 <_free_r+0x66>
    2b6a:	6809      	ldr	r1, [r1, #0]
    2b6c:	1869      	adds	r1, r5, r1
    2b6e:	1858      	adds	r0, r3, r1
    2b70:	6019      	str	r1, [r3, #0]
    2b72:	4290      	cmp	r0, r2
    2b74:	d114      	bne.n	2ba0 <_free_r+0x84>
    2b76:	6810      	ldr	r0, [r2, #0]
    2b78:	6852      	ldr	r2, [r2, #4]
    2b7a:	1809      	adds	r1, r1, r0
    2b7c:	6019      	str	r1, [r3, #0]
    2b7e:	605a      	str	r2, [r3, #4]
    2b80:	e00e      	b.n	2ba0 <_free_r+0x84>
    2b82:	428c      	cmp	r4, r1
    2b84:	d902      	bls.n	2b8c <_free_r+0x70>
    2b86:	230c      	movs	r3, #12
    2b88:	6003      	str	r3, [r0, #0]
    2b8a:	e009      	b.n	2ba0 <_free_r+0x84>
    2b8c:	6808      	ldr	r0, [r1, #0]
    2b8e:	180c      	adds	r4, r1, r0
    2b90:	4294      	cmp	r4, r2
    2b92:	d103      	bne.n	2b9c <_free_r+0x80>
    2b94:	6814      	ldr	r4, [r2, #0]
    2b96:	6852      	ldr	r2, [r2, #4]
    2b98:	1900      	adds	r0, r0, r4
    2b9a:	6008      	str	r0, [r1, #0]
    2b9c:	604a      	str	r2, [r1, #4]
    2b9e:	6059      	str	r1, [r3, #4]
    2ba0:	bd30      	pop	{r4, r5, pc}
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	20000290 	.word	0x20000290

00002ba8 <_malloc_r>:
    2ba8:	2303      	movs	r3, #3
    2baa:	b570      	push	{r4, r5, r6, lr}
    2bac:	1ccc      	adds	r4, r1, #3
    2bae:	439c      	bics	r4, r3
    2bb0:	3408      	adds	r4, #8
    2bb2:	1c05      	adds	r5, r0, #0
    2bb4:	2c0c      	cmp	r4, #12
    2bb6:	d201      	bcs.n	2bbc <_malloc_r+0x14>
    2bb8:	240c      	movs	r4, #12
    2bba:	e005      	b.n	2bc8 <_malloc_r+0x20>
    2bbc:	2c00      	cmp	r4, #0
    2bbe:	da03      	bge.n	2bc8 <_malloc_r+0x20>
    2bc0:	230c      	movs	r3, #12
    2bc2:	2000      	movs	r0, #0
    2bc4:	602b      	str	r3, [r5, #0]
    2bc6:	e042      	b.n	2c4e <_malloc_r+0xa6>
    2bc8:	428c      	cmp	r4, r1
    2bca:	d3f9      	bcc.n	2bc0 <_malloc_r+0x18>
    2bcc:	4a20      	ldr	r2, [pc, #128]	; (2c50 <_malloc_r+0xa8>)
    2bce:	6813      	ldr	r3, [r2, #0]
    2bd0:	1c10      	adds	r0, r2, #0
    2bd2:	1c19      	adds	r1, r3, #0
    2bd4:	2900      	cmp	r1, #0
    2bd6:	d013      	beq.n	2c00 <_malloc_r+0x58>
    2bd8:	680a      	ldr	r2, [r1, #0]
    2bda:	1b12      	subs	r2, r2, r4
    2bdc:	d40d      	bmi.n	2bfa <_malloc_r+0x52>
    2bde:	2a0b      	cmp	r2, #11
    2be0:	d902      	bls.n	2be8 <_malloc_r+0x40>
    2be2:	600a      	str	r2, [r1, #0]
    2be4:	188b      	adds	r3, r1, r2
    2be6:	e01f      	b.n	2c28 <_malloc_r+0x80>
    2be8:	428b      	cmp	r3, r1
    2bea:	d102      	bne.n	2bf2 <_malloc_r+0x4a>
    2bec:	685a      	ldr	r2, [r3, #4]
    2bee:	6002      	str	r2, [r0, #0]
    2bf0:	e01b      	b.n	2c2a <_malloc_r+0x82>
    2bf2:	684a      	ldr	r2, [r1, #4]
    2bf4:	605a      	str	r2, [r3, #4]
    2bf6:	1c0b      	adds	r3, r1, #0
    2bf8:	e017      	b.n	2c2a <_malloc_r+0x82>
    2bfa:	1c0b      	adds	r3, r1, #0
    2bfc:	6849      	ldr	r1, [r1, #4]
    2bfe:	e7e9      	b.n	2bd4 <_malloc_r+0x2c>
    2c00:	4e14      	ldr	r6, [pc, #80]	; (2c54 <_malloc_r+0xac>)
    2c02:	6833      	ldr	r3, [r6, #0]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d103      	bne.n	2c10 <_malloc_r+0x68>
    2c08:	1c28      	adds	r0, r5, #0
    2c0a:	f000 fae3 	bl	31d4 <_sbrk_r>
    2c0e:	6030      	str	r0, [r6, #0]
    2c10:	1c28      	adds	r0, r5, #0
    2c12:	1c21      	adds	r1, r4, #0
    2c14:	f000 fade 	bl	31d4 <_sbrk_r>
    2c18:	1c03      	adds	r3, r0, #0
    2c1a:	1c42      	adds	r2, r0, #1
    2c1c:	d0d0      	beq.n	2bc0 <_malloc_r+0x18>
    2c1e:	2203      	movs	r2, #3
    2c20:	1cc6      	adds	r6, r0, #3
    2c22:	4396      	bics	r6, r2
    2c24:	4286      	cmp	r6, r0
    2c26:	d10a      	bne.n	2c3e <_malloc_r+0x96>
    2c28:	601c      	str	r4, [r3, #0]
    2c2a:	1c18      	adds	r0, r3, #0
    2c2c:	2107      	movs	r1, #7
    2c2e:	300b      	adds	r0, #11
    2c30:	1d1a      	adds	r2, r3, #4
    2c32:	4388      	bics	r0, r1
    2c34:	1a82      	subs	r2, r0, r2
    2c36:	d00a      	beq.n	2c4e <_malloc_r+0xa6>
    2c38:	4251      	negs	r1, r2
    2c3a:	5099      	str	r1, [r3, r2]
    2c3c:	e007      	b.n	2c4e <_malloc_r+0xa6>
    2c3e:	1a31      	subs	r1, r6, r0
    2c40:	1c28      	adds	r0, r5, #0
    2c42:	f000 fac7 	bl	31d4 <_sbrk_r>
    2c46:	1c43      	adds	r3, r0, #1
    2c48:	d0ba      	beq.n	2bc0 <_malloc_r+0x18>
    2c4a:	1c33      	adds	r3, r6, #0
    2c4c:	e7ec      	b.n	2c28 <_malloc_r+0x80>
    2c4e:	bd70      	pop	{r4, r5, r6, pc}
    2c50:	20000290 	.word	0x20000290
    2c54:	2000028c 	.word	0x2000028c

00002c58 <__sfputc_r>:
    2c58:	6893      	ldr	r3, [r2, #8]
    2c5a:	b510      	push	{r4, lr}
    2c5c:	3b01      	subs	r3, #1
    2c5e:	6093      	str	r3, [r2, #8]
    2c60:	2b00      	cmp	r3, #0
    2c62:	da05      	bge.n	2c70 <__sfputc_r+0x18>
    2c64:	6994      	ldr	r4, [r2, #24]
    2c66:	42a3      	cmp	r3, r4
    2c68:	db08      	blt.n	2c7c <__sfputc_r+0x24>
    2c6a:	b2cb      	uxtb	r3, r1
    2c6c:	2b0a      	cmp	r3, #10
    2c6e:	d005      	beq.n	2c7c <__sfputc_r+0x24>
    2c70:	6813      	ldr	r3, [r2, #0]
    2c72:	1c58      	adds	r0, r3, #1
    2c74:	6010      	str	r0, [r2, #0]
    2c76:	7019      	strb	r1, [r3, #0]
    2c78:	b2c8      	uxtb	r0, r1
    2c7a:	e001      	b.n	2c80 <__sfputc_r+0x28>
    2c7c:	f7ff fc96 	bl	25ac <__swbuf_r>
    2c80:	bd10      	pop	{r4, pc}

00002c82 <__sfputs_r>:
    2c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c84:	1c06      	adds	r6, r0, #0
    2c86:	1c0f      	adds	r7, r1, #0
    2c88:	1c14      	adds	r4, r2, #0
    2c8a:	18d5      	adds	r5, r2, r3
    2c8c:	42ac      	cmp	r4, r5
    2c8e:	d008      	beq.n	2ca2 <__sfputs_r+0x20>
    2c90:	7821      	ldrb	r1, [r4, #0]
    2c92:	1c30      	adds	r0, r6, #0
    2c94:	1c3a      	adds	r2, r7, #0
    2c96:	f7ff ffdf 	bl	2c58 <__sfputc_r>
    2c9a:	3401      	adds	r4, #1
    2c9c:	1c43      	adds	r3, r0, #1
    2c9e:	d1f5      	bne.n	2c8c <__sfputs_r+0xa>
    2ca0:	e000      	b.n	2ca4 <__sfputs_r+0x22>
    2ca2:	2000      	movs	r0, #0
    2ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002ca8 <_vfiprintf_r>:
    2ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2caa:	b09f      	sub	sp, #124	; 0x7c
    2cac:	1c06      	adds	r6, r0, #0
    2cae:	1c0f      	adds	r7, r1, #0
    2cb0:	9202      	str	r2, [sp, #8]
    2cb2:	9305      	str	r3, [sp, #20]
    2cb4:	2800      	cmp	r0, #0
    2cb6:	d004      	beq.n	2cc2 <_vfiprintf_r+0x1a>
    2cb8:	6983      	ldr	r3, [r0, #24]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d101      	bne.n	2cc2 <_vfiprintf_r+0x1a>
    2cbe:	f7ff fe39 	bl	2934 <__sinit>
    2cc2:	4b79      	ldr	r3, [pc, #484]	; (2ea8 <_vfiprintf_r+0x200>)
    2cc4:	429f      	cmp	r7, r3
    2cc6:	d101      	bne.n	2ccc <_vfiprintf_r+0x24>
    2cc8:	6877      	ldr	r7, [r6, #4]
    2cca:	e008      	b.n	2cde <_vfiprintf_r+0x36>
    2ccc:	4b77      	ldr	r3, [pc, #476]	; (2eac <_vfiprintf_r+0x204>)
    2cce:	429f      	cmp	r7, r3
    2cd0:	d101      	bne.n	2cd6 <_vfiprintf_r+0x2e>
    2cd2:	68b7      	ldr	r7, [r6, #8]
    2cd4:	e003      	b.n	2cde <_vfiprintf_r+0x36>
    2cd6:	4b76      	ldr	r3, [pc, #472]	; (2eb0 <_vfiprintf_r+0x208>)
    2cd8:	429f      	cmp	r7, r3
    2cda:	d100      	bne.n	2cde <_vfiprintf_r+0x36>
    2cdc:	68f7      	ldr	r7, [r6, #12]
    2cde:	89bb      	ldrh	r3, [r7, #12]
    2ce0:	071b      	lsls	r3, r3, #28
    2ce2:	d50a      	bpl.n	2cfa <_vfiprintf_r+0x52>
    2ce4:	693b      	ldr	r3, [r7, #16]
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d007      	beq.n	2cfa <_vfiprintf_r+0x52>
    2cea:	2300      	movs	r3, #0
    2cec:	ad06      	add	r5, sp, #24
    2cee:	616b      	str	r3, [r5, #20]
    2cf0:	3320      	adds	r3, #32
    2cf2:	766b      	strb	r3, [r5, #25]
    2cf4:	3310      	adds	r3, #16
    2cf6:	76ab      	strb	r3, [r5, #26]
    2cf8:	e03d      	b.n	2d76 <_vfiprintf_r+0xce>
    2cfa:	1c30      	adds	r0, r6, #0
    2cfc:	1c39      	adds	r1, r7, #0
    2cfe:	f7ff fcad 	bl	265c <__swsetup_r>
    2d02:	2800      	cmp	r0, #0
    2d04:	d0f1      	beq.n	2cea <_vfiprintf_r+0x42>
    2d06:	2001      	movs	r0, #1
    2d08:	4240      	negs	r0, r0
    2d0a:	e0ca      	b.n	2ea2 <_vfiprintf_r+0x1fa>
    2d0c:	9a05      	ldr	r2, [sp, #20]
    2d0e:	1d11      	adds	r1, r2, #4
    2d10:	6812      	ldr	r2, [r2, #0]
    2d12:	9105      	str	r1, [sp, #20]
    2d14:	2a00      	cmp	r2, #0
    2d16:	db7e      	blt.n	2e16 <_vfiprintf_r+0x16e>
    2d18:	9209      	str	r2, [sp, #36]	; 0x24
    2d1a:	3401      	adds	r4, #1
    2d1c:	7823      	ldrb	r3, [r4, #0]
    2d1e:	2b2e      	cmp	r3, #46	; 0x2e
    2d20:	d100      	bne.n	2d24 <_vfiprintf_r+0x7c>
    2d22:	e089      	b.n	2e38 <_vfiprintf_r+0x190>
    2d24:	7821      	ldrb	r1, [r4, #0]
    2d26:	4863      	ldr	r0, [pc, #396]	; (2eb4 <_vfiprintf_r+0x20c>)
    2d28:	2203      	movs	r2, #3
    2d2a:	f000 fb0f 	bl	334c <memchr>
    2d2e:	2800      	cmp	r0, #0
    2d30:	d008      	beq.n	2d44 <_vfiprintf_r+0x9c>
    2d32:	4b60      	ldr	r3, [pc, #384]	; (2eb4 <_vfiprintf_r+0x20c>)
    2d34:	3401      	adds	r4, #1
    2d36:	1ac0      	subs	r0, r0, r3
    2d38:	2340      	movs	r3, #64	; 0x40
    2d3a:	4083      	lsls	r3, r0
    2d3c:	1c18      	adds	r0, r3, #0
    2d3e:	682b      	ldr	r3, [r5, #0]
    2d40:	4318      	orrs	r0, r3
    2d42:	6028      	str	r0, [r5, #0]
    2d44:	7821      	ldrb	r1, [r4, #0]
    2d46:	1c63      	adds	r3, r4, #1
    2d48:	485b      	ldr	r0, [pc, #364]	; (2eb8 <_vfiprintf_r+0x210>)
    2d4a:	2206      	movs	r2, #6
    2d4c:	9302      	str	r3, [sp, #8]
    2d4e:	7629      	strb	r1, [r5, #24]
    2d50:	f000 fafc 	bl	334c <memchr>
    2d54:	2800      	cmp	r0, #0
    2d56:	d100      	bne.n	2d5a <_vfiprintf_r+0xb2>
    2d58:	e091      	b.n	2e7e <_vfiprintf_r+0x1d6>
    2d5a:	4b58      	ldr	r3, [pc, #352]	; (2ebc <_vfiprintf_r+0x214>)
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d000      	beq.n	2d62 <_vfiprintf_r+0xba>
    2d60:	e084      	b.n	2e6c <_vfiprintf_r+0x1c4>
    2d62:	2207      	movs	r2, #7
    2d64:	9b05      	ldr	r3, [sp, #20]
    2d66:	3307      	adds	r3, #7
    2d68:	4393      	bics	r3, r2
    2d6a:	3308      	adds	r3, #8
    2d6c:	9305      	str	r3, [sp, #20]
    2d6e:	696b      	ldr	r3, [r5, #20]
    2d70:	9a03      	ldr	r2, [sp, #12]
    2d72:	189b      	adds	r3, r3, r2
    2d74:	616b      	str	r3, [r5, #20]
    2d76:	9c02      	ldr	r4, [sp, #8]
    2d78:	7823      	ldrb	r3, [r4, #0]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d104      	bne.n	2d88 <_vfiprintf_r+0xe0>
    2d7e:	9b02      	ldr	r3, [sp, #8]
    2d80:	1ae3      	subs	r3, r4, r3
    2d82:	9304      	str	r3, [sp, #16]
    2d84:	d011      	beq.n	2daa <_vfiprintf_r+0x102>
    2d86:	e003      	b.n	2d90 <_vfiprintf_r+0xe8>
    2d88:	2b25      	cmp	r3, #37	; 0x25
    2d8a:	d0f8      	beq.n	2d7e <_vfiprintf_r+0xd6>
    2d8c:	3401      	adds	r4, #1
    2d8e:	e7f3      	b.n	2d78 <_vfiprintf_r+0xd0>
    2d90:	9b04      	ldr	r3, [sp, #16]
    2d92:	1c30      	adds	r0, r6, #0
    2d94:	1c39      	adds	r1, r7, #0
    2d96:	9a02      	ldr	r2, [sp, #8]
    2d98:	f7ff ff73 	bl	2c82 <__sfputs_r>
    2d9c:	1c43      	adds	r3, r0, #1
    2d9e:	d07b      	beq.n	2e98 <_vfiprintf_r+0x1f0>
    2da0:	696a      	ldr	r2, [r5, #20]
    2da2:	9b04      	ldr	r3, [sp, #16]
    2da4:	4694      	mov	ip, r2
    2da6:	4463      	add	r3, ip
    2da8:	616b      	str	r3, [r5, #20]
    2daa:	7823      	ldrb	r3, [r4, #0]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d073      	beq.n	2e98 <_vfiprintf_r+0x1f0>
    2db0:	2201      	movs	r2, #1
    2db2:	2300      	movs	r3, #0
    2db4:	4252      	negs	r2, r2
    2db6:	606a      	str	r2, [r5, #4]
    2db8:	a902      	add	r1, sp, #8
    2dba:	3254      	adds	r2, #84	; 0x54
    2dbc:	1852      	adds	r2, r2, r1
    2dbe:	3401      	adds	r4, #1
    2dc0:	602b      	str	r3, [r5, #0]
    2dc2:	60eb      	str	r3, [r5, #12]
    2dc4:	60ab      	str	r3, [r5, #8]
    2dc6:	7013      	strb	r3, [r2, #0]
    2dc8:	65ab      	str	r3, [r5, #88]	; 0x58
    2dca:	7821      	ldrb	r1, [r4, #0]
    2dcc:	483c      	ldr	r0, [pc, #240]	; (2ec0 <_vfiprintf_r+0x218>)
    2dce:	2205      	movs	r2, #5
    2dd0:	f000 fabc 	bl	334c <memchr>
    2dd4:	2800      	cmp	r0, #0
    2dd6:	d009      	beq.n	2dec <_vfiprintf_r+0x144>
    2dd8:	4b39      	ldr	r3, [pc, #228]	; (2ec0 <_vfiprintf_r+0x218>)
    2dda:	3401      	adds	r4, #1
    2ddc:	1ac0      	subs	r0, r0, r3
    2dde:	2301      	movs	r3, #1
    2de0:	4083      	lsls	r3, r0
    2de2:	1c18      	adds	r0, r3, #0
    2de4:	682b      	ldr	r3, [r5, #0]
    2de6:	4318      	orrs	r0, r3
    2de8:	6028      	str	r0, [r5, #0]
    2dea:	e7ee      	b.n	2dca <_vfiprintf_r+0x122>
    2dec:	682b      	ldr	r3, [r5, #0]
    2dee:	06da      	lsls	r2, r3, #27
    2df0:	d504      	bpl.n	2dfc <_vfiprintf_r+0x154>
    2df2:	2253      	movs	r2, #83	; 0x53
    2df4:	2120      	movs	r1, #32
    2df6:	a802      	add	r0, sp, #8
    2df8:	1812      	adds	r2, r2, r0
    2dfa:	7011      	strb	r1, [r2, #0]
    2dfc:	071a      	lsls	r2, r3, #28
    2dfe:	d504      	bpl.n	2e0a <_vfiprintf_r+0x162>
    2e00:	2253      	movs	r2, #83	; 0x53
    2e02:	212b      	movs	r1, #43	; 0x2b
    2e04:	a802      	add	r0, sp, #8
    2e06:	1812      	adds	r2, r2, r0
    2e08:	7011      	strb	r1, [r2, #0]
    2e0a:	7822      	ldrb	r2, [r4, #0]
    2e0c:	2a2a      	cmp	r2, #42	; 0x2a
    2e0e:	d100      	bne.n	2e12 <_vfiprintf_r+0x16a>
    2e10:	e77c      	b.n	2d0c <_vfiprintf_r+0x64>
    2e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e14:	e005      	b.n	2e22 <_vfiprintf_r+0x17a>
    2e16:	4252      	negs	r2, r2
    2e18:	60ea      	str	r2, [r5, #12]
    2e1a:	2202      	movs	r2, #2
    2e1c:	4313      	orrs	r3, r2
    2e1e:	602b      	str	r3, [r5, #0]
    2e20:	e77b      	b.n	2d1a <_vfiprintf_r+0x72>
    2e22:	7822      	ldrb	r2, [r4, #0]
    2e24:	3a30      	subs	r2, #48	; 0x30
    2e26:	2a09      	cmp	r2, #9
    2e28:	d804      	bhi.n	2e34 <_vfiprintf_r+0x18c>
    2e2a:	210a      	movs	r1, #10
    2e2c:	434b      	muls	r3, r1
    2e2e:	3401      	adds	r4, #1
    2e30:	189b      	adds	r3, r3, r2
    2e32:	e7f6      	b.n	2e22 <_vfiprintf_r+0x17a>
    2e34:	9309      	str	r3, [sp, #36]	; 0x24
    2e36:	e771      	b.n	2d1c <_vfiprintf_r+0x74>
    2e38:	7863      	ldrb	r3, [r4, #1]
    2e3a:	2b2a      	cmp	r3, #42	; 0x2a
    2e3c:	d109      	bne.n	2e52 <_vfiprintf_r+0x1aa>
    2e3e:	9b05      	ldr	r3, [sp, #20]
    2e40:	3402      	adds	r4, #2
    2e42:	1d1a      	adds	r2, r3, #4
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	9205      	str	r2, [sp, #20]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	da0d      	bge.n	2e68 <_vfiprintf_r+0x1c0>
    2e4c:	2301      	movs	r3, #1
    2e4e:	425b      	negs	r3, r3
    2e50:	e00a      	b.n	2e68 <_vfiprintf_r+0x1c0>
    2e52:	2300      	movs	r3, #0
    2e54:	3401      	adds	r4, #1
    2e56:	7822      	ldrb	r2, [r4, #0]
    2e58:	3a30      	subs	r2, #48	; 0x30
    2e5a:	2a09      	cmp	r2, #9
    2e5c:	d804      	bhi.n	2e68 <_vfiprintf_r+0x1c0>
    2e5e:	210a      	movs	r1, #10
    2e60:	434b      	muls	r3, r1
    2e62:	3401      	adds	r4, #1
    2e64:	189b      	adds	r3, r3, r2
    2e66:	e7f6      	b.n	2e56 <_vfiprintf_r+0x1ae>
    2e68:	9307      	str	r3, [sp, #28]
    2e6a:	e75b      	b.n	2d24 <_vfiprintf_r+0x7c>
    2e6c:	ab05      	add	r3, sp, #20
    2e6e:	9300      	str	r3, [sp, #0]
    2e70:	1c30      	adds	r0, r6, #0
    2e72:	1c29      	adds	r1, r5, #0
    2e74:	1c3a      	adds	r2, r7, #0
    2e76:	4b13      	ldr	r3, [pc, #76]	; (2ec4 <_vfiprintf_r+0x21c>)
    2e78:	e000      	b.n	2e7c <_vfiprintf_r+0x1d4>
    2e7a:	bf00      	nop
    2e7c:	e007      	b.n	2e8e <_vfiprintf_r+0x1e6>
    2e7e:	ab05      	add	r3, sp, #20
    2e80:	9300      	str	r3, [sp, #0]
    2e82:	1c30      	adds	r0, r6, #0
    2e84:	1c29      	adds	r1, r5, #0
    2e86:	1c3a      	adds	r2, r7, #0
    2e88:	4b0e      	ldr	r3, [pc, #56]	; (2ec4 <_vfiprintf_r+0x21c>)
    2e8a:	f000 f88b 	bl	2fa4 <_printf_i>
    2e8e:	9003      	str	r0, [sp, #12]
    2e90:	9b03      	ldr	r3, [sp, #12]
    2e92:	3301      	adds	r3, #1
    2e94:	d000      	beq.n	2e98 <_vfiprintf_r+0x1f0>
    2e96:	e76a      	b.n	2d6e <_vfiprintf_r+0xc6>
    2e98:	89bb      	ldrh	r3, [r7, #12]
    2e9a:	065b      	lsls	r3, r3, #25
    2e9c:	d500      	bpl.n	2ea0 <_vfiprintf_r+0x1f8>
    2e9e:	e732      	b.n	2d06 <_vfiprintf_r+0x5e>
    2ea0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2ea2:	b01f      	add	sp, #124	; 0x7c
    2ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	0000343c 	.word	0x0000343c
    2eac:	0000345c 	.word	0x0000345c
    2eb0:	0000347c 	.word	0x0000347c
    2eb4:	000034a2 	.word	0x000034a2
    2eb8:	000034a6 	.word	0x000034a6
    2ebc:	00000000 	.word	0x00000000
    2ec0:	0000349c 	.word	0x0000349c
    2ec4:	00002c83 	.word	0x00002c83

00002ec8 <_printf_common>:
    2ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2eca:	1c17      	adds	r7, r2, #0
    2ecc:	9301      	str	r3, [sp, #4]
    2ece:	690a      	ldr	r2, [r1, #16]
    2ed0:	688b      	ldr	r3, [r1, #8]
    2ed2:	9000      	str	r0, [sp, #0]
    2ed4:	1c0c      	adds	r4, r1, #0
    2ed6:	4293      	cmp	r3, r2
    2ed8:	da00      	bge.n	2edc <_printf_common+0x14>
    2eda:	1c13      	adds	r3, r2, #0
    2edc:	1c22      	adds	r2, r4, #0
    2ede:	603b      	str	r3, [r7, #0]
    2ee0:	3243      	adds	r2, #67	; 0x43
    2ee2:	7812      	ldrb	r2, [r2, #0]
    2ee4:	2a00      	cmp	r2, #0
    2ee6:	d001      	beq.n	2eec <_printf_common+0x24>
    2ee8:	3301      	adds	r3, #1
    2eea:	603b      	str	r3, [r7, #0]
    2eec:	6823      	ldr	r3, [r4, #0]
    2eee:	069b      	lsls	r3, r3, #26
    2ef0:	d502      	bpl.n	2ef8 <_printf_common+0x30>
    2ef2:	683b      	ldr	r3, [r7, #0]
    2ef4:	3302      	adds	r3, #2
    2ef6:	603b      	str	r3, [r7, #0]
    2ef8:	2506      	movs	r5, #6
    2efa:	6823      	ldr	r3, [r4, #0]
    2efc:	401d      	ands	r5, r3
    2efe:	d01e      	beq.n	2f3e <_printf_common+0x76>
    2f00:	1c23      	adds	r3, r4, #0
    2f02:	3343      	adds	r3, #67	; 0x43
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	1e5a      	subs	r2, r3, #1
    2f08:	4193      	sbcs	r3, r2
    2f0a:	6822      	ldr	r2, [r4, #0]
    2f0c:	0692      	lsls	r2, r2, #26
    2f0e:	d51c      	bpl.n	2f4a <_printf_common+0x82>
    2f10:	2030      	movs	r0, #48	; 0x30
    2f12:	18e1      	adds	r1, r4, r3
    2f14:	3140      	adds	r1, #64	; 0x40
    2f16:	70c8      	strb	r0, [r1, #3]
    2f18:	1c21      	adds	r1, r4, #0
    2f1a:	1c5a      	adds	r2, r3, #1
    2f1c:	3145      	adds	r1, #69	; 0x45
    2f1e:	7809      	ldrb	r1, [r1, #0]
    2f20:	18a2      	adds	r2, r4, r2
    2f22:	3240      	adds	r2, #64	; 0x40
    2f24:	3302      	adds	r3, #2
    2f26:	70d1      	strb	r1, [r2, #3]
    2f28:	e00f      	b.n	2f4a <_printf_common+0x82>
    2f2a:	1c22      	adds	r2, r4, #0
    2f2c:	2301      	movs	r3, #1
    2f2e:	9800      	ldr	r0, [sp, #0]
    2f30:	9901      	ldr	r1, [sp, #4]
    2f32:	3219      	adds	r2, #25
    2f34:	9e08      	ldr	r6, [sp, #32]
    2f36:	47b0      	blx	r6
    2f38:	1c43      	adds	r3, r0, #1
    2f3a:	d00e      	beq.n	2f5a <_printf_common+0x92>
    2f3c:	3501      	adds	r5, #1
    2f3e:	68e3      	ldr	r3, [r4, #12]
    2f40:	683a      	ldr	r2, [r7, #0]
    2f42:	1a9b      	subs	r3, r3, r2
    2f44:	429d      	cmp	r5, r3
    2f46:	dbf0      	blt.n	2f2a <_printf_common+0x62>
    2f48:	e7da      	b.n	2f00 <_printf_common+0x38>
    2f4a:	1c22      	adds	r2, r4, #0
    2f4c:	9800      	ldr	r0, [sp, #0]
    2f4e:	9901      	ldr	r1, [sp, #4]
    2f50:	3243      	adds	r2, #67	; 0x43
    2f52:	9d08      	ldr	r5, [sp, #32]
    2f54:	47a8      	blx	r5
    2f56:	1c43      	adds	r3, r0, #1
    2f58:	d102      	bne.n	2f60 <_printf_common+0x98>
    2f5a:	2001      	movs	r0, #1
    2f5c:	4240      	negs	r0, r0
    2f5e:	e020      	b.n	2fa2 <_printf_common+0xda>
    2f60:	2306      	movs	r3, #6
    2f62:	6820      	ldr	r0, [r4, #0]
    2f64:	68e1      	ldr	r1, [r4, #12]
    2f66:	683a      	ldr	r2, [r7, #0]
    2f68:	4003      	ands	r3, r0
    2f6a:	2500      	movs	r5, #0
    2f6c:	2b04      	cmp	r3, #4
    2f6e:	d103      	bne.n	2f78 <_printf_common+0xb0>
    2f70:	1a8d      	subs	r5, r1, r2
    2f72:	43eb      	mvns	r3, r5
    2f74:	17db      	asrs	r3, r3, #31
    2f76:	401d      	ands	r5, r3
    2f78:	68a3      	ldr	r3, [r4, #8]
    2f7a:	6922      	ldr	r2, [r4, #16]
    2f7c:	4293      	cmp	r3, r2
    2f7e:	dd01      	ble.n	2f84 <_printf_common+0xbc>
    2f80:	1a9b      	subs	r3, r3, r2
    2f82:	18ed      	adds	r5, r5, r3
    2f84:	2700      	movs	r7, #0
    2f86:	42af      	cmp	r7, r5
    2f88:	da0a      	bge.n	2fa0 <_printf_common+0xd8>
    2f8a:	1c22      	adds	r2, r4, #0
    2f8c:	2301      	movs	r3, #1
    2f8e:	9800      	ldr	r0, [sp, #0]
    2f90:	9901      	ldr	r1, [sp, #4]
    2f92:	321a      	adds	r2, #26
    2f94:	9e08      	ldr	r6, [sp, #32]
    2f96:	47b0      	blx	r6
    2f98:	1c43      	adds	r3, r0, #1
    2f9a:	d0de      	beq.n	2f5a <_printf_common+0x92>
    2f9c:	3701      	adds	r7, #1
    2f9e:	e7f2      	b.n	2f86 <_printf_common+0xbe>
    2fa0:	2000      	movs	r0, #0
    2fa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002fa4 <_printf_i>:
    2fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa6:	b08b      	sub	sp, #44	; 0x2c
    2fa8:	9206      	str	r2, [sp, #24]
    2faa:	1c0a      	adds	r2, r1, #0
    2fac:	3243      	adds	r2, #67	; 0x43
    2fae:	9307      	str	r3, [sp, #28]
    2fb0:	9005      	str	r0, [sp, #20]
    2fb2:	9204      	str	r2, [sp, #16]
    2fb4:	7e0a      	ldrb	r2, [r1, #24]
    2fb6:	1c0c      	adds	r4, r1, #0
    2fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2fba:	2a6e      	cmp	r2, #110	; 0x6e
    2fbc:	d100      	bne.n	2fc0 <_printf_i+0x1c>
    2fbe:	e0a8      	b.n	3112 <_printf_i+0x16e>
    2fc0:	d811      	bhi.n	2fe6 <_printf_i+0x42>
    2fc2:	2a63      	cmp	r2, #99	; 0x63
    2fc4:	d022      	beq.n	300c <_printf_i+0x68>
    2fc6:	d809      	bhi.n	2fdc <_printf_i+0x38>
    2fc8:	2a00      	cmp	r2, #0
    2fca:	d100      	bne.n	2fce <_printf_i+0x2a>
    2fcc:	e0b2      	b.n	3134 <_printf_i+0x190>
    2fce:	2a58      	cmp	r2, #88	; 0x58
    2fd0:	d000      	beq.n	2fd4 <_printf_i+0x30>
    2fd2:	e0c2      	b.n	315a <_printf_i+0x1b6>
    2fd4:	3145      	adds	r1, #69	; 0x45
    2fd6:	700a      	strb	r2, [r1, #0]
    2fd8:	4a7c      	ldr	r2, [pc, #496]	; (31cc <_printf_i+0x228>)
    2fda:	e04f      	b.n	307c <_printf_i+0xd8>
    2fdc:	2a64      	cmp	r2, #100	; 0x64
    2fde:	d01d      	beq.n	301c <_printf_i+0x78>
    2fe0:	2a69      	cmp	r2, #105	; 0x69
    2fe2:	d01b      	beq.n	301c <_printf_i+0x78>
    2fe4:	e0b9      	b.n	315a <_printf_i+0x1b6>
    2fe6:	2a73      	cmp	r2, #115	; 0x73
    2fe8:	d100      	bne.n	2fec <_printf_i+0x48>
    2fea:	e0a7      	b.n	313c <_printf_i+0x198>
    2fec:	d809      	bhi.n	3002 <_printf_i+0x5e>
    2fee:	2a6f      	cmp	r2, #111	; 0x6f
    2ff0:	d029      	beq.n	3046 <_printf_i+0xa2>
    2ff2:	2a70      	cmp	r2, #112	; 0x70
    2ff4:	d000      	beq.n	2ff8 <_printf_i+0x54>
    2ff6:	e0b0      	b.n	315a <_printf_i+0x1b6>
    2ff8:	2220      	movs	r2, #32
    2ffa:	6809      	ldr	r1, [r1, #0]
    2ffc:	430a      	orrs	r2, r1
    2ffe:	6022      	str	r2, [r4, #0]
    3000:	e037      	b.n	3072 <_printf_i+0xce>
    3002:	2a75      	cmp	r2, #117	; 0x75
    3004:	d01f      	beq.n	3046 <_printf_i+0xa2>
    3006:	2a78      	cmp	r2, #120	; 0x78
    3008:	d033      	beq.n	3072 <_printf_i+0xce>
    300a:	e0a6      	b.n	315a <_printf_i+0x1b6>
    300c:	1c0e      	adds	r6, r1, #0
    300e:	681a      	ldr	r2, [r3, #0]
    3010:	3642      	adds	r6, #66	; 0x42
    3012:	1d11      	adds	r1, r2, #4
    3014:	6019      	str	r1, [r3, #0]
    3016:	6813      	ldr	r3, [r2, #0]
    3018:	7033      	strb	r3, [r6, #0]
    301a:	e0a1      	b.n	3160 <_printf_i+0x1bc>
    301c:	6821      	ldr	r1, [r4, #0]
    301e:	681a      	ldr	r2, [r3, #0]
    3020:	0608      	lsls	r0, r1, #24
    3022:	d406      	bmi.n	3032 <_printf_i+0x8e>
    3024:	0649      	lsls	r1, r1, #25
    3026:	d504      	bpl.n	3032 <_printf_i+0x8e>
    3028:	1d11      	adds	r1, r2, #4
    302a:	6019      	str	r1, [r3, #0]
    302c:	2300      	movs	r3, #0
    302e:	5ed5      	ldrsh	r5, [r2, r3]
    3030:	e002      	b.n	3038 <_printf_i+0x94>
    3032:	1d11      	adds	r1, r2, #4
    3034:	6019      	str	r1, [r3, #0]
    3036:	6815      	ldr	r5, [r2, #0]
    3038:	2d00      	cmp	r5, #0
    303a:	da3b      	bge.n	30b4 <_printf_i+0x110>
    303c:	232d      	movs	r3, #45	; 0x2d
    303e:	9a04      	ldr	r2, [sp, #16]
    3040:	426d      	negs	r5, r5
    3042:	7013      	strb	r3, [r2, #0]
    3044:	e036      	b.n	30b4 <_printf_i+0x110>
    3046:	6821      	ldr	r1, [r4, #0]
    3048:	681a      	ldr	r2, [r3, #0]
    304a:	0608      	lsls	r0, r1, #24
    304c:	d406      	bmi.n	305c <_printf_i+0xb8>
    304e:	0649      	lsls	r1, r1, #25
    3050:	d504      	bpl.n	305c <_printf_i+0xb8>
    3052:	6815      	ldr	r5, [r2, #0]
    3054:	1d11      	adds	r1, r2, #4
    3056:	6019      	str	r1, [r3, #0]
    3058:	b2ad      	uxth	r5, r5
    305a:	e002      	b.n	3062 <_printf_i+0xbe>
    305c:	1d11      	adds	r1, r2, #4
    305e:	6019      	str	r1, [r3, #0]
    3060:	6815      	ldr	r5, [r2, #0]
    3062:	4b5a      	ldr	r3, [pc, #360]	; (31cc <_printf_i+0x228>)
    3064:	7e22      	ldrb	r2, [r4, #24]
    3066:	9303      	str	r3, [sp, #12]
    3068:	270a      	movs	r7, #10
    306a:	2a6f      	cmp	r2, #111	; 0x6f
    306c:	d11d      	bne.n	30aa <_printf_i+0x106>
    306e:	2708      	movs	r7, #8
    3070:	e01b      	b.n	30aa <_printf_i+0x106>
    3072:	1c22      	adds	r2, r4, #0
    3074:	2178      	movs	r1, #120	; 0x78
    3076:	3245      	adds	r2, #69	; 0x45
    3078:	7011      	strb	r1, [r2, #0]
    307a:	4a55      	ldr	r2, [pc, #340]	; (31d0 <_printf_i+0x22c>)
    307c:	6819      	ldr	r1, [r3, #0]
    307e:	9203      	str	r2, [sp, #12]
    3080:	1d08      	adds	r0, r1, #4
    3082:	6822      	ldr	r2, [r4, #0]
    3084:	6018      	str	r0, [r3, #0]
    3086:	680d      	ldr	r5, [r1, #0]
    3088:	0610      	lsls	r0, r2, #24
    308a:	d402      	bmi.n	3092 <_printf_i+0xee>
    308c:	0650      	lsls	r0, r2, #25
    308e:	d500      	bpl.n	3092 <_printf_i+0xee>
    3090:	b2ad      	uxth	r5, r5
    3092:	07d3      	lsls	r3, r2, #31
    3094:	d502      	bpl.n	309c <_printf_i+0xf8>
    3096:	2320      	movs	r3, #32
    3098:	431a      	orrs	r2, r3
    309a:	6022      	str	r2, [r4, #0]
    309c:	2710      	movs	r7, #16
    309e:	2d00      	cmp	r5, #0
    30a0:	d103      	bne.n	30aa <_printf_i+0x106>
    30a2:	2320      	movs	r3, #32
    30a4:	6822      	ldr	r2, [r4, #0]
    30a6:	439a      	bics	r2, r3
    30a8:	6022      	str	r2, [r4, #0]
    30aa:	1c23      	adds	r3, r4, #0
    30ac:	2200      	movs	r2, #0
    30ae:	3343      	adds	r3, #67	; 0x43
    30b0:	701a      	strb	r2, [r3, #0]
    30b2:	e002      	b.n	30ba <_printf_i+0x116>
    30b4:	270a      	movs	r7, #10
    30b6:	4b45      	ldr	r3, [pc, #276]	; (31cc <_printf_i+0x228>)
    30b8:	9303      	str	r3, [sp, #12]
    30ba:	6863      	ldr	r3, [r4, #4]
    30bc:	60a3      	str	r3, [r4, #8]
    30be:	2b00      	cmp	r3, #0
    30c0:	db03      	blt.n	30ca <_printf_i+0x126>
    30c2:	2204      	movs	r2, #4
    30c4:	6821      	ldr	r1, [r4, #0]
    30c6:	4391      	bics	r1, r2
    30c8:	6021      	str	r1, [r4, #0]
    30ca:	2d00      	cmp	r5, #0
    30cc:	d102      	bne.n	30d4 <_printf_i+0x130>
    30ce:	9e04      	ldr	r6, [sp, #16]
    30d0:	2b00      	cmp	r3, #0
    30d2:	d00e      	beq.n	30f2 <_printf_i+0x14e>
    30d4:	9e04      	ldr	r6, [sp, #16]
    30d6:	1c28      	adds	r0, r5, #0
    30d8:	1c39      	adds	r1, r7, #0
    30da:	f7ff f879 	bl	21d0 <__aeabi_uidivmod>
    30de:	9b03      	ldr	r3, [sp, #12]
    30e0:	3e01      	subs	r6, #1
    30e2:	5c5b      	ldrb	r3, [r3, r1]
    30e4:	1c28      	adds	r0, r5, #0
    30e6:	7033      	strb	r3, [r6, #0]
    30e8:	1c39      	adds	r1, r7, #0
    30ea:	f7fe ffeb 	bl	20c4 <__aeabi_uidiv>
    30ee:	1e05      	subs	r5, r0, #0
    30f0:	d1f1      	bne.n	30d6 <_printf_i+0x132>
    30f2:	2f08      	cmp	r7, #8
    30f4:	d109      	bne.n	310a <_printf_i+0x166>
    30f6:	6823      	ldr	r3, [r4, #0]
    30f8:	07db      	lsls	r3, r3, #31
    30fa:	d506      	bpl.n	310a <_printf_i+0x166>
    30fc:	6863      	ldr	r3, [r4, #4]
    30fe:	6922      	ldr	r2, [r4, #16]
    3100:	4293      	cmp	r3, r2
    3102:	dc02      	bgt.n	310a <_printf_i+0x166>
    3104:	2330      	movs	r3, #48	; 0x30
    3106:	3e01      	subs	r6, #1
    3108:	7033      	strb	r3, [r6, #0]
    310a:	9b04      	ldr	r3, [sp, #16]
    310c:	1b9b      	subs	r3, r3, r6
    310e:	6123      	str	r3, [r4, #16]
    3110:	e02b      	b.n	316a <_printf_i+0x1c6>
    3112:	6809      	ldr	r1, [r1, #0]
    3114:	681a      	ldr	r2, [r3, #0]
    3116:	0608      	lsls	r0, r1, #24
    3118:	d407      	bmi.n	312a <_printf_i+0x186>
    311a:	0649      	lsls	r1, r1, #25
    311c:	d505      	bpl.n	312a <_printf_i+0x186>
    311e:	1d11      	adds	r1, r2, #4
    3120:	6019      	str	r1, [r3, #0]
    3122:	6813      	ldr	r3, [r2, #0]
    3124:	8aa2      	ldrh	r2, [r4, #20]
    3126:	801a      	strh	r2, [r3, #0]
    3128:	e004      	b.n	3134 <_printf_i+0x190>
    312a:	1d11      	adds	r1, r2, #4
    312c:	6019      	str	r1, [r3, #0]
    312e:	6813      	ldr	r3, [r2, #0]
    3130:	6962      	ldr	r2, [r4, #20]
    3132:	601a      	str	r2, [r3, #0]
    3134:	2300      	movs	r3, #0
    3136:	9e04      	ldr	r6, [sp, #16]
    3138:	6123      	str	r3, [r4, #16]
    313a:	e016      	b.n	316a <_printf_i+0x1c6>
    313c:	681a      	ldr	r2, [r3, #0]
    313e:	1d11      	adds	r1, r2, #4
    3140:	6019      	str	r1, [r3, #0]
    3142:	6816      	ldr	r6, [r2, #0]
    3144:	2100      	movs	r1, #0
    3146:	1c30      	adds	r0, r6, #0
    3148:	6862      	ldr	r2, [r4, #4]
    314a:	f000 f8ff 	bl	334c <memchr>
    314e:	2800      	cmp	r0, #0
    3150:	d001      	beq.n	3156 <_printf_i+0x1b2>
    3152:	1b80      	subs	r0, r0, r6
    3154:	6060      	str	r0, [r4, #4]
    3156:	6863      	ldr	r3, [r4, #4]
    3158:	e003      	b.n	3162 <_printf_i+0x1be>
    315a:	1c26      	adds	r6, r4, #0
    315c:	3642      	adds	r6, #66	; 0x42
    315e:	7032      	strb	r2, [r6, #0]
    3160:	2301      	movs	r3, #1
    3162:	6123      	str	r3, [r4, #16]
    3164:	2300      	movs	r3, #0
    3166:	9a04      	ldr	r2, [sp, #16]
    3168:	7013      	strb	r3, [r2, #0]
    316a:	9b07      	ldr	r3, [sp, #28]
    316c:	9805      	ldr	r0, [sp, #20]
    316e:	9300      	str	r3, [sp, #0]
    3170:	1c21      	adds	r1, r4, #0
    3172:	9b06      	ldr	r3, [sp, #24]
    3174:	aa09      	add	r2, sp, #36	; 0x24
    3176:	f7ff fea7 	bl	2ec8 <_printf_common>
    317a:	1c43      	adds	r3, r0, #1
    317c:	d102      	bne.n	3184 <_printf_i+0x1e0>
    317e:	2001      	movs	r0, #1
    3180:	4240      	negs	r0, r0
    3182:	e021      	b.n	31c8 <_printf_i+0x224>
    3184:	6923      	ldr	r3, [r4, #16]
    3186:	9805      	ldr	r0, [sp, #20]
    3188:	9906      	ldr	r1, [sp, #24]
    318a:	1c32      	adds	r2, r6, #0
    318c:	9d07      	ldr	r5, [sp, #28]
    318e:	47a8      	blx	r5
    3190:	1c43      	adds	r3, r0, #1
    3192:	d0f4      	beq.n	317e <_printf_i+0x1da>
    3194:	6823      	ldr	r3, [r4, #0]
    3196:	079b      	lsls	r3, r3, #30
    3198:	d405      	bmi.n	31a6 <_printf_i+0x202>
    319a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    319c:	68e0      	ldr	r0, [r4, #12]
    319e:	4298      	cmp	r0, r3
    31a0:	da12      	bge.n	31c8 <_printf_i+0x224>
    31a2:	1c18      	adds	r0, r3, #0
    31a4:	e010      	b.n	31c8 <_printf_i+0x224>
    31a6:	2500      	movs	r5, #0
    31a8:	68e3      	ldr	r3, [r4, #12]
    31aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    31ac:	1a9b      	subs	r3, r3, r2
    31ae:	429d      	cmp	r5, r3
    31b0:	daf3      	bge.n	319a <_printf_i+0x1f6>
    31b2:	1c22      	adds	r2, r4, #0
    31b4:	2301      	movs	r3, #1
    31b6:	9805      	ldr	r0, [sp, #20]
    31b8:	9906      	ldr	r1, [sp, #24]
    31ba:	3219      	adds	r2, #25
    31bc:	9e07      	ldr	r6, [sp, #28]
    31be:	47b0      	blx	r6
    31c0:	1c43      	adds	r3, r0, #1
    31c2:	d0dc      	beq.n	317e <_printf_i+0x1da>
    31c4:	3501      	adds	r5, #1
    31c6:	e7ef      	b.n	31a8 <_printf_i+0x204>
    31c8:	b00b      	add	sp, #44	; 0x2c
    31ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31cc:	000034ad 	.word	0x000034ad
    31d0:	000034be 	.word	0x000034be

000031d4 <_sbrk_r>:
    31d4:	b538      	push	{r3, r4, r5, lr}
    31d6:	2300      	movs	r3, #0
    31d8:	4c06      	ldr	r4, [pc, #24]	; (31f4 <_sbrk_r+0x20>)
    31da:	1c05      	adds	r5, r0, #0
    31dc:	1c08      	adds	r0, r1, #0
    31de:	6023      	str	r3, [r4, #0]
    31e0:	f7fe fd96 	bl	1d10 <_sbrk>
    31e4:	1c43      	adds	r3, r0, #1
    31e6:	d103      	bne.n	31f0 <_sbrk_r+0x1c>
    31e8:	6823      	ldr	r3, [r4, #0]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d000      	beq.n	31f0 <_sbrk_r+0x1c>
    31ee:	602b      	str	r3, [r5, #0]
    31f0:	bd38      	pop	{r3, r4, r5, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	200002f8 	.word	0x200002f8

000031f8 <__sread>:
    31f8:	b538      	push	{r3, r4, r5, lr}
    31fa:	1c0c      	adds	r4, r1, #0
    31fc:	250e      	movs	r5, #14
    31fe:	5f49      	ldrsh	r1, [r1, r5]
    3200:	f000 f8b0 	bl	3364 <_read_r>
    3204:	2800      	cmp	r0, #0
    3206:	db03      	blt.n	3210 <__sread+0x18>
    3208:	6d63      	ldr	r3, [r4, #84]	; 0x54
    320a:	181b      	adds	r3, r3, r0
    320c:	6563      	str	r3, [r4, #84]	; 0x54
    320e:	e003      	b.n	3218 <__sread+0x20>
    3210:	89a2      	ldrh	r2, [r4, #12]
    3212:	4b02      	ldr	r3, [pc, #8]	; (321c <__sread+0x24>)
    3214:	4013      	ands	r3, r2
    3216:	81a3      	strh	r3, [r4, #12]
    3218:	bd38      	pop	{r3, r4, r5, pc}
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	ffffefff 	.word	0xffffefff

00003220 <__swrite>:
    3220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3222:	1c1e      	adds	r6, r3, #0
    3224:	898b      	ldrh	r3, [r1, #12]
    3226:	1c05      	adds	r5, r0, #0
    3228:	1c0c      	adds	r4, r1, #0
    322a:	1c17      	adds	r7, r2, #0
    322c:	05db      	lsls	r3, r3, #23
    322e:	d505      	bpl.n	323c <__swrite+0x1c>
    3230:	230e      	movs	r3, #14
    3232:	5ec9      	ldrsh	r1, [r1, r3]
    3234:	2200      	movs	r2, #0
    3236:	2302      	movs	r3, #2
    3238:	f000 f874 	bl	3324 <_lseek_r>
    323c:	89a2      	ldrh	r2, [r4, #12]
    323e:	4b05      	ldr	r3, [pc, #20]	; (3254 <__swrite+0x34>)
    3240:	1c28      	adds	r0, r5, #0
    3242:	4013      	ands	r3, r2
    3244:	81a3      	strh	r3, [r4, #12]
    3246:	1c3a      	adds	r2, r7, #0
    3248:	230e      	movs	r3, #14
    324a:	5ee1      	ldrsh	r1, [r4, r3]
    324c:	1c33      	adds	r3, r6, #0
    324e:	f000 f81f 	bl	3290 <_write_r>
    3252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3254:	ffffefff 	.word	0xffffefff

00003258 <__sseek>:
    3258:	b538      	push	{r3, r4, r5, lr}
    325a:	1c0c      	adds	r4, r1, #0
    325c:	250e      	movs	r5, #14
    325e:	5f49      	ldrsh	r1, [r1, r5]
    3260:	f000 f860 	bl	3324 <_lseek_r>
    3264:	89a3      	ldrh	r3, [r4, #12]
    3266:	1c42      	adds	r2, r0, #1
    3268:	d103      	bne.n	3272 <__sseek+0x1a>
    326a:	4a05      	ldr	r2, [pc, #20]	; (3280 <__sseek+0x28>)
    326c:	4013      	ands	r3, r2
    326e:	81a3      	strh	r3, [r4, #12]
    3270:	e004      	b.n	327c <__sseek+0x24>
    3272:	2280      	movs	r2, #128	; 0x80
    3274:	0152      	lsls	r2, r2, #5
    3276:	4313      	orrs	r3, r2
    3278:	81a3      	strh	r3, [r4, #12]
    327a:	6560      	str	r0, [r4, #84]	; 0x54
    327c:	bd38      	pop	{r3, r4, r5, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	ffffefff 	.word	0xffffefff

00003284 <__sclose>:
    3284:	b508      	push	{r3, lr}
    3286:	230e      	movs	r3, #14
    3288:	5ec9      	ldrsh	r1, [r1, r3]
    328a:	f000 f815 	bl	32b8 <_close_r>
    328e:	bd08      	pop	{r3, pc}

00003290 <_write_r>:
    3290:	b538      	push	{r3, r4, r5, lr}
    3292:	1c05      	adds	r5, r0, #0
    3294:	2000      	movs	r0, #0
    3296:	4c07      	ldr	r4, [pc, #28]	; (32b4 <_write_r+0x24>)
    3298:	6020      	str	r0, [r4, #0]
    329a:	1c08      	adds	r0, r1, #0
    329c:	1c11      	adds	r1, r2, #0
    329e:	1c1a      	adds	r2, r3, #0
    32a0:	f7fe fd0e 	bl	1cc0 <_write>
    32a4:	1c43      	adds	r3, r0, #1
    32a6:	d103      	bne.n	32b0 <_write_r+0x20>
    32a8:	6823      	ldr	r3, [r4, #0]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d000      	beq.n	32b0 <_write_r+0x20>
    32ae:	602b      	str	r3, [r5, #0]
    32b0:	bd38      	pop	{r3, r4, r5, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	200002f8 	.word	0x200002f8

000032b8 <_close_r>:
    32b8:	b538      	push	{r3, r4, r5, lr}
    32ba:	2300      	movs	r3, #0
    32bc:	4c06      	ldr	r4, [pc, #24]	; (32d8 <_close_r+0x20>)
    32be:	1c05      	adds	r5, r0, #0
    32c0:	1c08      	adds	r0, r1, #0
    32c2:	6023      	str	r3, [r4, #0]
    32c4:	f7fe fd36 	bl	1d34 <_close>
    32c8:	1c43      	adds	r3, r0, #1
    32ca:	d103      	bne.n	32d4 <_close_r+0x1c>
    32cc:	6823      	ldr	r3, [r4, #0]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d000      	beq.n	32d4 <_close_r+0x1c>
    32d2:	602b      	str	r3, [r5, #0]
    32d4:	bd38      	pop	{r3, r4, r5, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	200002f8 	.word	0x200002f8

000032dc <_fstat_r>:
    32dc:	b538      	push	{r3, r4, r5, lr}
    32de:	2300      	movs	r3, #0
    32e0:	4c06      	ldr	r4, [pc, #24]	; (32fc <_fstat_r+0x20>)
    32e2:	1c05      	adds	r5, r0, #0
    32e4:	1c08      	adds	r0, r1, #0
    32e6:	1c11      	adds	r1, r2, #0
    32e8:	6023      	str	r3, [r4, #0]
    32ea:	f7fe fd27 	bl	1d3c <_fstat>
    32ee:	1c43      	adds	r3, r0, #1
    32f0:	d103      	bne.n	32fa <_fstat_r+0x1e>
    32f2:	6823      	ldr	r3, [r4, #0]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d000      	beq.n	32fa <_fstat_r+0x1e>
    32f8:	602b      	str	r3, [r5, #0]
    32fa:	bd38      	pop	{r3, r4, r5, pc}
    32fc:	200002f8 	.word	0x200002f8

00003300 <_isatty_r>:
    3300:	b538      	push	{r3, r4, r5, lr}
    3302:	2300      	movs	r3, #0
    3304:	4c06      	ldr	r4, [pc, #24]	; (3320 <_isatty_r+0x20>)
    3306:	1c05      	adds	r5, r0, #0
    3308:	1c08      	adds	r0, r1, #0
    330a:	6023      	str	r3, [r4, #0]
    330c:	f7fe fd1c 	bl	1d48 <_isatty>
    3310:	1c43      	adds	r3, r0, #1
    3312:	d103      	bne.n	331c <_isatty_r+0x1c>
    3314:	6823      	ldr	r3, [r4, #0]
    3316:	2b00      	cmp	r3, #0
    3318:	d000      	beq.n	331c <_isatty_r+0x1c>
    331a:	602b      	str	r3, [r5, #0]
    331c:	bd38      	pop	{r3, r4, r5, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	200002f8 	.word	0x200002f8

00003324 <_lseek_r>:
    3324:	b538      	push	{r3, r4, r5, lr}
    3326:	1c05      	adds	r5, r0, #0
    3328:	2000      	movs	r0, #0
    332a:	4c07      	ldr	r4, [pc, #28]	; (3348 <_lseek_r+0x24>)
    332c:	6020      	str	r0, [r4, #0]
    332e:	1c08      	adds	r0, r1, #0
    3330:	1c11      	adds	r1, r2, #0
    3332:	1c1a      	adds	r2, r3, #0
    3334:	f7fe fd0a 	bl	1d4c <_lseek>
    3338:	1c43      	adds	r3, r0, #1
    333a:	d103      	bne.n	3344 <_lseek_r+0x20>
    333c:	6823      	ldr	r3, [r4, #0]
    333e:	2b00      	cmp	r3, #0
    3340:	d000      	beq.n	3344 <_lseek_r+0x20>
    3342:	602b      	str	r3, [r5, #0]
    3344:	bd38      	pop	{r3, r4, r5, pc}
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	200002f8 	.word	0x200002f8

0000334c <memchr>:
    334c:	b2c9      	uxtb	r1, r1
    334e:	1882      	adds	r2, r0, r2
    3350:	4290      	cmp	r0, r2
    3352:	d004      	beq.n	335e <memchr+0x12>
    3354:	7803      	ldrb	r3, [r0, #0]
    3356:	428b      	cmp	r3, r1
    3358:	d002      	beq.n	3360 <memchr+0x14>
    335a:	3001      	adds	r0, #1
    335c:	e7f8      	b.n	3350 <memchr+0x4>
    335e:	2000      	movs	r0, #0
    3360:	4770      	bx	lr
	...

00003364 <_read_r>:
    3364:	b538      	push	{r3, r4, r5, lr}
    3366:	1c05      	adds	r5, r0, #0
    3368:	2000      	movs	r0, #0
    336a:	4c07      	ldr	r4, [pc, #28]	; (3388 <_read_r+0x24>)
    336c:	6020      	str	r0, [r4, #0]
    336e:	1c08      	adds	r0, r1, #0
    3370:	1c11      	adds	r1, r2, #0
    3372:	1c1a      	adds	r2, r3, #0
    3374:	f7fe fc82 	bl	1c7c <_read>
    3378:	1c43      	adds	r3, r0, #1
    337a:	d103      	bne.n	3384 <_read_r+0x20>
    337c:	6823      	ldr	r3, [r4, #0]
    337e:	2b00      	cmp	r3, #0
    3380:	d000      	beq.n	3384 <_read_r+0x20>
    3382:	602b      	str	r3, [r5, #0]
    3384:	bd38      	pop	{r3, r4, r5, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	200002f8 	.word	0x200002f8
    338c:	41535b20 	.word	0x41535b20
    3390:	3031444d 	.word	0x3031444d
    3394:	54455420 	.word	0x54455420
    3398:	20534952 	.word	0x20534952
    339c:	20524f46 	.word	0x20524f46
    33a0:	4b454547 	.word	0x4b454547
    33a4:	454d4954 	.word	0x454d4954
    33a8:	00005d53 	.word	0x00005d53
    33ac:	3d3d5b20 	.word	0x3d3d5b20
    33b0:	3d3d3d3d 	.word	0x3d3d3d3d
    33b4:	43533d3d 	.word	0x43533d3d
    33b8:	3a45524f 	.word	0x3a45524f
    33bc:	3d642520 	.word	0x3d642520
    33c0:	3d3d3d3d 	.word	0x3d3d3d3d
    33c4:	5d3d3d3d 	.word	0x5d3d3d3d
    33c8:	0000000a 	.word	0x0000000a
    33cc:	42000800 	.word	0x42000800
    33d0:	42000c00 	.word	0x42000c00
    33d4:	42001000 	.word	0x42001000
    33d8:	000b0a09 	.word	0x000b0a09
    33dc:	000012ae 	.word	0x000012ae
    33e0:	000012aa 	.word	0x000012aa
    33e4:	000012aa 	.word	0x000012aa
    33e8:	0000130a 	.word	0x0000130a
    33ec:	0000130a 	.word	0x0000130a
    33f0:	000012c4 	.word	0x000012c4
    33f4:	000012b4 	.word	0x000012b4
    33f8:	000012ca 	.word	0x000012ca
    33fc:	000012f8 	.word	0x000012f8
    3400:	00001394 	.word	0x00001394
    3404:	00001374 	.word	0x00001374
    3408:	00001374 	.word	0x00001374
    340c:	00001400 	.word	0x00001400
    3410:	00001386 	.word	0x00001386
    3414:	000013a2 	.word	0x000013a2
    3418:	00001378 	.word	0x00001378
    341c:	000013b0 	.word	0x000013b0
    3420:	000013f0 	.word	0x000013f0
    3424:	42001800 	.word	0x42001800
    3428:	42001c00 	.word	0x42001c00
    342c:	00001212 	.word	0x00001212
    3430:	00800040 	.word	0x00800040

00003434 <tc_interrupt_vectors.11577>:
    3434:	00430e0d                                ..C.

00003438 <_global_impure_ptr>:
    3438:	20000078                                x.. 

0000343c <__sf_fake_stdin>:
	...

0000345c <__sf_fake_stdout>:
	...

0000347c <__sf_fake_stderr>:
	...
    349c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    34ac:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    34bc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    34cc:	00006665                                ef..

000034d0 <_init>:
    34d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34d6:	bc08      	pop	{r3}
    34d8:	469e      	mov	lr, r3
    34da:	4770      	bx	lr

000034dc <__init_array_start>:
    34dc:	000000b5 	.word	0x000000b5

000034e0 <_fini>:
    34e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    34e6:	bc08      	pop	{r3}
    34e8:	469e      	mov	lr, r3
    34ea:	4770      	bx	lr

000034ec <__fini_array_start>:
    34ec:	0000008d 	.word	0x0000008d
